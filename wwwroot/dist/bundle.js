!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";e.exports=n(13)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],a=n.document,l=Object.getPrototypeOf,u=i.slice,s=i.concat,c=i.push,f=i.indexOf,p={},d=p.toString,h=p.hasOwnProperty,m=h.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||a).createElement("script");if(i.text=e,t)for(r in _)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[d.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function S(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.4.1",constructor:E,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},l=1,u=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[l]||{},l++),"object"==typeof a||y(a)||(a={}),l===u&&(a=this,l--);l<u;l++)if(null!=(e=arguments[l]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(s&&r&&(E.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||E.isPlainObject(n)?n:{},o=!1,a[t]=E.extend(s,i,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){w(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?E.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(S(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return s.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var C=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,r,o,i,a,l,u,s,c,f,p,d,h,m,g,v,y,b,_="sizzle"+1*new Date,w=e.document,x=0,E=0,T=ue(),S=ue(),C=ue(),k=ue(),O=function(e,t){return e===t&&(f=!0),0},P={}.hasOwnProperty,N=[],j=N.pop,A=N.push,D=N.push,L=N.slice,I=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+M+"*("+q+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+M+"*\\]",H=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",U=new RegExp(M+"+","g"),W=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),$=new RegExp(M+"|>"),V=new RegExp(H),Q=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){p()},ae=_e(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{D.apply(N=L.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(e){D={apply:N.length?function(e,t){A.apply(e,L.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function le(e,t,r,o){var i,l,s,c,f,h,v,y=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!o&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,m)){if(11!==x&&(f=Z.exec(e)))if(i=f[1]){if(9===x){if(!(s=t.getElementById(i)))return r;if(s.id===i)return r.push(s),r}else if(y&&(s=y.getElementById(i))&&b(t,s)&&s.id===i)return r.push(s),r}else{if(f[2])return D.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===x&&$.test(e)){for((c=t.getAttribute("id"))?c=c.replace(re,oe):t.setAttribute("id",c=_),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+be(h[l]);v=h.join(","),y=ee.test(e)&&ve(t.parentNode)||t}try{return D.apply(r,y.querySelectorAll(v)),r}catch(t){k(e,!0)}finally{c===_&&t.removeAttribute("id")}}}return u(e.replace(W,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[_]=!0,e}function ce(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return se(function(t){return t=+t,se(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=le.support={},i=le.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=le.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,m=!i(d),w!==d&&(o=d.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(d.getElementsByClassName),n.getById=ce(function(e){return h.appendChild(e).id=_,!d.getElementsByName||!d.getElementsByName(_).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=J.test(d.querySelectorAll))&&(ce(function(e){h.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&b(w,e)?-1:t===d||t.ownerDocument===w&&b(w,t)?1:c?I(c,e)-I(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],l=[t];if(!o||!i)return e===d?-1:t===d?1:o?-1:i?1:c?I(c,e)-I(c,t):0;if(o===i)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?pe(a[r],l[r]):a[r]===w?-1:l[r]===w?1:0},d):d},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),n.matchesSelector&&m&&!k[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return le(t,d,null,[e]).length>0},le.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),b(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var o=r.attrHandle[t.toLowerCase()],i=o&&P.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},le.escape=function(e){return(e+"").replace(re,oe)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(O),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return c=null,e},o=le.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=le.selectors={cacheLength:50,createPseudo:se,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=le.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,p,d,h,m=i!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!u&&!l,b=!1;if(g){if(i){for(;m;){for(p=t;p=p[m];)if(l?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(d=(s=(c=(f=(p=g)[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===x&&s[1])&&s[2],p=d&&g.childNodes[d];p=++d&&p&&p[m]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[x,d,b];break}}else if(y&&(b=d=(s=(c=(f=(p=t)[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===x&&s[1]),!1===b)for(;(p=++d&&p&&p[m]||(b=d=0)||h.pop())&&((l?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(f=p[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return o[_]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=I(e,i[a])]=!(n[r]=i[a])}):function(e){return o(e,0,n)}):o}},pseudos:{not:se(function(e){var t=[],n=[],r=l(e.replace(W,"$1"));return r[_]?se(function(e,t,n,o){for(var i,a=r(e,null,o,[]),l=e.length;l--;)(i=a[l])&&(e[l]=!(t[l]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return le(e,t).length>0}}),contains:se(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}}),lang:se(function(e){return Q.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:ge(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function _e(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,l=E++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var s,c,f,p=[x,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[_]||(t[_]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===x&&s[1]===l)return p[2]=s[2];if(c[i]=p,p[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(i=e[l])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(l)));return a}function Ee(e,t,n,r,o,i){return r&&!r[_]&&(r=Ee(r)),o&&!o[_]&&(o=Ee(o,i)),se(function(i,a,l,u){var s,c,f,p=[],d=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)le(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!i&&t?m:xe(m,p,e,l,u),v=n?o||(i?e:h||r)?[]:a:g;if(n&&n(g,v,l,u),r)for(s=xe(v,d),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[d[c]]=!(g[d[c]]=f));if(i){if(o||e){if(o){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(g[c]=f);o(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=o?I(i,f):p[c])>-1&&(i[s]=!(a[s]=f))}}else v=xe(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):D.apply(a,v)})}function Te(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=_e(function(e){return e===t},l,!0),f=_e(function(e){return I(t,e)>-1},l,!0),p=[function(e,n,r){var o=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])p=[_e(we(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[_]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return Ee(u>1&&we(p),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(W,"$1"),n,u<o&&Te(e.slice(u,o)),o<i&&Te(e=e.slice(o)),o<i&&be(e))}p.push(n)}return we(p)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=le.tokenize=function(e,t){var n,o,i,a,l,u,s,c=S[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(o=B.exec(l))||(o&&(l=l.slice(o[0].length)||l),u.push(i=[])),n=!1,(o=z.exec(l))&&(n=o.shift(),i.push({value:n,type:o[0].replace(W," ")}),l=l.slice(n.length)),r.filter)!(o=K[a].exec(l))||s[a]&&!(o=s[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):S(e,u).slice(0)},l=le.compile=function(e,t){var n,o=[],i=[],l=C[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Te(t[n]))[_]?o.push(l):i.push(l);(l=C(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,l,u,c){var f,h,g,v=0,y="0",b=i&&[],_=[],w=s,E=i||o&&r.find.TAG("*",c),T=x+=null==w?1:Math.random()||.1,S=E.length;for(c&&(s=a===d||a||c);y!==S&&null!=(f=E[y]);y++){if(o&&f){for(h=0,a||f.ownerDocument===d||(p(f),l=!m);g=e[h++];)if(g(f,a||d,l)){u.push(f);break}c&&(x=T)}n&&((f=!g&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,_,a,l);if(i){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=j.call(u));_=xe(_)}D.apply(u,_),c&&!i&&_.length>0&&v+t.length>1&&le.uniqueSort(u)}return c&&(x=T,s=w),b};return n?se(i):i}(i,o))).selector=e}return l},u=le.select=function(e,t,n,o){var i,u,s,c,f,p="function"==typeof e&&e,d=!o&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=K.needsContext.test(e)?0:u.length;i--&&(s=u[i],!r.relative[c=s.type]);)if((f=r.find[c])&&(o=f(s.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return D.apply(n,o),n;break}}return(p||l(e,d))(o,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=_.split("").sort(O).join("")===_,n.detectDuplicates=!!f,p(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),le}(n);E.find=C,E.expr=C.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=C.uniqueSort,E.text=C.getText,E.isXMLDoc=C.isXML,E.contains=C.contains,E.escapeSelector=C.escape;var k=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&E(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=E.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return y(t)?E.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return f.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,o[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&P.test(e)?E(e):e||[],!1).length}});var D,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),j.test(r[1])&&E.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=a.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,D=E(a);var I=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&E(e);if(!P.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(E(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(N(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,r){var o=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=E.filter(r,o)),this.length>1&&(R[e]||E.uniqueSort(o),I.test(e)&&o.reverse()),this.pushStack(o)}});var q=/[^\x20\t\r\n\f]+/g;function F(e){return e}function H(e){throw e}function U(e,t,n,r){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(q)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,r,o,i=[],a=[],l=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},s={add:function(){return i&&(n&&!t&&(l=i.length-1,a.push(n)),function t(n){E.each(n,function(n,r){y(r)?e.unique&&s.has(r)||i.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--}),this},has:function(e){return e?E.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,r){var o=y(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var l=this,u=arguments,s=function(){var n,s;if(!(e<i)){if((n=r.apply(l,u))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(s)?o?s.call(n,a(i,t,F,o),a(i,t,H,o)):(i++,s.call(n,a(i,t,F,o),a(i,t,H,o),a(i,t,F,t.notifyWith))):(r!==F&&(l=void 0,u=[n]),(o||t.resolveWith)(l,u))}},c=o?s:function(){try{s()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,c.stackTrace),e+1>=i&&(r!==H&&(l=void 0,u=[n]),t.rejectWith(l,u))}};e?c():(E.Deferred.getStackHook&&(c.stackTrace=E.Deferred.getStackHook()),n.setTimeout(c))}}return E.Deferred(function(n){t[0][3].add(a(0,n,y(o)?o:F,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:F)),t[2][3].add(a(0,n,y(r)?r:H))}).promise()},promise:function(e){return null!=e?E.extend(e,o):o}},i={};return E.each(t,function(e,n){var a=n[2],l=n[5];o[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=u.call(arguments),i=E.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?u.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(U(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)U(o[n],a(n),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var B=E.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),E.ready()}E.fn.ready=function(e){return B.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||B.resolveWith(a,[E]))}}),E.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(E.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var $=function(e,t,n,r,o,i,a){var l=0,u=e.length,s=null==n;if("object"===x(n))for(l in o=!0,n)$(e,t,l,n[l],!0,i,a);else if(void 0!==r&&(o=!0,y(r)||(a=!0),s&&(a?(t.call(e,r),t=null):(s=t,t=function(e,t,n){return s.call(E(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return o?e:s?t.call(e):u?t(e[0],n):i},V=/^-ms-/,Q=/-([a-z])/g;function K(e,t){return t.toUpperCase()}function Y(e){return e.replace(V,"ms-").replace(Q,K)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Y(t)]=n;else for(r in t)o[Y(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(q)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new G,Z=new G,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):$(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,o=n.shift(),i=E._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){E.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=E.Deferred(),i=this,a=this.length,l=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=a.documentElement,le=function(e){return E.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(le=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&le(e)&&"none"===E.css(e,"display")},ce=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o};function fe(e,t,n,r){var o,i,a=20,l=r?function(){return r.cur()}:function(){return E.css(e,t,"")},u=l(),s=n&&n[3]||(E.cssNumber[t]?"":"px"),c=e.nodeType&&(E.cssNumber[t]||"px"!==s&&+u)&&oe.exec(E.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)E.style(e,t,c+s),(1-i)*(1-(i=l()/u||.5))<=0&&(a=0),c/=i;c*=2,E.style(e,t,c+s),n=n||[]}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}var pe={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,o=pe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=E.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),pe[r]=o,o)}function he(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=J.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=de(r))):"none"!==n&&(o[i]="none",J.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}E.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?E.merge([e],n):n}function _e(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var we,xe,Ee=/<|&#?\w+;/;function Te(e,t,n,r,o){for(var i,a,l,u,s,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if("object"===x(i))E.merge(p,i.nodeType?[i]:i);else if(Ee.test(i)){for(a=a||f.appendChild(t.createElement("div")),l=(ge.exec(i)||["",""])[1].toLowerCase(),u=ye[l]||ye._default,a.innerHTML=u[1]+E.htmlPrefilter(i)+u[2],c=u[0];c--;)a=a.lastChild;E.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(i));for(f.textContent="",d=0;i=p[d++];)if(r&&E.inArray(i,r)>-1)o&&o.push(i);else if(s=le(i),a=be(f.appendChild(i),"script"),s&&_e(a),n)for(c=0;i=a[c++];)ve.test(i.type||"")&&n.push(i);return f}we=a.createDocumentFragment().appendChild(a.createElement("div")),(xe=a.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),we.appendChild(xe),v.checkClone=we.cloneNode(!0).cloneNode(!0).lastChild.checked,we.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!we.cloneNode(!0).lastChild.defaultValue;var Se=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function Oe(){return!0}function Pe(){return!1}function Ne(e,t){return e===function(){try{return a.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,r,o,i){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)je(e,l,n,r,t[l],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Pe;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,o,r,n)})}function Ae(e,t,n){n?(J.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=J.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=u.call(arguments),J.set(this,t,i),r=n(this,t),this[t](),i!==(o=J.get(this,t))||r?J.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(J.set(this,t,{value:E.event.trigger(E.extend(i[0],E.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&E.event.add(e,t,Oe)}E.event={global:{},add:function(e,t,n,r,o){var i,a,l,u,s,c,f,p,d,h,m,g=J.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&E.find.matchesSelector(ae,o),n.guid||(n.guid=E.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(q)||[""]).length;s--;)d=m=(l=ke.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d&&(f=E.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=E.event.special[d]||{},c=E.extend({type:d,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&E.expr.match.needsContext.test(o),namespace:h.join(".")},i),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),E.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,l,u,s,c,f,p,d,h,m,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(s=(t=(t||"").match(q)||[""]).length;s--;)if(d=m=(l=ke.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d){for(f=E.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=p.length;i--;)c=p[i],!o&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(i,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||E.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)E.event.remove(e,d+t[s],n,r,!0);E.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,l=E.event.fix(e),u=new Array(arguments.length),s=(J.get(this,"events")||{})[l.type]||[],c=E.event.special[l.type]||{};for(u[0]=l,t=1;t<arguments.length;t++)u[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,s),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((E.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?E(o,this).index(s)>-1:E.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&l.push({elem:s,handlers:i})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click",Oe),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&N(t,"input")&&J.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Oe:Pe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Pe,isPropagationStopped:Pe,isImmediatePropagationStopped:Pe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Oe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Oe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Oe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Ne),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||E.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,r){return je(this,e,t,n,r)},one:function(e,t,n,r){return je(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Pe),this.each(function(){E.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Le=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,r,o,i,a,l,u,s;if(1===t.nodeType){if(J.hasData(e)&&(i=J.access(e),a=J.set(t,i),s=i.events))for(o in delete a.handle,a.events={},s)for(n=0,r=s[o].length;n<r;n++)E.event.add(t,o,s[o][n]);Z.hasData(e)&&(l=Z.access(e),u=E.extend({},l),Z.set(t,u))}}function Ue(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function We(e,t,n,r){t=s.apply([],t);var o,i,a,l,u,c,f=0,p=e.length,d=p-1,h=t[0],m=y(h);if(m||p>1&&"string"==typeof h&&!v.checkClone&&Ie.test(h))return e.each(function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),We(i,t,n,r)});if(p&&(i=(o=Te(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(l=(a=E.map(be(o,"script"),qe)).length;f<p;f++)u=o,f!==d&&(u=E.clone(u,!0,!0),l&&E.merge(a,be(u,"script"))),n.call(e[f],u,f);if(l)for(c=a[a.length-1].ownerDocument,E.map(a,Fe),f=0;f<l;f++)u=a[f],ve.test(u.type||"")&&!J.access(u,"globalEval")&&E.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):w(u.textContent.replace(Re,""),u,c))}return e}function Be(e,t,n){for(var r,o=t?E.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||E.cleanData(be(r)),r.parentNode&&(n&&le(r)&&_e(be(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,l=e.cloneNode(!0),u=le(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=be(l),r=0,o=(i=be(e)).length;r<o;r++)Ue(i[r],a[r]);if(t)if(n)for(i=i||be(e),a=a||be(l),r=0,o=i.length;r<o;r++)He(i[r],a[r]);else He(e,l);return(a=be(l,"script")).length>0&&_e(a,!u&&be(e,"script")),l},cleanData:function(e){for(var t,n,r,o=E.event.special,i=0;void 0!==(n=e[i]);i++)if(X(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return We(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return We(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return We(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return We(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return We(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(be(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,r=[],o=E(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),E(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var ze=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ve=new RegExp(ie.join("|"),"i");function Qe(e,t,n){var r,o,i,a,l=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||le(e)||(a=E.style(e,t)),!v.pixelBoxStyles()&&ze.test(a)&&Ve.test(t)&&(r=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(s).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",l=36===t(e.right),o=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),ae.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,l,u,s=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),l},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i}}))}();var Ye=["Webkit","Moz","ms"],Xe=a.createElement("div").style,Ge={};function Je(e){var t=E.cssProps[e]||Ge[e];return t||(e in Xe?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Xe)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ot(e,t,n,r,o,i){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=E.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=E.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=E.css(e,"border"+ie[a]+"Width",!0,o))):(u+=E.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=E.css(e,"border"+ie[a]+"Width",!0,o):l+=E.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-l-.5))||0),u}function it(e,t,n){var r=$e(e),o=(!v.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,r),i=o,a=Qe(e,t,r),l="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&o||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===E.css(e,"boxSizing",!1,r),(i=l in e)&&(a=e[l])),(a=parseFloat(a)||0)+ot(e,t,n||(o?"border":"content"),i,r,a)+"px"}function at(e,t,n,r,o){return new at.prototype.init(e,t,n,r,o)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,l=Y(t),u=et.test(t),s=e.style;if(u||(t=Je(l)),a=E.cssHooks[t]||E.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:s[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=fe(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=o&&o[3]||(E.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var o,i,a,l=Y(t);return et.test(t)||(t=Je(l)),(a=E.cssHooks[t]||E.cssHooks[l])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Qe(e,t,r)),"normal"===o&&t in nt&&(o=nt[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!Ze.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):ce(e,tt,function(){return it(e,t,r)})},set:function(e,n,r){var o,i=$e(e),a=!v.scrollboxSize()&&"absolute"===i.position,l=(a||r)&&"border-box"===E.css(e,"boxSizing",!1,i),u=r?ot(e,t,r,l,i):0;return l&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-ot(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),rt(0,n,u)}}}),E.cssHooks.marginLeft=Ke(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-ce(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(E.cssHooks[e+t].set=rt)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=$e(e),o=t.length;a<o;a++)i[t[a]]=E.css(e,t[a],!1,r);return i}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=at,at.prototype={constructor:at,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}},at.prototype.init.prototype=at.prototype,at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},at.propHooks.scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=at.prototype.init,E.fx.step={};var lt,ut,st=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ft(){ut&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ft):n.setTimeout(ft,E.fx.interval),E.fx.tick())}function pt(){return n.setTimeout(function(){lt=void 0}),lt=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ht(e,t,n){for(var r,o=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function mt(e,t,n){var r,o,i=0,a=mt.prefilters.length,l=E.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=lt||pt(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),i=0,a=s.tweens.length;i<a;i++)s.tweens[i].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:lt||pt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Y(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=E.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=mt.prefilters[i].call(s,e,c,s.opts))return y(r.stop)&&(E._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return E.map(c,ht,s),y(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),E.fx.timer(E.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}E.Animation=E.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return fe(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(q);for(var n,r=0,o=e.length;r<o;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,l,u,s,c,f="width"in t||"height"in t,p=this,d={},h=e.style,m=e.nodeType&&se(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],st.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}d[r]=g&&g[r]||E.style(e,r)}if((u=!E.isEmptyObject(t))||!E.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=g&&g.display)&&(s=J.get(e,"display")),"none"===(c=E.css(e,"display"))&&(s?c=s:(he([e],!0),s=e.style.display||s,c=E.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===E.css(e,"float")&&(u||(p.done(function(){h.display=s}),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:s}),i&&(g.hidden=!m),m&&he([e],!0),p.done(function(){for(r in m||he([e]),J.remove(e,"fxshow"),d)E.style(e,r,d[r])})),u=ht(m?g[r]:0,r,p),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=E.isEmptyObject(e),i=E.speed(t,n,r),a=function(){var t=mt(this,E.extend({},e),i);(o||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=E.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&ct.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=E.timers,a=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}}),E.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(lt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),lt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ut||(ut=!0,ft())},E.fx.stop=function(){ut=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?E.prop(e,t,n):(1===i&&E.isXMLDoc(e)||(o=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(q);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||E.find.attr;vt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=vt[a],vt[a]=o,o=null!=n(e,t,r)?a:null,vt[a]=i),o}});var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;function _t(e){return(e.match(q)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(q)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(e)||(t=E.propFix[t]||t,o=E.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each(function(t){E(this).addClass(e.call(this,t,wt(this)))});if((t=xt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+_t(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(l=_t(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each(function(t){E(this).removeClass(e.call(this,t,wt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+_t(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(l=_t(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,wt(this),t),t)}):this.each(function(){var t,o,i,a;if(r)for(o=0,i=E(this),a=xt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=wt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+_t(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;E.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=y(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,E(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=E.map(o,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=E.valHooks[o.type]||E.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Et,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:_t(E.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,i=E.makeArray(t),a=o.length;a--;)((r=o[a]).selected=E.inArray(E.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,o){var i,l,u,s,c,f,p,d,m=[r||a],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(l=d=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),p=E.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!b(r)){for(s=p.delegateType||g,Tt.test(s+g)||(l=l.parentNode);l;l=l.parentNode)m.push(l),u=l;u===(r.ownerDocument||a)&&m.push(u.defaultView||u.parentWindow||n)}for(i=0;(l=m[i++])&&!e.isPropagationStopped();)d=l,e.type=i>1?s:p.bindType||g,(f=(J.get(l,"events")||{})[e.type]&&J.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&X(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!X(r)||c&&y(r[g])&&!b(r)&&((u=r[c])&&(r[c]=null),E.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,St),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,St),E.event.triggered=void 0,u&&(r[c]=u)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=n.location,kt=Date.now(),Ot=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Pt=/\[\]$/,Nt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var o;if(Array.isArray(t))E.each(t,function(t,o){n||Pt.test(e)?r(e,o):Dt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==x(t))r(e,t);else for(o in t)Dt(e+"["+o+"]",t[o],n,r)}E.param=function(e,t){var n,r=[],o=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){o(this.name,this.value)});else for(n in e)Dt(n,e[n],t,o);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&At.test(this.nodeName)&&!jt.test(e)&&(this.checked||!me.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:n.replace(Nt,"\r\n")}}).get()}});var Lt=/%20/g,It=/#.*$/,Rt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Ht={},Ut={},Wt="*/".concat("*"),Bt=a.createElement("a");function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(q)||[];if(y(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function $t(e,t,n,r){var o={},i=e===Ut;function a(l){var u;return o[l]=!0,E.each(e[l]||[],function(e,l){var s=l(t,n,r);return"string"!=typeof s||i||o[s]?i?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)}),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Vt(e,t){var n,r,o=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Bt.href=Ct.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,E.ajaxSettings),t):Vt(E.ajaxSettings,e)},ajaxPrefilter:zt(Ht),ajaxTransport:zt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,l,u,s,c,f,p,d,h=E.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?E(m):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),b=h.statusCode||{},_={},w={},x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=Mt.exec(i);)l[t[1].toLowerCase()+" "]=(l[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=l[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||x;return r&&r.abort(t),S(0,t),this}};if(v.promise(T),h.url=((e||h.url||Ct.href)+"").replace(Ft,Ct.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(q)||[""],null==h.crossDomain){s=a.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),$t(Ht,h,t,T),c)return T;for(p in(f=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!qt.test(h.type),o=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Lt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Ot.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Rt,"$1"),d=(Ot.test(o)?"&":"?")+"_="+kt+++d),h.url=o+d),h.ifModified&&(E.lastModified[o]&&T.setRequestHeader("If-Modified-Since",E.lastModified[o]),E.etag[o]&&T.setRequestHeader("If-None-Match",E.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Wt+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(m,T,h)||c))return T.abort();if(x="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),r=$t(Ut,h,t,T)){if(T.readyState=1,f&&g.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(u=n.setTimeout(function(){T.abort("timeout")},h.timeout));try{c=!1,r.send(_,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,l){var s,p,d,_,w,x=t;c||(c=!0,u&&n.clearTimeout(u),r=void 0,i=l||"",T.readyState=e>0?4:0,s=e>=200&&e<300||304===e,a&&(_=function(e,t,n){for(var r,o,i,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(h,T,a)),_=function(e,t,n,r){var o,i,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=s[u+" "+i]||s["* "+i]))for(o in s)if((l=o.split(" "))[1]===i&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(h,_,T,s),s?(h.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(E.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(E.etag[o]=w)),204===e||"HEAD"===h.type?x="nocontent":304===e?x="notmodified":(x=_.state,p=_.data,s=!(d=_.error))):(d=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(t||x)+"",s?v.resolveWith(m,[p,x,T]):v.rejectWith(m,[T,x,d]),T.statusCode(b),b=void 0,f&&g.trigger(s?"ajaxSuccess":"ajaxError",[T,h,s?p:d]),y.fireWith(m,[T,x]),f&&(g.trigger("ajaxComplete",[T,h]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:o,data:n,success:r},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e,t){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Qt={0:200,1223:204},Kt=E.ajaxSettings.xhr();v.cors=!!Kt&&"withCredentials"in Kt,v.ajax=Kt=!!Kt,E.ajaxTransport(function(e){var t,r;if(v.cors||Kt&&!e.crossDomain)return{send:function(o,i){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Qt[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Yt,Xt=[],Gt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||E.expando+"_"+kt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,a,l=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Gt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||E.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always(function(){void 0===i?E(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(o)),a&&y(i)&&i(a[0]),a=i=void 0}),"script"}),v.createHTMLDocument=((Yt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=!n&&[],(o=j.exec(e))?[t.createElement(o[1])]:(o=Te([e],t,i),i&&i.length&&E(i).remove(),E.merge([],o.childNodes)));var r,o,i},E.fn.load=function(e,t,n){var r,o,i,a=this,l=e.indexOf(" ");return l>-1&&(r=_t(e.slice(l)),e=e.slice(0,l)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&E.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var r,o,i,a,l,u,s=E.css(e,"position"),c=E(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),i=E.css(e,"top"),u=E.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+u).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),y(t)&&(t=t.call(e,n,E.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+o),"using"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),o.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-E.css(r,"marginTop",!0),left:t.left-o.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ae})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return $(this,function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Ke(v.pixelPosition,function(e,n){if(n)return n=Qe(e,t),ze.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){E.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===i?"margin":"border");return $(this,function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?E.css(t,n,l):E.style(t,n,o,l)},t,a?o:void 0,a)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=u.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||E.guid++,o},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=N,E.isFunction=y,E.isWindow=b,E.camelCase=Y,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Jt=n.jQuery,Zt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Zt),e&&n.jQuery===E&&(n.jQuery=Jt),E},o||(n.jQuery=n.$=E),E})},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(15)},function(e,t,n){(function(e,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,l="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",s="__lodash_hash_undefined__",c=500,f="__lodash_placeholder__",p=1,d=2,h=4,m=1,g=2,v=1,y=2,b=4,_=8,w=16,x=32,E=64,T=128,S=256,C=512,k=30,O="...",P=800,N=16,j=1,A=2,D=1/0,L=9007199254740991,I=1.7976931348623157e308,R=NaN,M=4294967295,q=M-1,F=M>>>1,H=[["ary",T],["bind",v],["bindKey",y],["curry",_],["curryRight",w],["flip",C],["partial",x],["partialRight",E],["rearg",S]],U="[object Arguments]",W="[object Array]",B="[object AsyncFunction]",z="[object Boolean]",$="[object Date]",V="[object DOMException]",Q="[object Error]",K="[object Function]",Y="[object GeneratorFunction]",X="[object Map]",G="[object Number]",J="[object Null]",Z="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",oe="[object Symbol]",ie="[object Undefined]",ae="[object WeakMap]",le="[object WeakSet]",ue="[object ArrayBuffer]",se="[object DataView]",ce="[object Float32Array]",fe="[object Float64Array]",pe="[object Int8Array]",de="[object Int16Array]",he="[object Int32Array]",me="[object Uint8Array]",ge="[object Uint8ClampedArray]",ve="[object Uint16Array]",ye="[object Uint32Array]",be=/\b__p \+= '';/g,_e=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xe=/&(?:amp|lt|gt|quot|#39);/g,Ee=/[&<>"']/g,Te=RegExp(xe.source),Se=RegExp(Ee.source),Ce=/<%-([\s\S]+?)%>/g,ke=/<%([\s\S]+?)%>/g,Oe=/<%=([\s\S]+?)%>/g,Pe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ne=/^\w*$/,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ae=/[\\^$.*+?()[\]{}|]/g,De=RegExp(Ae.source),Le=/^\s+|\s+$/g,Ie=/^\s+/,Re=/\s+$/,Me=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,qe=/\{\n\/\* \[wrapped with (.+)\] \*/,Fe=/,? & /,He=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Ue=/\\(\\)?/g,We=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Be=/\w*$/,ze=/^[-+]0x[0-9a-f]+$/i,$e=/^0b[01]+$/i,Ve=/^\[object .+?Constructor\]$/,Qe=/^0o[0-7]+$/i,Ke=/^(?:0|[1-9]\d*)$/,Ye=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xe=/($^)/,Ge=/['\n\r\u2028\u2029\\]/g,Je="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ze="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Ze+"]",nt="["+Je+"]",rt="\\d+",ot="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Ze+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",lt="\\ud83c[\\udffb-\\udfff]",ut="[^\\ud800-\\udfff]",st="(?:\\ud83c[\\udde6-\\uddff]){2}",ct="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+it+"|"+at+")",dt="(?:"+ft+"|"+at+")",ht="(?:"+nt+"|"+lt+")"+"?",mt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[ut,st,ct].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),gt="(?:"+[ot,st,ct].join("|")+")"+mt,vt="(?:"+[ut+nt+"?",nt,st,ct,et].join("|")+")",yt=RegExp("['â]","g"),bt=RegExp(nt,"g"),_t=RegExp(lt+"(?="+lt+")|"+vt+mt,"g"),wt=RegExp([ft+"?"+it+"+(?:['â](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",dt+"+(?:['â](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+pt,"$"].join("|")+")",ft+"?"+pt+"+(?:['â](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['â](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,gt].join("|"),"g"),xt=RegExp("[\\u200d\\ud800-\\udfff"+Je+"\\ufe0e\\ufe0f]"),Et=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Tt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,Ct={};Ct[ce]=Ct[fe]=Ct[pe]=Ct[de]=Ct[he]=Ct[me]=Ct[ge]=Ct[ve]=Ct[ye]=!0,Ct[U]=Ct[W]=Ct[ue]=Ct[z]=Ct[se]=Ct[$]=Ct[Q]=Ct[K]=Ct[X]=Ct[G]=Ct[Z]=Ct[te]=Ct[ne]=Ct[re]=Ct[ae]=!1;var kt={};kt[U]=kt[W]=kt[ue]=kt[se]=kt[z]=kt[$]=kt[ce]=kt[fe]=kt[pe]=kt[de]=kt[he]=kt[X]=kt[G]=kt[Z]=kt[te]=kt[ne]=kt[re]=kt[oe]=kt[me]=kt[ge]=kt[ve]=kt[ye]=!0,kt[Q]=kt[K]=kt[ae]=!1;var Ot={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pt=parseFloat,Nt=parseInt,jt="object"==typeof e&&e&&e.Object===Object&&e,At="object"==typeof self&&self&&self.Object===Object&&self,Dt=jt||At||Function("return this")(),Lt=t&&!t.nodeType&&t,It=Lt&&"object"==typeof r&&r&&!r.nodeType&&r,Rt=It&&It.exports===Lt,Mt=Rt&&jt.process,qt=function(){try{var e=It&&It.require&&It.require("util").types;return e||Mt&&Mt.binding&&Mt.binding("util")}catch(e){}}(),Ft=qt&&qt.isArrayBuffer,Ht=qt&&qt.isDate,Ut=qt&&qt.isMap,Wt=qt&&qt.isRegExp,Bt=qt&&qt.isSet,zt=qt&&qt.isTypedArray;function $t(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Vt(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}function Qt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Kt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Yt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Xt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}function Gt(e,t){return!!(null==e?0:e.length)&&un(e,t,0)>-1}function Jt(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Zt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function en(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function tn(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function nn(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=pn("length");function an(e,t,n){var r;return n(e,function(e,n,o){if(t(e,n,o))return r=n,!1}),r}function ln(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function un(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):ln(e,cn,n)}function sn(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function cn(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?mn(e,t)/n:R}function pn(e){return function(t){return null==t?i:t[e]}}function dn(e){return function(t){return null==e?i:e[t]}}function hn(e,t,n,r,o){return o(e,function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)}),n}function mn(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function gn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function vn(e){return function(t){return e(t)}}function yn(e,t){return Zt(t,function(t){return e[t]})}function bn(e,t){return e.has(t)}function _n(e,t){for(var n=-1,r=e.length;++n<r&&un(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&un(t,e[n],0)>-1;);return n}var xn=dn({"Ã":"A","Ã":"A","Ã":"A","Ã":"A","Ã":"A","Ã":"A","Ã ":"a","Ã¡":"a","Ã¢":"a","Ã£":"a","Ã¤":"a","Ã¥":"a","Ã":"C","Ã§":"c","Ã":"D","Ã°":"d","Ã":"E","Ã":"E","Ã":"E","Ã":"E","Ã¨":"e","Ã©":"e","Ãª":"e","Ã«":"e","Ã":"I","Ã":"I","Ã":"I","Ã":"I","Ã¬":"i","Ã­":"i","Ã®":"i","Ã¯":"i","Ã":"N","Ã±":"n","Ã":"O","Ã":"O","Ã":"O","Ã":"O","Ã":"O","Ã":"O","Ã²":"o","Ã³":"o","Ã´":"o","Ãµ":"o","Ã¶":"o","Ã¸":"o","Ã":"U","Ã":"U","Ã":"U","Ã":"U","Ã¹":"u","Ãº":"u","Ã»":"u","Ã¼":"u","Ã":"Y","Ã½":"y","Ã¿":"y","Ã":"Ae","Ã¦":"ae","Ã":"Th","Ã¾":"th","Ã":"ss","Ä":"A","Ä":"A","Ä":"A","Ä":"a","Ä":"a","Ä":"a","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"D","Ä":"D","Ä":"d","Ä":"d","Ä":"E","Ä":"E","Ä":"E","Ä":"E","Ä":"E","Ä":"e","Ä":"e","Ä":"e","Ä":"e","Ä":"e","Ä":"G","Ä":"G","Ä ":"G","Ä¢":"G","Ä":"g","Ä":"g","Ä¡":"g","Ä£":"g","Ä¤":"H","Ä¦":"H","Ä¥":"h","Ä§":"h","Ä¨":"I","Äª":"I","Ä¬":"I","Ä®":"I","Ä°":"I","Ä©":"i","Ä«":"i","Ä­":"i","Ä¯":"i","Ä±":"i","Ä´":"J","Äµ":"j","Ä¶":"K","Ä·":"k","Ä¸":"k","Ä¹":"L","Ä»":"L","Ä½":"L","Ä¿":"L","Å":"L","Äº":"l","Ä¼":"l","Ä¾":"l","Å":"l","Å":"l","Å":"N","Å":"N","Å":"N","Å":"N","Å":"n","Å":"n","Å":"n","Å":"n","Å":"O","Å":"O","Å":"O","Å":"o","Å":"o","Å":"o","Å":"R","Å":"R","Å":"R","Å":"r","Å":"r","Å":"r","Å":"S","Å":"S","Å":"S","Å ":"S","Å":"s","Å":"s","Å":"s","Å¡":"s","Å¢":"T","Å¤":"T","Å¦":"T","Å£":"t","Å¥":"t","Å§":"t","Å¨":"U","Åª":"U","Å¬":"U","Å®":"U","Å°":"U","Å²":"U","Å©":"u","Å«":"u","Å­":"u","Å¯":"u","Å±":"u","Å³":"u","Å´":"W","Åµ":"w","Å¶":"Y","Å·":"y","Å¸":"Y","Å¹":"Z","Å»":"Z","Å½":"Z","Åº":"z","Å¼":"z","Å¾":"z","Ä²":"IJ","Ä³":"ij","Å":"Oe","Å":"oe","Å":"'n","Å¿":"s"}),En=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Tn(e){return"\\"+Ot[e]}function Sn(e){return xt.test(e)}function Cn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function kn(e,t){return function(n){return e(t(n))}}function On(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,i[o++]=n)}return i}function Pn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Nn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function jn(e){return Sn(e)?function(e){var t=_t.lastIndex=0;for(;_t.test(e);)++t;return t}(e):on(e)}function An(e){return Sn(e)?function(e){return e.match(_t)||[]}(e):function(e){return e.split("")}(e)}var Dn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ln=function e(t){var n,r=(t=null==t?Dt:Ln.defaults(Dt.Object(),t,Ln.pick(Dt,Tt))).Array,o=t.Date,Je=t.Error,Ze=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,ot=t.TypeError,it=r.prototype,at=Ze.prototype,lt=tt.prototype,ut=t["__core-js_shared__"],st=at.toString,ct=lt.hasOwnProperty,ft=0,pt=(n=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=lt.toString,ht=st.call(tt),mt=Dt._,gt=nt("^"+st.call(ct).replace(Ae,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=Rt?t.Buffer:i,_t=t.Symbol,xt=t.Uint8Array,Ot=vt?vt.allocUnsafe:i,jt=kn(tt.getPrototypeOf,tt),At=tt.create,Lt=lt.propertyIsEnumerable,It=it.splice,Mt=_t?_t.isConcatSpreadable:i,qt=_t?_t.iterator:i,on=_t?_t.toStringTag:i,dn=function(){try{var e=Fi(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),In=t.clearTimeout!==Dt.clearTimeout&&t.clearTimeout,Rn=o&&o.now!==Dt.Date.now&&o.now,Mn=t.setTimeout!==Dt.setTimeout&&t.setTimeout,qn=et.ceil,Fn=et.floor,Hn=tt.getOwnPropertySymbols,Un=vt?vt.isBuffer:i,Wn=t.isFinite,Bn=it.join,zn=kn(tt.keys,tt),$n=et.max,Vn=et.min,Qn=o.now,Kn=t.parseInt,Yn=et.random,Xn=it.reverse,Gn=Fi(t,"DataView"),Jn=Fi(t,"Map"),Zn=Fi(t,"Promise"),er=Fi(t,"Set"),tr=Fi(t,"WeakMap"),nr=Fi(tt,"create"),rr=tr&&new tr,or={},ir=fa(Gn),ar=fa(Jn),lr=fa(Zn),ur=fa(er),sr=fa(tr),cr=_t?_t.prototype:i,fr=cr?cr.valueOf:i,pr=cr?cr.toString:i;function dr(e){if(Ol(e)&&!vl(e)&&!(e instanceof vr)){if(e instanceof gr)return e;if(ct.call(e,"__wrapped__"))return pa(e)}return new gr(e)}var hr=function(){function e(){}return function(t){if(!kl(t))return{};if(At)return At(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function mr(){}function gr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function vr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=M,this.__views__=[]}function yr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new _r;++t<n;)this.add(e[t])}function xr(e){var t=this.__data__=new br(e);this.size=t.size}function Er(e,t){var n=vl(e),r=!n&&gl(e),o=!n&&!r&&wl(e),i=!n&&!r&&!o&&Rl(e),a=n||r||o||i,l=a?gn(e.length,rt):[],u=l.length;for(var s in e)!t&&!ct.call(e,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Vi(s,u))||l.push(s);return l}function Tr(e){var t=e.length;return t?e[xo(0,t-1)]:i}function Sr(e,t){return ua(ri(e),Lr(t,0,e.length))}function Cr(e){return ua(ri(e))}function kr(e,t,n){(n===i||dl(e[t],n))&&(n!==i||t in e)||Ar(e,t,n)}function Or(e,t,n){var r=e[t];ct.call(e,t)&&dl(r,n)&&(n!==i||t in e)||Ar(e,t,n)}function Pr(e,t){for(var n=e.length;n--;)if(dl(e[n][0],t))return n;return-1}function Nr(e,t,n,r){return Fr(e,function(e,o,i){t(r,e,n(e),i)}),r}function jr(e,t){return e&&oi(t,ou(t),e)}function Ar(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Dr(e,t){for(var n=-1,o=t.length,a=r(o),l=null==e;++n<o;)a[n]=l?i:Zl(e,t[n]);return a}function Lr(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function Ir(e,t,n,r,o,a){var l,u=t&p,s=t&d,c=t&h;if(n&&(l=o?n(e,r,o,a):n(e)),l!==i)return l;if(!kl(e))return e;var f=vl(e);if(f){if(l=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ct.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!u)return ri(e,l)}else{var m=Wi(e),g=m==K||m==Y;if(wl(e))return Go(e,u);if(m==Z||m==U||g&&!o){if(l=s||g?{}:zi(e),!u)return s?function(e,t){return oi(e,Ui(e),t)}(e,function(e,t){return e&&oi(t,iu(t),e)}(l,e)):function(e,t){return oi(e,Hi(e),t)}(e,jr(l,e))}else{if(!kt[m])return o?e:{};l=function(e,t,n){var r,o=e.constructor;switch(t){case ue:return Jo(e);case z:case $:return new o(+e);case se:return function(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case ce:case fe:case pe:case de:case he:case me:case ge:case ve:case ye:return Zo(e,n);case X:return new o;case G:case re:return new o(e);case te:return function(e){var t=new e.constructor(e.source,Be.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new o;case oe:return r=e,fr?tt(fr.call(r)):{}}}(e,m,u)}}a||(a=new xr);var v=a.get(e);if(v)return v;if(a.set(e,l),Dl(e))return e.forEach(function(r){l.add(Ir(r,t,n,r,e,a))}),l;if(Pl(e))return e.forEach(function(r,o){l.set(o,Ir(r,t,n,o,e,a))}),l;var y=f?i:(c?s?Ai:ji:s?iu:ou)(e);return Qt(y||e,function(r,o){y&&(r=e[o=r]),Or(l,o,Ir(r,t,n,o,e,a))}),l}function Rr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var o=n[r],a=t[o],l=e[o];if(l===i&&!(o in e)||!a(l))return!1}return!0}function Mr(e,t,n){if("function"!=typeof e)throw new ot(u);return oa(function(){e.apply(i,n)},t)}function qr(e,t,n,r){var o=-1,i=Gt,l=!0,u=e.length,s=[],c=t.length;if(!u)return s;n&&(t=Zt(t,vn(n))),r?(i=Jt,l=!1):t.length>=a&&(i=bn,l=!1,t=new wr(t));e:for(;++o<u;){var f=e[o],p=null==n?f:n(f);if(f=r||0!==f?f:0,l&&p==p){for(var d=c;d--;)if(t[d]===p)continue e;s.push(f)}else i(t,p,r)||s.push(f)}return s}dr.templateSettings={escape:Ce,evaluate:ke,interpolate:Oe,variable:"",imports:{_:dr}},dr.prototype=mr.prototype,dr.prototype.constructor=dr,gr.prototype=hr(mr.prototype),gr.prototype.constructor=gr,vr.prototype=hr(mr.prototype),vr.prototype.constructor=vr,yr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},yr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},yr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===s?i:n}return ct.call(t,e)?t[e]:i},yr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==i:ct.call(t,e)},yr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===i?s:t,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(e){var t=this.__data__,n=Pr(t,e);return!(n<0||(n==t.length-1?t.pop():It.call(t,n,1),--this.size,0))},br.prototype.get=function(e){var t=this.__data__,n=Pr(t,e);return n<0?i:t[n][1]},br.prototype.has=function(e){return Pr(this.__data__,e)>-1},br.prototype.set=function(e,t){var n=this.__data__,r=Pr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new yr,map:new(Jn||br),string:new yr}},_r.prototype.delete=function(e){var t=Mi(this,e).delete(e);return this.size-=t?1:0,t},_r.prototype.get=function(e){return Mi(this,e).get(e)},_r.prototype.has=function(e){return Mi(this,e).has(e)},_r.prototype.set=function(e,t){var n=Mi(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,s),this},wr.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.clear=function(){this.__data__=new br,this.size=0},xr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},xr.prototype.get=function(e){return this.__data__.get(e)},xr.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Jn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new _r(r)}return n.set(e,t),this.size=n.size,this};var Fr=li(Qr),Hr=li(Kr,!0);function Ur(e,t){var n=!0;return Fr(e,function(e,r,o){return n=!!t(e,r,o)}),n}function Wr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],l=t(a);if(null!=l&&(u===i?l==l&&!Il(l):n(l,u)))var u=l,s=a}return s}function Br(e,t){var n=[];return Fr(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function zr(e,t,n,r,o){var i=-1,a=e.length;for(n||(n=$i),o||(o=[]);++i<a;){var l=e[i];t>0&&n(l)?t>1?zr(l,t-1,n,r,o):en(o,l):r||(o[o.length]=l)}return o}var $r=ui(),Vr=ui(!0);function Qr(e,t){return e&&$r(e,t,ou)}function Kr(e,t){return e&&Vr(e,t,ou)}function Yr(e,t){return Xt(t,function(t){return Tl(e[t])})}function Xr(e,t){for(var n=0,r=(t=Qo(t,e)).length;null!=e&&n<r;)e=e[ca(t[n++])];return n&&n==r?e:i}function Gr(e,t,n){var r=t(e);return vl(e)?r:en(r,n(e))}function Jr(e){return null==e?e===i?ie:J:on&&on in tt(e)?function(e){var t=ct.call(e,on),n=e[on];try{e[on]=i;var r=!0}catch(e){}var o=dt.call(e);return r&&(t?e[on]=n:delete e[on]),o}(e):function(e){return dt.call(e)}(e)}function Zr(e,t){return e>t}function eo(e,t){return null!=e&&ct.call(e,t)}function to(e,t){return null!=e&&t in tt(e)}function no(e,t,n){for(var o=n?Jt:Gt,a=e[0].length,l=e.length,u=l,s=r(l),c=1/0,f=[];u--;){var p=e[u];u&&t&&(p=Zt(p,vn(t))),c=Vn(p.length,c),s[u]=!n&&(t||a>=120&&p.length>=120)?new wr(u&&p):i}p=e[0];var d=-1,h=s[0];e:for(;++d<a&&f.length<c;){var m=p[d],g=t?t(m):m;if(m=n||0!==m?m:0,!(h?bn(h,g):o(f,g,n))){for(u=l;--u;){var v=s[u];if(!(v?bn(v,g):o(e[u],g,n)))continue e}h&&h.push(g),f.push(m)}}return f}function ro(e,t,n){var r=null==(e=ta(e,t=Qo(t,e)))?e:e[ca(Ea(t))];return null==r?i:$t(r,e,n)}function oo(e){return Ol(e)&&Jr(e)==U}function io(e,t,n,r,o){return e===t||(null==e||null==t||!Ol(e)&&!Ol(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var l=vl(e),u=vl(t),s=l?W:Wi(e),c=u?W:Wi(t),f=(s=s==U?Z:s)==Z,p=(c=c==U?Z:c)==Z,d=s==c;if(d&&wl(e)){if(!wl(t))return!1;l=!0,f=!1}if(d&&!f)return a||(a=new xr),l||Rl(e)?Pi(e,t,n,r,o,a):function(e,t,n,r,o,i,a){switch(n){case se:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ue:return!(e.byteLength!=t.byteLength||!i(new xt(e),new xt(t)));case z:case $:case G:return dl(+e,+t);case Q:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case X:var l=Cn;case ne:var u=r&m;if(l||(l=Pn),e.size!=t.size&&!u)return!1;var s=a.get(e);if(s)return s==t;r|=g,a.set(e,t);var c=Pi(l(e),l(t),r,o,i,a);return a.delete(e),c;case oe:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,s,n,r,o,a);if(!(n&m)){var h=f&&ct.call(e,"__wrapped__"),v=p&&ct.call(t,"__wrapped__");if(h||v){var y=h?e.value():e,b=v?t.value():t;return a||(a=new xr),o(y,b,n,r,a)}}return!!d&&(a||(a=new xr),function(e,t,n,r,o,a){var l=n&m,u=ji(e),s=u.length,c=ji(t).length;if(s!=c&&!l)return!1;for(var f=s;f--;){var p=u[f];if(!(l?p in t:ct.call(t,p)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var g=l;++f<s;){p=u[f];var v=e[p],y=t[p];if(r)var b=l?r(y,v,p,t,e,a):r(v,y,p,e,t,a);if(!(b===i?v===y||o(v,y,n,r,a):b)){h=!1;break}g||(g="constructor"==p)}if(h&&!g){var _=e.constructor,w=t.constructor;_!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,o,a))}(e,t,n,r,io,o))}function ao(e,t,n,r){var o=n.length,a=o,l=!r;if(null==e)return!a;for(e=tt(e);o--;){var u=n[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var s=(u=n[o])[0],c=e[s],f=u[1];if(l&&u[2]){if(c===i&&!(s in e))return!1}else{var p=new xr;if(r)var d=r(c,f,s,e,t,p);if(!(d===i?io(f,c,m|g,r,p):d))return!1}}return!0}function lo(e){return!(!kl(e)||(t=e,pt&&pt in t))&&(Tl(e)?gt:Ve).test(fa(e));var t}function uo(e){return"function"==typeof e?e:null==e?Nu:"object"==typeof e?vl(e)?mo(e[0],e[1]):ho(e):Fu(e)}function so(e){if(!Gi(e))return zn(e);var t=[];for(var n in tt(e))ct.call(e,n)&&"constructor"!=n&&t.push(n);return t}function co(e){if(!kl(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Gi(e),n=[];for(var r in e)("constructor"!=r||!t&&ct.call(e,r))&&n.push(r);return n}function fo(e,t){return e<t}function po(e,t){var n=-1,o=bl(e)?r(e.length):[];return Fr(e,function(e,r,i){o[++n]=t(e,r,i)}),o}function ho(e){var t=qi(e);return 1==t.length&&t[0][2]?Zi(t[0][0],t[0][1]):function(n){return n===e||ao(n,e,t)}}function mo(e,t){return Ki(e)&&Ji(t)?Zi(ca(e),t):function(n){var r=Zl(n,e);return r===i&&r===t?eu(n,e):io(t,r,m|g)}}function go(e,t,n,r,o){e!==t&&$r(t,function(a,l){if(kl(a))o||(o=new xr),function(e,t,n,r,o,a,l){var u=na(e,n),s=na(t,n),c=l.get(s);if(c)kr(e,n,c);else{var f=a?a(u,s,n+"",e,t,l):i,p=f===i;if(p){var d=vl(s),h=!d&&wl(s),m=!d&&!h&&Rl(s);f=s,d||h||m?vl(u)?f=u:_l(u)?f=ri(u):h?(p=!1,f=Go(s,!0)):m?(p=!1,f=Zo(s,!0)):f=[]:jl(s)||gl(s)?(f=u,gl(u)?f=zl(u):kl(u)&&!Tl(u)||(f=zi(s))):p=!1}p&&(l.set(s,f),o(f,s,r,a,l),l.delete(s)),kr(e,n,f)}}(e,t,l,n,go,r,o);else{var u=r?r(na(e,l),a,l+"",e,t,o):i;u===i&&(u=a),kr(e,l,u)}},iu)}function vo(e,t){var n=e.length;if(n)return Vi(t+=t<0?n:0,n)?e[t]:i}function yo(e,t,n){var r=-1;return t=Zt(t.length?t:[Nu],vn(Ri())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(po(e,function(e,n,o){return{criteria:Zt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){for(var r=-1,o=e.criteria,i=t.criteria,a=o.length,l=n.length;++r<a;){var u=ei(o[r],i[r]);if(u){if(r>=l)return u;var s=n[r];return u*("desc"==s?-1:1)}}return e.index-t.index}(e,t,n)})}function bo(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],l=Xr(e,a);n(l,a)&&ko(i,Qo(a,e),l)}return i}function _o(e,t,n,r){var o=r?sn:un,i=-1,a=t.length,l=e;for(e===t&&(t=ri(t)),n&&(l=Zt(e,vn(n)));++i<a;)for(var u=0,s=t[i],c=n?n(s):s;(u=o(l,c,u,r))>-1;)l!==e&&It.call(l,u,1),It.call(e,u,1);return e}function wo(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;Vi(o)?It.call(e,o,1):Fo(e,o)}}return e}function xo(e,t){return e+Fn(Yn()*(t-e+1))}function Eo(e,t){var n="";if(!e||t<1||t>L)return n;do{t%2&&(n+=e),(t=Fn(t/2))&&(e+=e)}while(t);return n}function To(e,t){return ia(ea(e,t,Nu),e+"")}function So(e){return Tr(du(e))}function Co(e,t){var n=du(e);return ua(n,Lr(t,0,n.length))}function ko(e,t,n,r){if(!kl(e))return e;for(var o=-1,a=(t=Qo(t,e)).length,l=a-1,u=e;null!=u&&++o<a;){var s=ca(t[o]),c=n;if(o!=l){var f=u[s];(c=r?r(f,s,u):i)===i&&(c=kl(f)?f:Vi(t[o+1])?[]:{})}Or(u,s,c),u=u[s]}return e}var Oo=rr?function(e,t){return rr.set(e,t),e}:Nu,Po=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:ku(t),writable:!0})}:Nu;function No(e){return ua(du(e))}function jo(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=e[o+t];return a}function Ao(e,t){var n;return Fr(e,function(e,r,o){return!(n=t(e,r,o))}),!!n}function Do(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=F){for(;r<o;){var i=r+o>>>1,a=e[i];null!==a&&!Il(a)&&(n?a<=t:a<t)?r=i+1:o=i}return o}return Lo(e,t,Nu,n)}function Lo(e,t,n,r){t=n(t);for(var o=0,a=null==e?0:e.length,l=t!=t,u=null===t,s=Il(t),c=t===i;o<a;){var f=Fn((o+a)/2),p=n(e[f]),d=p!==i,h=null===p,m=p==p,g=Il(p);if(l)var v=r||m;else v=c?m&&(r||d):u?m&&d&&(r||!h):s?m&&d&&!h&&(r||!g):!h&&!g&&(r?p<=t:p<t);v?o=f+1:a=f}return Vn(a,q)}function Io(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n],l=t?t(a):a;if(!n||!dl(l,u)){var u=l;i[o++]=0===a?0:a}}return i}function Ro(e){return"number"==typeof e?e:Il(e)?R:+e}function Mo(e){if("string"==typeof e)return e;if(vl(e))return Zt(e,Mo)+"";if(Il(e))return pr?pr.call(e):"";var t=e+"";return"0"==t&&1/e==-D?"-0":t}function qo(e,t,n){var r=-1,o=Gt,i=e.length,l=!0,u=[],s=u;if(n)l=!1,o=Jt;else if(i>=a){var c=t?null:Ei(e);if(c)return Pn(c);l=!1,o=bn,s=new wr}else s=t?[]:u;e:for(;++r<i;){var f=e[r],p=t?t(f):f;if(f=n||0!==f?f:0,l&&p==p){for(var d=s.length;d--;)if(s[d]===p)continue e;t&&s.push(p),u.push(f)}else o(s,p,n)||(s!==u&&s.push(p),u.push(f))}return u}function Fo(e,t){return null==(e=ta(e,t=Qo(t,e)))||delete e[ca(Ea(t))]}function Ho(e,t,n,r){return ko(e,t,n(Xr(e,t)),r)}function Uo(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?jo(e,r?0:i,r?i+1:o):jo(e,r?i+1:0,r?o:i)}function Wo(e,t){var n=e;return n instanceof vr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Bo(e,t,n){var o=e.length;if(o<2)return o?qo(e[0]):[];for(var i=-1,a=r(o);++i<o;)for(var l=e[i],u=-1;++u<o;)u!=i&&(a[i]=qr(a[i]||l,e[u],t,n));return qo(zr(a,1),t,n)}function zo(e,t,n){for(var r=-1,o=e.length,a=t.length,l={};++r<o;){var u=r<a?t[r]:i;n(l,e[r],u)}return l}function $o(e){return _l(e)?e:[]}function Vo(e){return"function"==typeof e?e:Nu}function Qo(e,t){return vl(e)?e:Ki(e,t)?[e]:sa($l(e))}var Ko=To;function Yo(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:jo(e,t,n)}var Xo=In||function(e){return Dt.clearTimeout(e)};function Go(e,t){if(t)return e.slice();var n=e.length,r=Ot?Ot(n):new e.constructor(n);return e.copy(r),r}function Jo(e){var t=new e.constructor(e.byteLength);return new xt(t).set(new xt(e)),t}function Zo(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ei(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=Il(e),l=t!==i,u=null===t,s=t==t,c=Il(t);if(!u&&!c&&!a&&e>t||a&&l&&s&&!u&&!c||r&&l&&s||!n&&s||!o)return 1;if(!r&&!a&&!c&&e<t||c&&n&&o&&!r&&!a||u&&n&&o||!l&&o||!s)return-1}return 0}function ti(e,t,n,o){for(var i=-1,a=e.length,l=n.length,u=-1,s=t.length,c=$n(a-l,0),f=r(s+c),p=!o;++u<s;)f[u]=t[u];for(;++i<l;)(p||i<a)&&(f[n[i]]=e[i]);for(;c--;)f[u++]=e[i++];return f}function ni(e,t,n,o){for(var i=-1,a=e.length,l=-1,u=n.length,s=-1,c=t.length,f=$n(a-u,0),p=r(f+c),d=!o;++i<f;)p[i]=e[i];for(var h=i;++s<c;)p[h+s]=t[s];for(;++l<u;)(d||i<a)&&(p[h+n[l]]=e[i++]);return p}function ri(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function oi(e,t,n,r){var o=!n;n||(n={});for(var a=-1,l=t.length;++a<l;){var u=t[a],s=r?r(n[u],e[u],u,n,e):i;s===i&&(s=e[u]),o?Ar(n,u,s):Or(n,u,s)}return n}function ii(e,t){return function(n,r){var o=vl(n)?Vt:Nr,i=t?t():{};return o(n,e,Ri(r,2),i)}}function ai(e){return To(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,l=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,l&&Qi(n[0],n[1],l)&&(a=o<3?i:a,o=1),t=tt(t);++r<o;){var u=n[r];u&&e(t,u,r,a)}return t})}function li(e,t){return function(n,r){if(null==n)return n;if(!bl(n))return e(n,r);for(var o=n.length,i=t?o:-1,a=tt(n);(t?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function ui(e){return function(t,n,r){for(var o=-1,i=tt(t),a=r(t),l=a.length;l--;){var u=a[e?l:++o];if(!1===n(i[u],u,i))break}return t}}function si(e){return function(t){var n=Sn(t=$l(t))?An(t):i,r=n?n[0]:t.charAt(0),o=n?Yo(n,1).join(""):t.slice(1);return r[e]()+o}}function ci(e){return function(t){return tn(Tu(gu(t).replace(yt,"")),e,"")}}function fi(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hr(e.prototype),r=e.apply(n,t);return kl(r)?r:n}}function pi(e){return function(t,n,r){var o=tt(t);if(!bl(t)){var a=Ri(n,3);t=ou(t),n=function(e){return a(o[e],e,o)}}var l=e(t,n,r);return l>-1?o[a?t[l]:l]:i}}function di(e){return Ni(function(t){var n=t.length,r=n,o=gr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new ot(u);if(o&&!l&&"wrapper"==Li(a))var l=new gr([],!0)}for(r=l?r:n;++r<n;){var s=Li(a=t[r]),c="wrapper"==s?Di(a):i;l=c&&Yi(c[0])&&c[1]==(T|_|x|S)&&!c[4].length&&1==c[9]?l[Li(c[0])].apply(l,c[3]):1==a.length&&Yi(a)?l[s]():l.thru(a)}return function(){var e=arguments,r=e[0];if(l&&1==e.length&&vl(r))return l.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}})}function hi(e,t,n,o,a,l,u,s,c,f){var p=t&T,d=t&v,h=t&y,m=t&(_|w),g=t&C,b=h?i:fi(e);return function v(){for(var y=arguments.length,_=r(y),w=y;w--;)_[w]=arguments[w];if(m)var x=Ii(v),E=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(_,x);if(o&&(_=ti(_,o,a,m)),l&&(_=ni(_,l,u,m)),y-=E,m&&y<f){var T=On(_,x);return wi(e,t,hi,v.placeholder,n,_,T,s,c,f-y)}var S=d?n:this,C=h?S[e]:e;return y=_.length,s?_=function(e,t){for(var n=e.length,r=Vn(t.length,n),o=ri(e);r--;){var a=t[r];e[r]=Vi(a,n)?o[a]:i}return e}(_,s):g&&y>1&&_.reverse(),p&&c<y&&(_.length=c),this&&this!==Dt&&this instanceof v&&(C=b||fi(C)),C.apply(S,_)}}function mi(e,t){return function(n,r){return function(e,t,n,r){return Qr(e,function(e,o,i){t(r,n(e),o,i)}),r}(n,e,t(r),{})}}function gi(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Mo(n),r=Mo(r)):(n=Ro(n),r=Ro(r)),o=e(n,r)}return o}}function vi(e){return Ni(function(t){return t=Zt(t,vn(Ri())),To(function(n){var r=this;return e(t,function(e){return $t(e,r,n)})})})}function yi(e,t){var n=(t=t===i?" ":Mo(t)).length;if(n<2)return n?Eo(t,e):t;var r=Eo(t,qn(e/jn(t)));return Sn(t)?Yo(An(r),0,e).join(""):r.slice(0,e)}function bi(e){return function(t,n,o){return o&&"number"!=typeof o&&Qi(t,n,o)&&(n=o=i),t=Hl(t),n===i?(n=t,t=0):n=Hl(n),function(e,t,n,o){for(var i=-1,a=$n(qn((t-e)/(n||1)),0),l=r(a);a--;)l[o?a:++i]=e,e+=n;return l}(t,n,o=o===i?t<n?1:-1:Hl(o),e)}}function _i(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Bl(t),n=Bl(n)),e(t,n)}}function wi(e,t,n,r,o,a,l,u,s,c){var f=t&_;t|=f?x:E,(t&=~(f?E:x))&b||(t&=~(v|y));var p=[e,t,o,f?a:i,f?l:i,f?i:a,f?i:l,u,s,c],d=n.apply(i,p);return Yi(e)&&ra(d,p),d.placeholder=r,aa(d,e,t)}function xi(e){var t=et[e];return function(e,n){if(e=Bl(e),n=null==n?0:Vn(Ul(n),292)){var r=($l(e)+"e").split("e");return+((r=($l(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Ei=er&&1/Pn(new er([,-0]))[1]==D?function(e){return new er(e)}:Iu;function Ti(e){return function(t){var n=Wi(t);return n==X?Cn(t):n==ne?Nn(t):function(e,t){return Zt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Si(e,t,n,o,a,l,s,c){var p=t&y;if(!p&&"function"!=typeof e)throw new ot(u);var d=o?o.length:0;if(d||(t&=~(x|E),o=a=i),s=s===i?s:$n(Ul(s),0),c=c===i?c:Ul(c),d-=a?a.length:0,t&E){var h=o,m=a;o=a=i}var g=p?i:Di(e),C=[e,t,n,o,a,h,m,l,s,c];if(g&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<(v|y|T),a=r==T&&n==_||r==T&&n==S&&e[7].length<=t[8]||r==(T|S)&&t[7].length<=t[8]&&n==_;if(!i&&!a)return e;r&v&&(e[2]=t[2],o|=n&v?0:b);var l=t[3];if(l){var u=e[3];e[3]=u?ti(u,l,t[4]):l,e[4]=u?On(e[3],f):t[4]}(l=t[5])&&(u=e[5],e[5]=u?ni(u,l,t[6]):l,e[6]=u?On(e[5],f):t[6]),(l=t[7])&&(e[7]=l),r&T&&(e[8]=null==e[8]?t[8]:Vn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o}(C,g),e=C[0],t=C[1],n=C[2],o=C[3],a=C[4],!(c=C[9]=C[9]===i?p?0:e.length:$n(C[9]-d,0))&&t&(_|w)&&(t&=~(_|w)),t&&t!=v)k=t==_||t==w?function(e,t,n){var o=fi(e);return function a(){for(var l=arguments.length,u=r(l),s=l,c=Ii(a);s--;)u[s]=arguments[s];var f=l<3&&u[0]!==c&&u[l-1]!==c?[]:On(u,c);return(l-=f.length)<n?wi(e,t,hi,a.placeholder,i,u,f,i,i,n-l):$t(this&&this!==Dt&&this instanceof a?o:e,this,u)}}(e,t,c):t!=x&&t!=(v|x)||a.length?hi.apply(i,C):function(e,t,n,o){var i=t&v,a=fi(e);return function t(){for(var l=-1,u=arguments.length,s=-1,c=o.length,f=r(c+u),p=this&&this!==Dt&&this instanceof t?a:e;++s<c;)f[s]=o[s];for(;u--;)f[s++]=arguments[++l];return $t(p,i?n:this,f)}}(e,t,n,o);else var k=function(e,t,n){var r=t&v,o=fi(e);return function t(){return(this&&this!==Dt&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return aa((g?Oo:ra)(k,C),e,t)}function Ci(e,t,n,r){return e===i||dl(e,lt[n])&&!ct.call(r,n)?t:e}function ki(e,t,n,r,o,a){return kl(e)&&kl(t)&&(a.set(t,e),go(e,t,i,ki,a),a.delete(t)),e}function Oi(e){return jl(e)?i:e}function Pi(e,t,n,r,o,a){var l=n&m,u=e.length,s=t.length;if(u!=s&&!(l&&s>u))return!1;var c=a.get(e);if(c&&a.get(t))return c==t;var f=-1,p=!0,d=n&g?new wr:i;for(a.set(e,t),a.set(t,e);++f<u;){var h=e[f],v=t[f];if(r)var y=l?r(v,h,f,t,e,a):r(h,v,f,e,t,a);if(y!==i){if(y)continue;p=!1;break}if(d){if(!rn(t,function(e,t){if(!bn(d,t)&&(h===e||o(h,e,n,r,a)))return d.push(t)})){p=!1;break}}else if(h!==v&&!o(h,v,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Ni(e){return ia(ea(e,i,ya),e+"")}function ji(e){return Gr(e,ou,Hi)}function Ai(e){return Gr(e,iu,Ui)}var Di=rr?function(e){return rr.get(e)}:Iu;function Li(e){for(var t=e.name+"",n=or[t],r=ct.call(or,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function Ii(e){return(ct.call(dr,"placeholder")?dr:e).placeholder}function Ri(){var e=dr.iteratee||ju;return e=e===ju?uo:e,arguments.length?e(arguments[0],arguments[1]):e}function Mi(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function qi(e){for(var t=ou(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,Ji(o)]}return t}function Fi(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return lo(n)?n:i}var Hi=Hn?function(e){return null==e?[]:(e=tt(e),Xt(Hn(e),function(t){return Lt.call(e,t)}))}:Wu,Ui=Hn?function(e){for(var t=[];e;)en(t,Hi(e)),e=jt(e);return t}:Wu,Wi=Jr;function Bi(e,t,n){for(var r=-1,o=(t=Qo(t,e)).length,i=!1;++r<o;){var a=ca(t[r]);if(!(i=null!=e&&n(e,a)))break;e=e[a]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&Cl(o)&&Vi(a,o)&&(vl(e)||gl(e))}function zi(e){return"function"!=typeof e.constructor||Gi(e)?{}:hr(jt(e))}function $i(e){return vl(e)||gl(e)||!!(Mt&&e&&e[Mt])}function Vi(e,t){var n=typeof e;return!!(t=null==t?L:t)&&("number"==n||"symbol"!=n&&Ke.test(e))&&e>-1&&e%1==0&&e<t}function Qi(e,t,n){if(!kl(n))return!1;var r=typeof t;return!!("number"==r?bl(n)&&Vi(t,n.length):"string"==r&&t in n)&&dl(n[t],e)}function Ki(e,t){if(vl(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Il(e))||Ne.test(e)||!Pe.test(e)||null!=t&&e in tt(t)}function Yi(e){var t=Li(e),n=dr[t];if("function"!=typeof n||!(t in vr.prototype))return!1;if(e===n)return!0;var r=Di(n);return!!r&&e===r[0]}(Gn&&Wi(new Gn(new ArrayBuffer(1)))!=se||Jn&&Wi(new Jn)!=X||Zn&&"[object Promise]"!=Wi(Zn.resolve())||er&&Wi(new er)!=ne||tr&&Wi(new tr)!=ae)&&(Wi=function(e){var t=Jr(e),n=t==Z?e.constructor:i,r=n?fa(n):"";if(r)switch(r){case ir:return se;case ar:return X;case lr:return"[object Promise]";case ur:return ne;case sr:return ae}return t});var Xi=ut?Tl:Bu;function Gi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||lt)}function Ji(e){return e==e&&!kl(e)}function Zi(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in tt(n))}}function ea(e,t,n){return t=$n(t===i?e.length-1:t,0),function(){for(var o=arguments,i=-1,a=$n(o.length-t,0),l=r(a);++i<a;)l[i]=o[t+i];i=-1;for(var u=r(t+1);++i<t;)u[i]=o[i];return u[t]=n(l),$t(e,this,u)}}function ta(e,t){return t.length<2?e:Xr(e,jo(t,0,-1))}function na(e,t){if("__proto__"!=t)return e[t]}var ra=la(Oo),oa=Mn||function(e,t){return Dt.setTimeout(e,t)},ia=la(Po);function aa(e,t,n){var r=t+"";return ia(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Me,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Qt(H,function(n){var r="_."+n[0];t&n[1]&&!Gt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(qe);return t?t[1].split(Fe):[]}(r),n)))}function la(e){var t=0,n=0;return function(){var r=Qn(),o=N-(r-n);if(n=r,o>0){if(++t>=P)return arguments[0]}else t=0;return e.apply(i,arguments)}}function ua(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=xo(n,o),l=e[a];e[a]=e[n],e[n]=l}return e.length=t,e}var sa=function(e){var t=ll(e,function(e){return n.size===c&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(je,function(e,n,r,o){t.push(r?o.replace(Ue,"$1"):n||e)}),t});function ca(e){if("string"==typeof e||Il(e))return e;var t=e+"";return"0"==t&&1/e==-D?"-0":t}function fa(e){if(null!=e){try{return st.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pa(e){if(e instanceof vr)return e.clone();var t=new gr(e.__wrapped__,e.__chain__);return t.__actions__=ri(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=To(function(e,t){return _l(e)?qr(e,zr(t,1,_l,!0)):[]}),ha=To(function(e,t){var n=Ea(t);return _l(n)&&(n=i),_l(e)?qr(e,zr(t,1,_l,!0),Ri(n,2)):[]}),ma=To(function(e,t){var n=Ea(t);return _l(n)&&(n=i),_l(e)?qr(e,zr(t,1,_l,!0),i,n):[]});function ga(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Ul(n);return o<0&&(o=$n(r+o,0)),ln(e,Ri(t,3),o)}function va(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Ul(n),o=n<0?$n(r+o,0):Vn(o,r-1)),ln(e,Ri(t,3),o,!0)}function ya(e){return null!=e&&e.length?zr(e,1):[]}function ba(e){return e&&e.length?e[0]:i}var _a=To(function(e){var t=Zt(e,$o);return t.length&&t[0]===e[0]?no(t):[]}),wa=To(function(e){var t=Ea(e),n=Zt(e,$o);return t===Ea(n)?t=i:n.pop(),n.length&&n[0]===e[0]?no(n,Ri(t,2)):[]}),xa=To(function(e){var t=Ea(e),n=Zt(e,$o);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?no(n,i,t):[]});function Ea(e){var t=null==e?0:e.length;return t?e[t-1]:i}var Ta=To(Sa);function Sa(e,t){return e&&e.length&&t&&t.length?_o(e,t):e}var Ca=Ni(function(e,t){var n=null==e?0:e.length,r=Dr(e,t);return wo(e,Zt(t,function(e){return Vi(e,n)?+e:e}).sort(ei)),r});function ka(e){return null==e?e:Xn.call(e)}var Oa=To(function(e){return qo(zr(e,1,_l,!0))}),Pa=To(function(e){var t=Ea(e);return _l(t)&&(t=i),qo(zr(e,1,_l,!0),Ri(t,2))}),Na=To(function(e){var t=Ea(e);return t="function"==typeof t?t:i,qo(zr(e,1,_l,!0),i,t)});function ja(e){if(!e||!e.length)return[];var t=0;return e=Xt(e,function(e){if(_l(e))return t=$n(e.length,t),!0}),gn(t,function(t){return Zt(e,pn(t))})}function Aa(e,t){if(!e||!e.length)return[];var n=ja(e);return null==t?n:Zt(n,function(e){return $t(t,i,e)})}var Da=To(function(e,t){return _l(e)?qr(e,t):[]}),La=To(function(e){return Bo(Xt(e,_l))}),Ia=To(function(e){var t=Ea(e);return _l(t)&&(t=i),Bo(Xt(e,_l),Ri(t,2))}),Ra=To(function(e){var t=Ea(e);return t="function"==typeof t?t:i,Bo(Xt(e,_l),i,t)}),Ma=To(ja);var qa=To(function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,Aa(e,n)});function Fa(e){var t=dr(e);return t.__chain__=!0,t}function Ha(e,t){return t(e)}var Ua=Ni(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return Dr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof vr&&Vi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Ha,args:[o],thisArg:i}),new gr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(o)});var Wa=ii(function(e,t,n){ct.call(e,n)?++e[n]:Ar(e,n,1)});var Ba=pi(ga),za=pi(va);function $a(e,t){return(vl(e)?Qt:Fr)(e,Ri(t,3))}function Va(e,t){return(vl(e)?Kt:Hr)(e,Ri(t,3))}var Qa=ii(function(e,t,n){ct.call(e,n)?e[n].push(t):Ar(e,n,[t])});var Ka=To(function(e,t,n){var o=-1,i="function"==typeof t,a=bl(e)?r(e.length):[];return Fr(e,function(e){a[++o]=i?$t(t,e,n):ro(e,t,n)}),a}),Ya=ii(function(e,t,n){Ar(e,n,t)});function Xa(e,t){return(vl(e)?Zt:po)(e,Ri(t,3))}var Ga=ii(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Ja=To(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Qi(e,t[0],t[1])?t=[]:n>2&&Qi(t[0],t[1],t[2])&&(t=[t[0]]),yo(e,zr(t,1),[])}),Za=Rn||function(){return Dt.Date.now()};function el(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Si(e,T,i,i,i,i,t)}function tl(e,t){var n;if("function"!=typeof t)throw new ot(u);return e=Ul(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var nl=To(function(e,t,n){var r=v;if(n.length){var o=On(n,Ii(nl));r|=x}return Si(e,r,t,n,o)}),rl=To(function(e,t,n){var r=v|y;if(n.length){var o=On(n,Ii(rl));r|=x}return Si(t,r,e,n,o)});function ol(e,t,n){var r,o,a,l,s,c,f=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new ot(u);function m(t){var n=r,a=o;return r=o=i,f=t,l=e.apply(a,n)}function g(e){var n=e-c;return c===i||n>=t||n<0||d&&e-f>=a}function v(){var e=Za();if(g(e))return y(e);s=oa(v,function(e){var n=t-(e-c);return d?Vn(n,a-(e-f)):n}(e))}function y(e){return s=i,h&&r?m(e):(r=o=i,l)}function b(){var e=Za(),n=g(e);if(r=arguments,o=this,c=e,n){if(s===i)return function(e){return f=e,s=oa(v,t),p?m(e):l}(c);if(d)return s=oa(v,t),m(c)}return s===i&&(s=oa(v,t)),l}return t=Bl(t)||0,kl(n)&&(p=!!n.leading,a=(d="maxWait"in n)?$n(Bl(n.maxWait)||0,t):a,h="trailing"in n?!!n.trailing:h),b.cancel=function(){s!==i&&Xo(s),f=0,r=c=o=s=i},b.flush=function(){return s===i?l:y(Za())},b}var il=To(function(e,t){return Mr(e,1,t)}),al=To(function(e,t,n){return Mr(e,Bl(t)||0,n)});function ll(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ot(u);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(ll.Cache||_r),n}function ul(e){if("function"!=typeof e)throw new ot(u);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}ll.Cache=_r;var sl=Ko(function(e,t){var n=(t=1==t.length&&vl(t[0])?Zt(t[0],vn(Ri())):Zt(zr(t,1),vn(Ri()))).length;return To(function(r){for(var o=-1,i=Vn(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return $t(e,this,r)})}),cl=To(function(e,t){var n=On(t,Ii(cl));return Si(e,x,i,t,n)}),fl=To(function(e,t){var n=On(t,Ii(fl));return Si(e,E,i,t,n)}),pl=Ni(function(e,t){return Si(e,S,i,i,i,t)});function dl(e,t){return e===t||e!=e&&t!=t}var hl=_i(Zr),ml=_i(function(e,t){return e>=t}),gl=oo(function(){return arguments}())?oo:function(e){return Ol(e)&&ct.call(e,"callee")&&!Lt.call(e,"callee")},vl=r.isArray,yl=Ft?vn(Ft):function(e){return Ol(e)&&Jr(e)==ue};function bl(e){return null!=e&&Cl(e.length)&&!Tl(e)}function _l(e){return Ol(e)&&bl(e)}var wl=Un||Bu,xl=Ht?vn(Ht):function(e){return Ol(e)&&Jr(e)==$};function El(e){if(!Ol(e))return!1;var t=Jr(e);return t==Q||t==V||"string"==typeof e.message&&"string"==typeof e.name&&!jl(e)}function Tl(e){if(!kl(e))return!1;var t=Jr(e);return t==K||t==Y||t==B||t==ee}function Sl(e){return"number"==typeof e&&e==Ul(e)}function Cl(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=L}function kl(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ol(e){return null!=e&&"object"==typeof e}var Pl=Ut?vn(Ut):function(e){return Ol(e)&&Wi(e)==X};function Nl(e){return"number"==typeof e||Ol(e)&&Jr(e)==G}function jl(e){if(!Ol(e)||Jr(e)!=Z)return!1;var t=jt(e);if(null===t)return!0;var n=ct.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&st.call(n)==ht}var Al=Wt?vn(Wt):function(e){return Ol(e)&&Jr(e)==te};var Dl=Bt?vn(Bt):function(e){return Ol(e)&&Wi(e)==ne};function Ll(e){return"string"==typeof e||!vl(e)&&Ol(e)&&Jr(e)==re}function Il(e){return"symbol"==typeof e||Ol(e)&&Jr(e)==oe}var Rl=zt?vn(zt):function(e){return Ol(e)&&Cl(e.length)&&!!Ct[Jr(e)]};var Ml=_i(fo),ql=_i(function(e,t){return e<=t});function Fl(e){if(!e)return[];if(bl(e))return Ll(e)?An(e):ri(e);if(qt&&e[qt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[qt]());var t=Wi(e);return(t==X?Cn:t==ne?Pn:du)(e)}function Hl(e){return e?(e=Bl(e))===D||e===-D?(e<0?-1:1)*I:e==e?e:0:0===e?e:0}function Ul(e){var t=Hl(e),n=t%1;return t==t?n?t-n:t:0}function Wl(e){return e?Lr(Ul(e),0,M):0}function Bl(e){if("number"==typeof e)return e;if(Il(e))return R;if(kl(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=kl(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Le,"");var n=$e.test(e);return n||Qe.test(e)?Nt(e.slice(2),n?2:8):ze.test(e)?R:+e}function zl(e){return oi(e,iu(e))}function $l(e){return null==e?"":Mo(e)}var Vl=ai(function(e,t){if(Gi(t)||bl(t))oi(t,ou(t),e);else for(var n in t)ct.call(t,n)&&Or(e,n,t[n])}),Ql=ai(function(e,t){oi(t,iu(t),e)}),Kl=ai(function(e,t,n,r){oi(t,iu(t),e,r)}),Yl=ai(function(e,t,n,r){oi(t,ou(t),e,r)}),Xl=Ni(Dr);var Gl=To(function(e,t){e=tt(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&Qi(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],l=iu(a),u=-1,s=l.length;++u<s;){var c=l[u],f=e[c];(f===i||dl(f,lt[c])&&!ct.call(e,c))&&(e[c]=a[c])}return e}),Jl=To(function(e){return e.push(i,ki),$t(lu,i,e)});function Zl(e,t,n){var r=null==e?i:Xr(e,t);return r===i?n:r}function eu(e,t){return null!=e&&Bi(e,t,to)}var tu=mi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},ku(Nu)),nu=mi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),ct.call(e,t)?e[t].push(n):e[t]=[n]},Ri),ru=To(ro);function ou(e){return bl(e)?Er(e):so(e)}function iu(e){return bl(e)?Er(e,!0):co(e)}var au=ai(function(e,t,n){go(e,t,n)}),lu=ai(function(e,t,n,r){go(e,t,n,r)}),uu=Ni(function(e,t){var n={};if(null==e)return n;var r=!1;t=Zt(t,function(t){return t=Qo(t,e),r||(r=t.length>1),t}),oi(e,Ai(e),n),r&&(n=Ir(n,p|d|h,Oi));for(var o=t.length;o--;)Fo(n,t[o]);return n});var su=Ni(function(e,t){return null==e?{}:function(e,t){return bo(e,t,function(t,n){return eu(e,n)})}(e,t)});function cu(e,t){if(null==e)return{};var n=Zt(Ai(e),function(e){return[e]});return t=Ri(t),bo(e,n,function(e,n){return t(e,n[0])})}var fu=Ti(ou),pu=Ti(iu);function du(e){return null==e?[]:yn(e,ou(e))}var hu=ci(function(e,t,n){return t=t.toLowerCase(),e+(n?mu(t):t)});function mu(e){return Eu($l(e).toLowerCase())}function gu(e){return(e=$l(e))&&e.replace(Ye,xn).replace(bt,"")}var vu=ci(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yu=ci(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),bu=si("toLowerCase");var _u=ci(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wu=ci(function(e,t,n){return e+(n?" ":"")+Eu(t)});var xu=ci(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Eu=si("toUpperCase");function Tu(e,t,n){return e=$l(e),(t=n?i:t)===i?function(e){return Et.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(He)||[]}(e):e.match(t)||[]}var Su=To(function(e,t){try{return $t(e,i,t)}catch(e){return El(e)?e:new Je(e)}}),Cu=Ni(function(e,t){return Qt(t,function(t){t=ca(t),Ar(e,t,nl(e[t],e))}),e});function ku(e){return function(){return e}}var Ou=di(),Pu=di(!0);function Nu(e){return e}function ju(e){return uo("function"==typeof e?e:Ir(e,p))}var Au=To(function(e,t){return function(n){return ro(n,e,t)}}),Du=To(function(e,t){return function(n){return ro(e,n,t)}});function Lu(e,t,n){var r=ou(t),o=Yr(t,r);null!=n||kl(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=Yr(t,ou(t)));var i=!(kl(n)&&"chain"in n&&!n.chain),a=Tl(e);return Qt(o,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),o=n.__actions__=ri(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Iu(){}var Ru=vi(Zt),Mu=vi(Yt),qu=vi(rn);function Fu(e){return Ki(e)?pn(ca(e)):function(e){return function(t){return Xr(t,e)}}(e)}var Hu=bi(),Uu=bi(!0);function Wu(){return[]}function Bu(){return!1}var zu=gi(function(e,t){return e+t},0),$u=xi("ceil"),Vu=gi(function(e,t){return e/t},1),Qu=xi("floor");var Ku,Yu=gi(function(e,t){return e*t},1),Xu=xi("round"),Gu=gi(function(e,t){return e-t},0);return dr.after=function(e,t){if("function"!=typeof t)throw new ot(u);return e=Ul(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=el,dr.assign=Vl,dr.assignIn=Ql,dr.assignInWith=Kl,dr.assignWith=Yl,dr.at=Xl,dr.before=tl,dr.bind=nl,dr.bindAll=Cu,dr.bindKey=rl,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return vl(e)?e:[e]},dr.chain=Fa,dr.chunk=function(e,t,n){t=(n?Qi(e,t,n):t===i)?1:$n(Ul(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,l=0,u=r(qn(o/t));a<o;)u[l++]=jo(e,a,a+=t);return u},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return en(vl(n)?ri(n):[n],zr(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Ri();return e=t?Zt(e,function(e){if("function"!=typeof e[1])throw new ot(u);return[n(e[0]),e[1]]}):[],To(function(n){for(var r=-1;++r<t;){var o=e[r];if($t(o[0],this,n))return $t(o[1],this,n)}})},dr.conforms=function(e){return function(e){var t=ou(e);return function(n){return Rr(n,e,t)}}(Ir(e,p))},dr.constant=ku,dr.countBy=Wa,dr.create=function(e,t){var n=hr(e);return null==t?n:jr(n,t)},dr.curry=function e(t,n,r){var o=Si(t,_,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},dr.curryRight=function e(t,n,r){var o=Si(t,w,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},dr.debounce=ol,dr.defaults=Gl,dr.defaultsDeep=Jl,dr.defer=il,dr.delay=al,dr.difference=da,dr.differenceBy=ha,dr.differenceWith=ma,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=n||t===i?1:Ul(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,0,(t=r-(t=n||t===i?1:Ul(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?Uo(e,Ri(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?Uo(e,Ri(t,3),!0):[]},dr.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Qi(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Ul(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Ul(r))<0&&(r+=o),r=n>r?0:Wl(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(vl(e)?Xt:Br)(e,Ri(t,3))},dr.flatMap=function(e,t){return zr(Xa(e,t),1)},dr.flatMapDeep=function(e,t){return zr(Xa(e,t),D)},dr.flatMapDepth=function(e,t,n){return n=n===i?1:Ul(n),zr(Xa(e,t),n)},dr.flatten=ya,dr.flattenDeep=function(e){return null!=e&&e.length?zr(e,D):[]},dr.flattenDepth=function(e,t){return null!=e&&e.length?zr(e,t=t===i?1:Ul(t)):[]},dr.flip=function(e){return Si(e,C)},dr.flow=Ou,dr.flowRight=Pu,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},dr.functions=function(e){return null==e?[]:Yr(e,ou(e))},dr.functionsIn=function(e){return null==e?[]:Yr(e,iu(e))},dr.groupBy=Qa,dr.initial=function(e){return null!=e&&e.length?jo(e,0,-1):[]},dr.intersection=_a,dr.intersectionBy=wa,dr.intersectionWith=xa,dr.invert=tu,dr.invertBy=nu,dr.invokeMap=Ka,dr.iteratee=ju,dr.keyBy=Ya,dr.keys=ou,dr.keysIn=iu,dr.map=Xa,dr.mapKeys=function(e,t){var n={};return t=Ri(t,3),Qr(e,function(e,r,o){Ar(n,t(e,r,o),e)}),n},dr.mapValues=function(e,t){var n={};return t=Ri(t,3),Qr(e,function(e,r,o){Ar(n,r,t(e,r,o))}),n},dr.matches=function(e){return ho(Ir(e,p))},dr.matchesProperty=function(e,t){return mo(e,Ir(t,p))},dr.memoize=ll,dr.merge=au,dr.mergeWith=lu,dr.method=Au,dr.methodOf=Du,dr.mixin=Lu,dr.negate=ul,dr.nthArg=function(e){return e=Ul(e),To(function(t){return vo(t,e)})},dr.omit=uu,dr.omitBy=function(e,t){return cu(e,ul(Ri(t)))},dr.once=function(e){return tl(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(vl(t)||(t=null==t?[]:[t]),vl(n=r?i:n)||(n=null==n?[]:[n]),yo(e,t,n))},dr.over=Ru,dr.overArgs=sl,dr.overEvery=Mu,dr.overSome=qu,dr.partial=cl,dr.partialRight=fl,dr.partition=Ga,dr.pick=su,dr.pickBy=cu,dr.property=Fu,dr.propertyOf=function(e){return function(t){return null==e?i:Xr(e,t)}},dr.pull=Ta,dr.pullAll=Sa,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?_o(e,t,Ri(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?_o(e,t,i,n):e},dr.pullAt=Ca,dr.range=Hu,dr.rangeRight=Uu,dr.rearg=pl,dr.reject=function(e,t){return(vl(e)?Xt:Br)(e,ul(Ri(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=Ri(t,3);++r<i;){var a=e[r];t(a,r,e)&&(n.push(a),o.push(r))}return wo(e,o),n},dr.rest=function(e,t){if("function"!=typeof e)throw new ot(u);return To(e,t=t===i?t:Ul(t))},dr.reverse=ka,dr.sampleSize=function(e,t,n){return t=(n?Qi(e,t,n):t===i)?1:Ul(t),(vl(e)?Sr:Co)(e,t)},dr.set=function(e,t,n){return null==e?e:ko(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:ko(e,t,n,r)},dr.shuffle=function(e){return(vl(e)?Cr:No)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Qi(e,t,n)?(t=0,n=r):(t=null==t?0:Ul(t),n=n===i?r:Ul(n)),jo(e,t,n)):[]},dr.sortBy=Ja,dr.sortedUniq=function(e){return e&&e.length?Io(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?Io(e,Ri(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Qi(e,t,n)&&(t=n=i),(n=n===i?M:n>>>0)?(e=$l(e))&&("string"==typeof t||null!=t&&!Al(t))&&!(t=Mo(t))&&Sn(e)?Yo(An(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new ot(u);return t=null==t?0:$n(Ul(t),0),To(function(n){var r=n[t],o=Yo(n,0,t);return r&&en(o,r),$t(e,this,o)})},dr.tail=function(e){var t=null==e?0:e.length;return t?jo(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?jo(e,0,(t=n||t===i?1:Ul(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=r-(t=n||t===i?1:Ul(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?Uo(e,Ri(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?Uo(e,Ri(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ot(u);return kl(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ol(e,t,{leading:r,maxWait:t,trailing:o})},dr.thru=Ha,dr.toArray=Fl,dr.toPairs=fu,dr.toPairsIn=pu,dr.toPath=function(e){return vl(e)?Zt(e,ca):Il(e)?[e]:ri(sa($l(e)))},dr.toPlainObject=zl,dr.transform=function(e,t,n){var r=vl(e),o=r||wl(e)||Rl(e);if(t=Ri(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:kl(e)&&Tl(i)?hr(jt(e)):{}}return(o?Qt:Qr)(e,function(e,r,o){return t(n,e,r,o)}),n},dr.unary=function(e){return el(e,1)},dr.union=Oa,dr.unionBy=Pa,dr.unionWith=Na,dr.uniq=function(e){return e&&e.length?qo(e):[]},dr.uniqBy=function(e,t){return e&&e.length?qo(e,Ri(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?qo(e,i,t):[]},dr.unset=function(e,t){return null==e||Fo(e,t)},dr.unzip=ja,dr.unzipWith=Aa,dr.update=function(e,t,n){return null==e?e:Ho(e,t,Vo(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Ho(e,t,Vo(n),r)},dr.values=du,dr.valuesIn=function(e){return null==e?[]:yn(e,iu(e))},dr.without=Da,dr.words=Tu,dr.wrap=function(e,t){return cl(Vo(t),e)},dr.xor=La,dr.xorBy=Ia,dr.xorWith=Ra,dr.zip=Ma,dr.zipObject=function(e,t){return zo(e||[],t||[],Or)},dr.zipObjectDeep=function(e,t){return zo(e||[],t||[],ko)},dr.zipWith=qa,dr.entries=fu,dr.entriesIn=pu,dr.extend=Ql,dr.extendWith=Kl,Lu(dr,dr),dr.add=zu,dr.attempt=Su,dr.camelCase=hu,dr.capitalize=mu,dr.ceil=$u,dr.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=Bl(n))==n?n:0),t!==i&&(t=(t=Bl(t))==t?t:0),Lr(Bl(e),t,n)},dr.clone=function(e){return Ir(e,h)},dr.cloneDeep=function(e){return Ir(e,p|h)},dr.cloneDeepWith=function(e,t){return Ir(e,p|h,t="function"==typeof t?t:i)},dr.cloneWith=function(e,t){return Ir(e,h,t="function"==typeof t?t:i)},dr.conformsTo=function(e,t){return null==t||Rr(e,t,ou(t))},dr.deburr=gu,dr.defaultTo=function(e,t){return null==e||e!=e?t:e},dr.divide=Vu,dr.endsWith=function(e,t,n){e=$l(e),t=Mo(t);var r=e.length,o=n=n===i?r:Lr(Ul(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},dr.eq=dl,dr.escape=function(e){return(e=$l(e))&&Se.test(e)?e.replace(Ee,En):e},dr.escapeRegExp=function(e){return(e=$l(e))&&De.test(e)?e.replace(Ae,"\\$&"):e},dr.every=function(e,t,n){var r=vl(e)?Yt:Ur;return n&&Qi(e,t,n)&&(t=i),r(e,Ri(t,3))},dr.find=Ba,dr.findIndex=ga,dr.findKey=function(e,t){return an(e,Ri(t,3),Qr)},dr.findLast=za,dr.findLastIndex=va,dr.findLastKey=function(e,t){return an(e,Ri(t,3),Kr)},dr.floor=Qu,dr.forEach=$a,dr.forEachRight=Va,dr.forIn=function(e,t){return null==e?e:$r(e,Ri(t,3),iu)},dr.forInRight=function(e,t){return null==e?e:Vr(e,Ri(t,3),iu)},dr.forOwn=function(e,t){return e&&Qr(e,Ri(t,3))},dr.forOwnRight=function(e,t){return e&&Kr(e,Ri(t,3))},dr.get=Zl,dr.gt=hl,dr.gte=ml,dr.has=function(e,t){return null!=e&&Bi(e,t,eo)},dr.hasIn=eu,dr.head=ba,dr.identity=Nu,dr.includes=function(e,t,n,r){e=bl(e)?e:du(e),n=n&&!r?Ul(n):0;var o=e.length;return n<0&&(n=$n(o+n,0)),Ll(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&un(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Ul(n);return o<0&&(o=$n(r+o,0)),un(e,t,o)},dr.inRange=function(e,t,n){return t=Hl(t),n===i?(n=t,t=0):n=Hl(n),function(e,t,n){return e>=Vn(t,n)&&e<$n(t,n)}(e=Bl(e),t,n)},dr.invoke=ru,dr.isArguments=gl,dr.isArray=vl,dr.isArrayBuffer=yl,dr.isArrayLike=bl,dr.isArrayLikeObject=_l,dr.isBoolean=function(e){return!0===e||!1===e||Ol(e)&&Jr(e)==z},dr.isBuffer=wl,dr.isDate=xl,dr.isElement=function(e){return Ol(e)&&1===e.nodeType&&!jl(e)},dr.isEmpty=function(e){if(null==e)return!0;if(bl(e)&&(vl(e)||"string"==typeof e||"function"==typeof e.splice||wl(e)||Rl(e)||gl(e)))return!e.length;var t=Wi(e);if(t==X||t==ne)return!e.size;if(Gi(e))return!so(e).length;for(var n in e)if(ct.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return io(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?io(e,t,i,n):!!r},dr.isError=El,dr.isFinite=function(e){return"number"==typeof e&&Wn(e)},dr.isFunction=Tl,dr.isInteger=Sl,dr.isLength=Cl,dr.isMap=Pl,dr.isMatch=function(e,t){return e===t||ao(e,t,qi(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,ao(e,t,qi(t),n)},dr.isNaN=function(e){return Nl(e)&&e!=+e},dr.isNative=function(e){if(Xi(e))throw new Je(l);return lo(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Nl,dr.isObject=kl,dr.isObjectLike=Ol,dr.isPlainObject=jl,dr.isRegExp=Al,dr.isSafeInteger=function(e){return Sl(e)&&e>=-L&&e<=L},dr.isSet=Dl,dr.isString=Ll,dr.isSymbol=Il,dr.isTypedArray=Rl,dr.isUndefined=function(e){return e===i},dr.isWeakMap=function(e){return Ol(e)&&Wi(e)==ae},dr.isWeakSet=function(e){return Ol(e)&&Jr(e)==le},dr.join=function(e,t){return null==e?"":Bn.call(e,t)},dr.kebabCase=vu,dr.last=Ea,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Ul(n))<0?$n(r+o,0):Vn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):ln(e,cn,o,!0)},dr.lowerCase=yu,dr.lowerFirst=bu,dr.lt=Ml,dr.lte=ql,dr.max=function(e){return e&&e.length?Wr(e,Nu,Zr):i},dr.maxBy=function(e,t){return e&&e.length?Wr(e,Ri(t,2),Zr):i},dr.mean=function(e){return fn(e,Nu)},dr.meanBy=function(e,t){return fn(e,Ri(t,2))},dr.min=function(e){return e&&e.length?Wr(e,Nu,fo):i},dr.minBy=function(e,t){return e&&e.length?Wr(e,Ri(t,2),fo):i},dr.stubArray=Wu,dr.stubFalse=Bu,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Yu,dr.nth=function(e,t){return e&&e.length?vo(e,Ul(t)):i},dr.noConflict=function(){return Dt._===this&&(Dt._=mt),this},dr.noop=Iu,dr.now=Za,dr.pad=function(e,t,n){e=$l(e);var r=(t=Ul(t))?jn(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return yi(Fn(o),n)+e+yi(qn(o),n)},dr.padEnd=function(e,t,n){e=$l(e);var r=(t=Ul(t))?jn(e):0;return t&&r<t?e+yi(t-r,n):e},dr.padStart=function(e,t,n){e=$l(e);var r=(t=Ul(t))?jn(e):0;return t&&r<t?yi(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Kn($l(e).replace(Ie,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Qi(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=Hl(e),t===i?(t=e,e=0):t=Hl(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=Yn();return Vn(e+o*(t-e+Pt("1e-"+((o+"").length-1))),t)}return xo(e,t)},dr.reduce=function(e,t,n){var r=vl(e)?tn:hn,o=arguments.length<3;return r(e,Ri(t,4),n,o,Fr)},dr.reduceRight=function(e,t,n){var r=vl(e)?nn:hn,o=arguments.length<3;return r(e,Ri(t,4),n,o,Hr)},dr.repeat=function(e,t,n){return t=(n?Qi(e,t,n):t===i)?1:Ul(t),Eo($l(e),t)},dr.replace=function(){var e=arguments,t=$l(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,o=(t=Qo(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[ca(t[r])];a===i&&(r=o,a=n),e=Tl(a)?a.call(e):a}return e},dr.round=Xu,dr.runInContext=e,dr.sample=function(e){return(vl(e)?Tr:So)(e)},dr.size=function(e){if(null==e)return 0;if(bl(e))return Ll(e)?jn(e):e.length;var t=Wi(e);return t==X||t==ne?e.size:so(e).length},dr.snakeCase=_u,dr.some=function(e,t,n){var r=vl(e)?rn:Ao;return n&&Qi(e,t,n)&&(t=i),r(e,Ri(t,3))},dr.sortedIndex=function(e,t){return Do(e,t)},dr.sortedIndexBy=function(e,t,n){return Lo(e,t,Ri(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Do(e,t);if(r<n&&dl(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return Do(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return Lo(e,t,Ri(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Do(e,t,!0)-1;if(dl(e[n],t))return n}return-1},dr.startCase=wu,dr.startsWith=function(e,t,n){return e=$l(e),n=null==n?0:Lr(Ul(n),0,e.length),t=Mo(t),e.slice(n,n+t.length)==t},dr.subtract=Gu,dr.sum=function(e){return e&&e.length?mn(e,Nu):0},dr.sumBy=function(e,t){return e&&e.length?mn(e,Ri(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Qi(e,t,n)&&(t=i),e=$l(e),t=Kl({},t,r,Ci);var o,a,l=Kl({},t.imports,r.imports,Ci),u=ou(l),s=yn(l,u),c=0,f=t.interpolate||Xe,p="__p += '",d=nt((t.escape||Xe).source+"|"+f.source+"|"+(f===Oe?We:Xe).source+"|"+(t.evaluate||Xe).source+"|$","g"),h="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++St+"]")+"\n";e.replace(d,function(t,n,r,i,l,u){return r||(r=i),p+=e.slice(c,u).replace(Ge,Tn),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),l&&(a=!0,p+="';\n"+l+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+t.length,t}),p+="';\n";var m=t.variable;m||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(be,""):p).replace(_e,"$1").replace(we,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Su(function(){return Ze(u,h+"return "+p).apply(i,s)});if(g.source=p,El(g))throw g;return g},dr.times=function(e,t){if((e=Ul(e))<1||e>L)return[];var n=M,r=Vn(e,M);t=Ri(t),e-=M;for(var o=gn(r,t);++n<e;)t(n);return o},dr.toFinite=Hl,dr.toInteger=Ul,dr.toLength=Wl,dr.toLower=function(e){return $l(e).toLowerCase()},dr.toNumber=Bl,dr.toSafeInteger=function(e){return e?Lr(Ul(e),-L,L):0===e?e:0},dr.toString=$l,dr.toUpper=function(e){return $l(e).toUpperCase()},dr.trim=function(e,t,n){if((e=$l(e))&&(n||t===i))return e.replace(Le,"");if(!e||!(t=Mo(t)))return e;var r=An(e),o=An(t);return Yo(r,_n(r,o),wn(r,o)+1).join("")},dr.trimEnd=function(e,t,n){if((e=$l(e))&&(n||t===i))return e.replace(Re,"");if(!e||!(t=Mo(t)))return e;var r=An(e);return Yo(r,0,wn(r,An(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=$l(e))&&(n||t===i))return e.replace(Ie,"");if(!e||!(t=Mo(t)))return e;var r=An(e);return Yo(r,_n(r,An(t))).join("")},dr.truncate=function(e,t){var n=k,r=O;if(kl(t)){var o="separator"in t?t.separator:o;n="length"in t?Ul(t.length):n,r="omission"in t?Mo(t.omission):r}var a=(e=$l(e)).length;if(Sn(e)){var l=An(e);a=l.length}if(n>=a)return e;var u=n-jn(r);if(u<1)return r;var s=l?Yo(l,0,u).join(""):e.slice(0,u);if(o===i)return s+r;if(l&&(u+=s.length-u),Al(o)){if(e.slice(u).search(o)){var c,f=s;for(o.global||(o=nt(o.source,$l(Be.exec(o))+"g")),o.lastIndex=0;c=o.exec(f);)var p=c.index;s=s.slice(0,p===i?u:p)}}else if(e.indexOf(Mo(o),u)!=u){var d=s.lastIndexOf(o);d>-1&&(s=s.slice(0,d))}return s+r},dr.unescape=function(e){return(e=$l(e))&&Te.test(e)?e.replace(xe,Dn):e},dr.uniqueId=function(e){var t=++ft;return $l(e)+t},dr.upperCase=xu,dr.upperFirst=Eu,dr.each=$a,dr.eachRight=Va,dr.first=ba,Lu(dr,(Ku={},Qr(dr,function(e,t){ct.call(dr.prototype,t)||(Ku[t]=e)}),Ku),{chain:!1}),dr.VERSION="4.17.11",Qt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){dr[e].placeholder=dr}),Qt(["drop","take"],function(e,t){vr.prototype[e]=function(n){n=n===i?1:$n(Ul(n),0);var r=this.__filtered__&&!t?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=Vn(n,r.__takeCount__):r.__views__.push({size:Vn(n,M),type:e+(r.__dir__<0?"Right":"")}),r},vr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Qt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==j||3==n;vr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Ri(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Qt(["head","last"],function(e,t){var n="take"+(t?"Right":"");vr.prototype[e]=function(){return this[n](1).value()[0]}}),Qt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");vr.prototype[e]=function(){return this.__filtered__?new vr(this):this[n](1)}}),vr.prototype.compact=function(){return this.filter(Nu)},vr.prototype.find=function(e){return this.filter(e).head()},vr.prototype.findLast=function(e){return this.reverse().find(e)},vr.prototype.invokeMap=To(function(e,t){return"function"==typeof e?new vr(this):this.map(function(n){return ro(n,e,t)})}),vr.prototype.reject=function(e){return this.filter(ul(Ri(e)))},vr.prototype.slice=function(e,t){e=Ul(e);var n=this;return n.__filtered__&&(e>0||t<0)?new vr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Ul(t))<0?n.dropRight(-t):n.take(t-e)),n)},vr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},vr.prototype.toArray=function(){return this.take(M)},Qr(vr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=dr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(dr.prototype[t]=function(){var t=this.__wrapped__,l=r?[1]:arguments,u=t instanceof vr,s=l[0],c=u||vl(t),f=function(e){var t=o.apply(dr,en([e],l));return r&&p?t[0]:t};c&&n&&"function"==typeof s&&1!=s.length&&(u=c=!1);var p=this.__chain__,d=!!this.__actions__.length,h=a&&!p,m=u&&!d;if(!a&&c){t=m?t:new vr(this);var g=e.apply(t,l);return g.__actions__.push({func:Ha,args:[f],thisArg:i}),new gr(g,p)}return h&&m?e.apply(this,l):(g=this.thru(f),h?r?g.value()[0]:g.value():g)})}),Qt(["pop","push","shift","sort","splice","unshift"],function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(vl(o)?o:[],e)}return this[n](function(n){return t.apply(vl(n)?n:[],e)})}}),Qr(vr.prototype,function(e,t){var n=dr[t];if(n){var r=n.name+"";(or[r]||(or[r]=[])).push({name:t,func:n})}}),or[hi(i,y).name]=[{name:"wrapper",func:i}],vr.prototype.clone=function(){var e=new vr(this.__wrapped__);return e.__actions__=ri(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ri(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ri(this.__views__),e},vr.prototype.reverse=function(){if(this.__filtered__){var e=new vr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},vr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=vl(e),r=t<0,o=n?e.length:0,i=function(e,t,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=Vn(t,e+a);break;case"takeRight":e=$n(e,t-a)}}return{start:e,end:t}}(0,o,this.__views__),a=i.start,l=i.end,u=l-a,s=r?l:a-1,c=this.__iteratees__,f=c.length,p=0,d=Vn(u,this.__takeCount__);if(!n||!r&&o==u&&d==u)return Wo(e,this.__actions__);var h=[];e:for(;u--&&p<d;){for(var m=-1,g=e[s+=t];++m<f;){var v=c[m],y=v.iteratee,b=v.type,_=y(g);if(b==A)g=_;else if(!_){if(b==j)continue e;break e}}h[p++]=g}return h},dr.prototype.at=Ua,dr.prototype.chain=function(){return Fa(this)},dr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===i&&(this.__values__=Fl(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof mr;){var r=pa(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof vr){var t=e;return this.__actions__.length&&(t=new vr(this)),(t=t.reverse()).__actions__.push({func:Ha,args:[ka],thisArg:i}),new gr(t,this.__chain__)}return this.thru(ka)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Wo(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,qt&&(dr.prototype[qt]=function(){return this}),dr}();Dt._=Ln,(o=function(){return Ln}.call(t,n,t,r))===i||(r.exports=o)}).call(this)}).call(this,n(4),n(10)(e))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(19),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(4))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={GLOBAL:{HIDE:"__react_tooltip_hide_event",REBUILD:"__react_tooltip_rebuild_event",SHOW:"__react_tooltip_show_event"}}},function(e,t,n){"use strict";var r,o,i,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=E(n(0)),s=E(n(21)),c=E(n(2)),f=E(n(24)),p=E(n(25)),d=E(n(26)),h=E(n(27)),m=E(n(28)),g=E(n(29)),v=E(n(30)),y=E(n(31)),b=E(n(32)),_=n(33),w=E(n(34)),x=E(n(35));function E(e){return e&&e.__esModule?e:{default:e}}var T=(0,p.default)(r=(0,d.default)(r=(0,h.default)(r=(0,m.default)(r=(0,g.default)(r=(0,v.default)((i=o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={place:e.place||"top",desiredPlace:e.place||"top",type:"dark",effect:"float",show:!1,border:!1,offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:e.event||null,eventOff:e.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:(0,_.parseAria)(e),isEmptyTip:!1,disable:!1,originTooltip:null,isMultiline:!1},n.bind(["showTooltip","updateTooltip","hideTooltip","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize","mouseOnToolTip"]),n.mount=!0,n.delayShowLoop=null,n.delayHideLoop=null,n.delayReshow=null,n.intervalUpdateContent=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),l(t,[{key:"bind",value:function(e){var t=this;e.forEach(function(e){t[e]=t[e].bind(t)})}},{key:"componentDidMount",value:function(){var e=this.props,t=e.insecure,n=e.resizeHide;t&&this.setStyleHeader(),this.bindListener(),this.bindWindowEvents(n)}},{key:"componentWillReceiveProps",value:function(e){var t=this.state.ariaProps,n=(0,_.parseAria)(e);Object.keys(n).some(function(e){return n[e]!==t[e]})&&this.setState({ariaProps:n})}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(),this.unbindWindowEvents()}},{key:"mouseOnToolTip",value:function(){return!(!this.state.show||!this.tooltipRef)&&(this.tooltipRef.matches||(this.tooltipRef.msMatchesSelector?this.tooltipRef.matches=this.tooltipRef.msMatchesSelector:this.tooltipRef.matches=this.tooltipRef.mozMatchesSelector),this.tooltipRef.matches(":hover"))}},{key:"getTargetArray",value:function(e){var t=void 0;if(e){var n=e.replace(/\\/g,"\\\\").replace(/"/g,'\\"');t=document.querySelectorAll('[data-tip][data-for="'+n+'"]')}else t=document.querySelectorAll("[data-tip]:not([data-for])");return(0,w.default)(t)}},{key:"bindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff,o=t.isCapture;this.getTargetArray(n).forEach(function(t){var n=e.isCapture(t),r=e.getEffect(t);null===t.getAttribute("currentItem")&&t.setAttribute("currentItem","false"),e.unbindBasicListener(t),e.isCustomEvent(t)?e.customBindListener(t):(t.addEventListener("mouseenter",e.showTooltip,n),"float"===r&&t.addEventListener("mousemove",e.updateTooltip,n),t.addEventListener("mouseleave",e.hideTooltip,n))}),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,o)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff;this.getTargetArray(n).forEach(function(t){e.unbindBasicListener(t),e.isCustomEvent(t)&&e.customUnbindListener(t)}),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(e){var t=this.isCapture(e);e.removeEventListener("mouseenter",this.showTooltip,t),e.removeEventListener("mousemove",this.updateTooltip,t),e.removeEventListener("mouseleave",this.hideTooltip,t)}},{key:"getTooltipContent",value:function(){var e=this.props,t=e.getContent,n=e.children,r=void 0;return t&&(r=Array.isArray(t)?t[0]&&t[0](this.state.originTooltip):t(this.state.originTooltip)),(0,b.default)(this.state.originTooltip,n,r,this.state.isMultiline)}},{key:"isEmptyTip",value:function(e){return"string"==typeof e&&""===e||null===e}},{key:"showTooltip",value:function(e,t){if(t&&!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget}))return;var n=this.props,r=n.multiline,o=n.getContent,i=e.currentTarget.getAttribute("data-tip"),a=e.currentTarget.getAttribute("data-multiline")||r||!1,l=e instanceof window.FocusEvent||t,u=!0;e.currentTarget.getAttribute("data-scroll-hide")?u="true"===e.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(u=this.props.scrollHide);var s=e.currentTarget.getAttribute("data-place")||this.props.place||"top",f=l?"solid":this.getEffect(e.currentTarget),p=e.currentTarget.getAttribute("data-offset")||this.props.offset||{},d=(0,y.default)(e,e.currentTarget,c.default.findDOMNode(this),s,s,f,p),h=d.isNewState?d.newState.place:s;this.clearTimer();var m=e.currentTarget,g=this.state.show?m.getAttribute("data-delay-update")||this.props.delayUpdate:0,v=this,_=function(){v.setState({originTooltip:i,isMultiline:a,desiredPlace:s,place:h,type:m.getAttribute("data-type")||v.props.type||"dark",effect:f,offset:p,html:m.getAttribute("data-html")?"true"===m.getAttribute("data-html"):v.props.html||!1,delayShow:m.getAttribute("data-delay-show")||v.props.delayShow||0,delayHide:m.getAttribute("data-delay-hide")||v.props.delayHide||0,delayUpdate:m.getAttribute("data-delay-update")||v.props.delayUpdate||0,border:m.getAttribute("data-border")?"true"===m.getAttribute("data-border"):v.props.border||!1,extraClass:m.getAttribute("data-class")||v.props.class||v.props.className||"",disable:m.getAttribute("data-tip-disable")?"true"===m.getAttribute("data-tip-disable"):v.props.disable||!1,currentTarget:m},function(){u&&v.addScrollListener(v.state.currentTarget),v.updateTooltip(e),o&&Array.isArray(o)&&(v.intervalUpdateContent=setInterval(function(){if(v.mount){var e=v.props.getContent,t=(0,b.default)(i,"",e[0](),a),n=v.isEmptyTip(t);v.setState({isEmptyTip:n}),v.updatePosition()}},o[1]))})};g?this.delayReshow=setTimeout(_,g):_()}},{key:"updateTooltip",value:function(e){var t=this,n=this.state,r=n.delayShow,o=n.disable,i=this.props.afterShow,a=this.getTooltipContent(),l=parseInt(r,10),u=e.currentTarget||e.target;if(!this.mouseOnToolTip()&&!this.isEmptyTip(a)&&!o){var s=function(){if(Array.isArray(a)&&a.length>0||a){var n=!t.state.show;t.setState({currentEvent:e,currentTarget:u,show:!0},function(){t.updatePosition(),n&&i&&i(e)})}};clearTimeout(this.delayShowLoop),r?this.delayShowLoop=setTimeout(s,l):s()}}},{key:"listenForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.addEventListener("mouseleave",this.hideTooltip)}},{key:"removeListenerForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.removeEventListener("mouseleave",this.hideTooltip)}},{key:"hideTooltip",value:function(e,t){var n=this,r=this.state,o=r.delayHide,i=r.disable,a=this.props.afterHide,l=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(l)&&!i){if(t)if(!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget})||!this.state.show)return;var u=function(){var t=n.state.show;n.mouseOnToolTip()?n.listenForTooltipExit():(n.removeListenerForTooltipExit(),n.setState({show:!1},function(){n.removeScrollListener(),t&&a&&a(e)}))};this.clearTimer(),o?this.delayHideLoop=setTimeout(u,parseInt(o,10)):u()}}},{key:"addScrollListener",value:function(e){var t=this.isCapture(e);window.addEventListener("scroll",this.hideTooltip,t)}},{key:"removeScrollListener",value:function(){window.removeEventListener("scroll",this.hideTooltip)}},{key:"updatePosition",value:function(){var e=this,t=this.state,n=t.currentEvent,r=t.currentTarget,o=t.place,i=t.desiredPlace,a=t.effect,l=t.offset,u=c.default.findDOMNode(this),s=(0,y.default)(n,r,u,o,i,a,l);if(s.isNewState)return this.setState(s.newState,function(){e.updatePosition()});u.style.left=s.position.left+"px",u.style.top=s.position.top+"px"}},{key:"setStyleHeader",value:function(){var e=document.getElementsByTagName("head")[0];if(!e.querySelector('style[id="react-tooltip"]')){var t=document.createElement("style");t.id="react-tooltip",t.innerHTML=x.default,n.nc&&t.setAttribute("nonce",n.nc),e.insertBefore(t,e.firstChild)}}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearTimeout(this.delayReshow),clearInterval(this.intervalUpdateContent)}},{key:"render",value:function(){var e=this,n=this.state,r=n.extraClass,o=n.html,i=n.ariaProps,l=n.disable,s=this.getTooltipContent(),c=this.isEmptyTip(s),p=(0,f.default)("__react_component_tooltip",{show:this.state.show&&!l&&!c},{border:this.state.border},{"place-top":"top"===this.state.place},{"place-bottom":"bottom"===this.state.place},{"place-left":"left"===this.state.place},{"place-right":"right"===this.state.place},{"type-dark":"dark"===this.state.type},{"type-success":"success"===this.state.type},{"type-warning":"warning"===this.state.type},{"type-error":"error"===this.state.type},{"type-info":"info"===this.state.type},{"type-light":"light"===this.state.type},{allow_hover:this.props.delayUpdate},{allow_click:this.props.clickable}),d=this.props.wrapper;return t.supportedWrappers.indexOf(d)<0&&(d=t.defaultProps.wrapper),o?u.default.createElement(d,a({className:p+" "+r,id:this.props.id,ref:function(t){return e.tooltipRef=t}},i,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:s}})):u.default.createElement(d,a({className:p+" "+r,id:this.props.id},i,{ref:function(t){return e.tooltipRef=t},"data-id":"tooltip"}),s)}}]),t}(),o.propTypes={children:s.default.any,place:s.default.string,type:s.default.string,effect:s.default.string,offset:s.default.object,multiline:s.default.bool,border:s.default.bool,insecure:s.default.bool,class:s.default.string,className:s.default.string,id:s.default.string,html:s.default.bool,delayHide:s.default.number,delayUpdate:s.default.number,delayShow:s.default.number,event:s.default.string,eventOff:s.default.string,watchWindow:s.default.bool,isCapture:s.default.bool,globalEventOff:s.default.string,getContent:s.default.any,afterShow:s.default.func,afterHide:s.default.func,disable:s.default.bool,scrollHide:s.default.bool,resizeHide:s.default.bool,wrapper:s.default.string,clickable:s.default.bool},o.defaultProps={insecure:!0,resizeHide:!0,wrapper:"div",clickable:!1},o.supportedWrappers=["div","span"],o.displayName="ReactTooltip",r=i))||r)||r)||r)||r)||r)||r;e.exports=T},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],a=n.document,l=Object.getPrototypeOf,u=i.slice,s=i.concat,c=i.push,f=i.indexOf,p={},d=p.toString,h=p.hasOwnProperty,m=h.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||a).createElement("script");if(i.text=e,t)for(r in _)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[d.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function S(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.4.1",constructor:E,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},l=1,u=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[l]||{},l++),"object"==typeof a||y(a)||(a={}),l===u&&(a=this,l--);l<u;l++)if(null!=(e=arguments[l]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(s&&r&&(E.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||E.isPlainObject(n)?n:{},o=!1,a[t]=E.extend(s,i,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){w(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?E.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(S(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return s.apply([],a)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var C=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,r,o,i,a,l,u,s,c,f,p,d,h,m,g,v,y,b,_="sizzle"+1*new Date,w=e.document,x=0,E=0,T=ue(),S=ue(),C=ue(),k=ue(),O=function(e,t){return e===t&&(f=!0),0},P={}.hasOwnProperty,N=[],j=N.pop,A=N.push,D=N.push,L=N.slice,I=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+M+"*("+q+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+M+"*\\]",H=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",U=new RegExp(M+"+","g"),W=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),$=new RegExp(M+"|>"),V=new RegExp(H),Q=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){p()},ae=_e(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{D.apply(N=L.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(e){D={apply:N.length?function(e,t){A.apply(e,L.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function le(e,t,r,o){var i,l,s,c,f,h,v,y=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!o&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,m)){if(11!==x&&(f=Z.exec(e)))if(i=f[1]){if(9===x){if(!(s=t.getElementById(i)))return r;if(s.id===i)return r.push(s),r}else if(y&&(s=y.getElementById(i))&&b(t,s)&&s.id===i)return r.push(s),r}else{if(f[2])return D.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===x&&$.test(e)){for((c=t.getAttribute("id"))?c=c.replace(re,oe):t.setAttribute("id",c=_),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+be(h[l]);v=h.join(","),y=ee.test(e)&&ve(t.parentNode)||t}try{return D.apply(r,y.querySelectorAll(v)),r}catch(t){k(e,!0)}finally{c===_&&t.removeAttribute("id")}}}return u(e.replace(W,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[_]=!0,e}function ce(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return se(function(t){return t=+t,se(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=le.support={},i=le.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=le.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,m=!i(d),w!==d&&(o=d.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(d.getElementsByClassName),n.getById=ce(function(e){return h.appendChild(e).id=_,!d.getElementsByName||!d.getElementsByName(_).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=J.test(d.querySelectorAll))&&(ce(function(e){h.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&b(w,e)?-1:t===d||t.ownerDocument===w&&b(w,t)?1:c?I(c,e)-I(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],l=[t];if(!o||!i)return e===d?-1:t===d?1:o?-1:i?1:c?I(c,e)-I(c,t):0;if(o===i)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?pe(a[r],l[r]):a[r]===w?-1:l[r]===w?1:0},d):d},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),n.matchesSelector&&m&&!k[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return le(t,d,null,[e]).length>0},le.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),b(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var o=r.attrHandle[t.toLowerCase()],i=o&&P.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},le.escape=function(e){return(e+"").replace(re,oe)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(O),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return c=null,e},o=le.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=le.selectors={cacheLength:50,createPseudo:se,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=le.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,p,d,h,m=i!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!u&&!l,b=!1;if(g){if(i){for(;m;){for(p=t;p=p[m];)if(l?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(d=(s=(c=(f=(p=g)[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===x&&s[1])&&s[2],p=d&&g.childNodes[d];p=++d&&p&&p[m]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[x,d,b];break}}else if(y&&(b=d=(s=(c=(f=(p=t)[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===x&&s[1]),!1===b)for(;(p=++d&&p&&p[m]||(b=d=0)||h.pop())&&((l?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(f=p[_]||(p[_]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return o[_]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=I(e,i[a])]=!(n[r]=i[a])}):function(e){return o(e,0,n)}):o}},pseudos:{not:se(function(e){var t=[],n=[],r=l(e.replace(W,"$1"));return r[_]?se(function(e,t,n,o){for(var i,a=r(e,null,o,[]),l=e.length;l--;)(i=a[l])&&(e[l]=!(t[l]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return le(e,t).length>0}}),contains:se(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}}),lang:se(function(e){return Q.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:ge(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function _e(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,l=E++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var s,c,f,p=[x,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[_]||(t[_]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===x&&s[1]===l)return p[2]=s[2];if(c[i]=p,p[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(i=e[l])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(l)));return a}function Ee(e,t,n,r,o,i){return r&&!r[_]&&(r=Ee(r)),o&&!o[_]&&(o=Ee(o,i)),se(function(i,a,l,u){var s,c,f,p=[],d=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)le(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!i&&t?m:xe(m,p,e,l,u),v=n?o||(i?e:h||r)?[]:a:g;if(n&&n(g,v,l,u),r)for(s=xe(v,d),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[d[c]]=!(g[d[c]]=f));if(i){if(o||e){if(o){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(g[c]=f);o(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=o?I(i,f):p[c])>-1&&(i[s]=!(a[s]=f))}}else v=xe(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):D.apply(a,v)})}function Te(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=_e(function(e){return e===t},l,!0),f=_e(function(e){return I(t,e)>-1},l,!0),p=[function(e,n,r){var o=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])p=[_e(we(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[_]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return Ee(u>1&&we(p),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(W,"$1"),n,u<o&&Te(e.slice(u,o)),o<i&&Te(e=e.slice(o)),o<i&&be(e))}p.push(n)}return we(p)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=le.tokenize=function(e,t){var n,o,i,a,l,u,s,c=S[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(o=B.exec(l))||(o&&(l=l.slice(o[0].length)||l),u.push(i=[])),n=!1,(o=z.exec(l))&&(n=o.shift(),i.push({value:n,type:o[0].replace(W," ")}),l=l.slice(n.length)),r.filter)!(o=K[a].exec(l))||s[a]&&!(o=s[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):S(e,u).slice(0)},l=le.compile=function(e,t){var n,o=[],i=[],l=C[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Te(t[n]))[_]?o.push(l):i.push(l);(l=C(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,l,u,c){var f,h,g,v=0,y="0",b=i&&[],_=[],w=s,E=i||o&&r.find.TAG("*",c),T=x+=null==w?1:Math.random()||.1,S=E.length;for(c&&(s=a===d||a||c);y!==S&&null!=(f=E[y]);y++){if(o&&f){for(h=0,a||f.ownerDocument===d||(p(f),l=!m);g=e[h++];)if(g(f,a||d,l)){u.push(f);break}c&&(x=T)}n&&((f=!g&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,_,a,l);if(i){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=j.call(u));_=xe(_)}D.apply(u,_),c&&!i&&_.length>0&&v+t.length>1&&le.uniqueSort(u)}return c&&(x=T,s=w),b};return n?se(i):i}(i,o))).selector=e}return l},u=le.select=function(e,t,n,o){var i,u,s,c,f,p="function"==typeof e&&e,d=!o&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=K.needsContext.test(e)?0:u.length;i--&&(s=u[i],!r.relative[c=s.type]);)if((f=r.find[c])&&(o=f(s.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return D.apply(n,o),n;break}}return(p||l(e,d))(o,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=_.split("").sort(O).join("")===_,n.detectDuplicates=!!f,p(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),le}(n);E.find=C,E.expr=C.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=C.uniqueSort,E.text=C.getText,E.isXMLDoc=C.isXML,E.contains=C.contains,E.escapeSelector=C.escape;var k=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&E(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=E.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return y(t)?E.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return f.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,o[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&P.test(e)?E(e):e||[],!1).length}});var D,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),j.test(r[1])&&E.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=a.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,D=E(a);var I=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&E(e);if(!P.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(E(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(N(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,r){var o=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=E.filter(r,o)),this.length>1&&(R[e]||E.uniqueSort(o),I.test(e)&&o.reverse()),this.pushStack(o)}});var q=/[^\x20\t\r\n\f]+/g;function F(e){return e}function H(e){throw e}function U(e,t,n,r){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(q)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,r,o,i=[],a=[],l=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},s={add:function(){return i&&(n&&!t&&(l=i.length-1,a.push(n)),function t(n){E.each(n,function(n,r){y(r)?e.unique&&s.has(r)||i.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--}),this},has:function(e){return e?E.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,r){var o=y(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var l=this,u=arguments,s=function(){var n,s;if(!(e<i)){if((n=r.apply(l,u))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(s)?o?s.call(n,a(i,t,F,o),a(i,t,H,o)):(i++,s.call(n,a(i,t,F,o),a(i,t,H,o),a(i,t,F,t.notifyWith))):(r!==F&&(l=void 0,u=[n]),(o||t.resolveWith)(l,u))}},c=o?s:function(){try{s()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,c.stackTrace),e+1>=i&&(r!==H&&(l=void 0,u=[n]),t.rejectWith(l,u))}};e?c():(E.Deferred.getStackHook&&(c.stackTrace=E.Deferred.getStackHook()),n.setTimeout(c))}}return E.Deferred(function(n){t[0][3].add(a(0,n,y(o)?o:F,n.notifyWith)),t[1][3].add(a(0,n,y(e)?e:F)),t[2][3].add(a(0,n,y(r)?r:H))}).promise()},promise:function(e){return null!=e?E.extend(e,o):o}},i={};return E.each(t,function(e,n){var a=n[2],l=n[5];o[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=u.call(arguments),i=E.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?u.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(U(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)U(o[n],a(n),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var B=E.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),E.ready()}E.fn.ready=function(e){return B.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||B.resolveWith(a,[E]))}}),E.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(E.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var $=function(e,t,n,r,o,i,a){var l=0,u=e.length,s=null==n;if("object"===x(n))for(l in o=!0,n)$(e,t,l,n[l],!0,i,a);else if(void 0!==r&&(o=!0,y(r)||(a=!0),s&&(a?(t.call(e,r),t=null):(s=t,t=function(e,t,n){return s.call(E(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return o?e:s?t.call(e):u?t(e[0],n):i},V=/^-ms-/,Q=/-([a-z])/g;function K(e,t){return t.toUpperCase()}function Y(e){return e.replace(V,"ms-").replace(Q,K)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Y(t)]=n;else for(r in t)o[Y(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(q)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new G,Z=new G,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):$(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,o=n.shift(),i=E._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){E.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=E.Deferred(),i=this,a=this.length,l=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=a.documentElement,le=function(e){return E.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(le=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&le(e)&&"none"===E.css(e,"display")},ce=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o};function fe(e,t,n,r){var o,i,a=20,l=r?function(){return r.cur()}:function(){return E.css(e,t,"")},u=l(),s=n&&n[3]||(E.cssNumber[t]?"":"px"),c=e.nodeType&&(E.cssNumber[t]||"px"!==s&&+u)&&oe.exec(E.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)E.style(e,t,c+s),(1-i)*(1-(i=l()/u||.5))<=0&&(a=0),c/=i;c*=2,E.style(e,t,c+s),n=n||[]}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}var pe={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,o=pe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=E.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),pe[r]=o,o)}function he(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=J.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=de(r))):"none"!==n&&(o[i]="none",J.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}E.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?E.merge([e],n):n}function _e(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var we,xe,Ee=/<|&#?\w+;/;function Te(e,t,n,r,o){for(var i,a,l,u,s,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if("object"===x(i))E.merge(p,i.nodeType?[i]:i);else if(Ee.test(i)){for(a=a||f.appendChild(t.createElement("div")),l=(ge.exec(i)||["",""])[1].toLowerCase(),u=ye[l]||ye._default,a.innerHTML=u[1]+E.htmlPrefilter(i)+u[2],c=u[0];c--;)a=a.lastChild;E.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(i));for(f.textContent="",d=0;i=p[d++];)if(r&&E.inArray(i,r)>-1)o&&o.push(i);else if(s=le(i),a=be(f.appendChild(i),"script"),s&&_e(a),n)for(c=0;i=a[c++];)ve.test(i.type||"")&&n.push(i);return f}we=a.createDocumentFragment().appendChild(a.createElement("div")),(xe=a.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),we.appendChild(xe),v.checkClone=we.cloneNode(!0).cloneNode(!0).lastChild.checked,we.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!we.cloneNode(!0).lastChild.defaultValue;var Se=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function Oe(){return!0}function Pe(){return!1}function Ne(e,t){return e===function(){try{return a.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,r,o,i){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)je(e,l,n,r,t[l],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Pe;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,o,r,n)})}function Ae(e,t,n){n?(J.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=J.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=u.call(arguments),J.set(this,t,i),r=n(this,t),this[t](),i!==(o=J.get(this,t))||r?J.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(J.set(this,t,{value:E.event.trigger(E.extend(i[0],E.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&E.event.add(e,t,Oe)}E.event={global:{},add:function(e,t,n,r,o){var i,a,l,u,s,c,f,p,d,h,m,g=J.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&E.find.matchesSelector(ae,o),n.guid||(n.guid=E.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(q)||[""]).length;s--;)d=m=(l=ke.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d&&(f=E.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=E.event.special[d]||{},c=E.extend({type:d,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&E.expr.match.needsContext.test(o),namespace:h.join(".")},i),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,c):p.push(c),E.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,l,u,s,c,f,p,d,h,m,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(s=(t=(t||"").match(q)||[""]).length;s--;)if(d=m=(l=ke.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),d){for(f=E.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=p.length;i--;)c=p[i],!o&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(i,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||E.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)E.event.remove(e,d+t[s],n,r,!0);E.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,l=E.event.fix(e),u=new Array(arguments.length),s=(J.get(this,"events")||{})[l.type]||[],c=E.event.special[l.type]||{};for(u[0]=l,t=1;t<arguments.length;t++)u[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,s),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((E.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?E(o,this).index(s)>-1:E.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&l.push({elem:s,handlers:i})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click",Oe),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&N(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&N(t,"input")&&J.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Oe:Pe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Pe,isPropagationStopped:Pe,isImmediatePropagationStopped:Pe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Oe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Oe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Oe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Ne),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||E.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,r){return je(this,e,t,n,r)},one:function(e,t,n,r){return je(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Pe),this.each(function(){E.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Le=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,r,o,i,a,l,u,s;if(1===t.nodeType){if(J.hasData(e)&&(i=J.access(e),a=J.set(t,i),s=i.events))for(o in delete a.handle,a.events={},s)for(n=0,r=s[o].length;n<r;n++)E.event.add(t,o,s[o][n]);Z.hasData(e)&&(l=Z.access(e),u=E.extend({},l),Z.set(t,u))}}function Ue(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function We(e,t,n,r){t=s.apply([],t);var o,i,a,l,u,c,f=0,p=e.length,d=p-1,h=t[0],m=y(h);if(m||p>1&&"string"==typeof h&&!v.checkClone&&Ie.test(h))return e.each(function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),We(i,t,n,r)});if(p&&(i=(o=Te(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(l=(a=E.map(be(o,"script"),qe)).length;f<p;f++)u=o,f!==d&&(u=E.clone(u,!0,!0),l&&E.merge(a,be(u,"script"))),n.call(e[f],u,f);if(l)for(c=a[a.length-1].ownerDocument,E.map(a,Fe),f=0;f<l;f++)u=a[f],ve.test(u.type||"")&&!J.access(u,"globalEval")&&E.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):w(u.textContent.replace(Re,""),u,c))}return e}function Be(e,t,n){for(var r,o=t?E.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||E.cleanData(be(r)),r.parentNode&&(n&&le(r)&&_e(be(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,l=e.cloneNode(!0),u=le(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=be(l),r=0,o=(i=be(e)).length;r<o;r++)Ue(i[r],a[r]);if(t)if(n)for(i=i||be(e),a=a||be(l),r=0,o=i.length;r<o;r++)He(i[r],a[r]);else He(e,l);return(a=be(l,"script")).length>0&&_e(a,!u&&be(e,"script")),l},cleanData:function(e){for(var t,n,r,o=E.event.special,i=0;void 0!==(n=e[i]);i++)if(X(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return We(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return We(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return We(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return We(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return We(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(be(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,r=[],o=E(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),E(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var ze=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ve=new RegExp(ie.join("|"),"i");function Qe(e,t,n){var r,o,i,a,l=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||le(e)||(a=E.style(e,t)),!v.pixelBoxStyles()&&ze.test(a)&&Ve.test(t)&&(r=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function Ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(s).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",l=36===t(e.right),o=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),ae.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,l,u,s=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),l},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i}}))}();var Ye=["Webkit","Moz","ms"],Xe=a.createElement("div").style,Ge={};function Je(e){var t=E.cssProps[e]||Ge[e];return t||(e in Xe?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Xe)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ot(e,t,n,r,o,i){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=E.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=E.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=E.css(e,"border"+ie[a]+"Width",!0,o))):(u+=E.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=E.css(e,"border"+ie[a]+"Width",!0,o):l+=E.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-l-.5))||0),u}function it(e,t,n){var r=$e(e),o=(!v.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,r),i=o,a=Qe(e,t,r),l="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(a)){if(!n)return a;a="auto"}return(!v.boxSizingReliable()&&o||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===E.css(e,"boxSizing",!1,r),(i=l in e)&&(a=e[l])),(a=parseFloat(a)||0)+ot(e,t,n||(o?"border":"content"),i,r,a)+"px"}function at(e,t,n,r,o){return new at.prototype.init(e,t,n,r,o)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,l=Y(t),u=et.test(t),s=e.style;if(u||(t=Je(l)),a=E.cssHooks[t]||E.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:s[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=fe(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=o&&o[3]||(E.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var o,i,a,l=Y(t);return et.test(t)||(t=Je(l)),(a=E.cssHooks[t]||E.cssHooks[l])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Qe(e,t,r)),"normal"===o&&t in nt&&(o=nt[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!Ze.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):ce(e,tt,function(){return it(e,t,r)})},set:function(e,n,r){var o,i=$e(e),a=!v.scrollboxSize()&&"absolute"===i.position,l=(a||r)&&"border-box"===E.css(e,"boxSizing",!1,i),u=r?ot(e,t,r,l,i):0;return l&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-ot(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),rt(0,n,u)}}}),E.cssHooks.marginLeft=Ke(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-ce(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(E.cssHooks[e+t].set=rt)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=$e(e),o=t.length;a<o;a++)i[t[a]]=E.css(e,t[a],!1,r);return i}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=at,at.prototype={constructor:at,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}},at.prototype.init.prototype=at.prototype,at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},at.propHooks.scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=at.prototype.init,E.fx.step={};var lt,ut,st=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function ft(){ut&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ft):n.setTimeout(ft,E.fx.interval),E.fx.tick())}function pt(){return n.setTimeout(function(){lt=void 0}),lt=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ht(e,t,n){for(var r,o=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function mt(e,t,n){var r,o,i=0,a=mt.prefilters.length,l=E.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=lt||pt(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),i=0,a=s.tweens.length;i<a;i++)s.tweens[i].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:lt||pt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Y(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=E.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=mt.prefilters[i].call(s,e,c,s.opts))return y(r.stop)&&(E._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return E.map(c,ht,s),y(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),E.fx.timer(E.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}E.Animation=E.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return fe(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(q);for(var n,r=0,o=e.length;r<o;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,l,u,s,c,f="width"in t||"height"in t,p=this,d={},h=e.style,m=e.nodeType&&se(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],st.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}d[r]=g&&g[r]||E.style(e,r)}if((u=!E.isEmptyObject(t))||!E.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=g&&g.display)&&(s=J.get(e,"display")),"none"===(c=E.css(e,"display"))&&(s?c=s:(he([e],!0),s=e.style.display||s,c=E.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===E.css(e,"float")&&(u||(p.done(function(){h.display=s}),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:s}),i&&(g.hidden=!m),m&&he([e],!0),p.done(function(){for(r in m||he([e]),J.remove(e,"fxshow"),d)E.style(e,r,d[r])})),u=ht(m?g[r]:0,r,p),r in g||(g[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=E.isEmptyObject(e),i=E.speed(t,n,r),a=function(){var t=mt(this,E.extend({},e),i);(o||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=E.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&ct.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=E.timers,a=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}}),E.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(lt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),lt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ut||(ut=!0,ft())},E.fx.stop=function(){ut=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?E.prop(e,t,n):(1===i&&E.isXMLDoc(e)||(o=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(q);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=vt[t]||E.find.attr;vt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=vt[a],vt[a]=o,o=null!=n(e,t,r)?a:null,vt[a]=i),o}});var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;function _t(e){return(e.match(q)||[]).join(" ")}function wt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(q)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(e)||(t=E.propFix[t]||t,o=E.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each(function(t){E(this).addClass(e.call(this,t,wt(this)))});if((t=xt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+_t(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(l=_t(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,i,a,l,u=0;if(y(e))return this.each(function(t){E(this).removeClass(e.call(this,t,wt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[u++];)if(o=wt(n),r=1===n.nodeType&&" "+_t(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(l=_t(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,wt(this),t),t)}):this.each(function(){var t,o,i,a;if(r)for(o=0,i=E(this),a=xt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=wt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+_t(wt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;E.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=y(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,E(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=E.map(o,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=E.valHooks[o.type]||E.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Et,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:_t(E.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,i=E.makeArray(t),a=o.length;a--;)((r=o[a]).selected=E.inArray(E.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,St=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,o){var i,l,u,s,c,f,p,d,m=[r||a],g=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(l=d=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),p=E.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!b(r)){for(s=p.delegateType||g,Tt.test(s+g)||(l=l.parentNode);l;l=l.parentNode)m.push(l),u=l;u===(r.ownerDocument||a)&&m.push(u.defaultView||u.parentWindow||n)}for(i=0;(l=m[i++])&&!e.isPropagationStopped();)d=l,e.type=i>1?s:p.bindType||g,(f=(J.get(l,"events")||{})[e.type]&&J.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&X(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!X(r)||c&&y(r[g])&&!b(r)&&((u=r[c])&&(r[c]=null),E.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,St),r[g](),e.isPropagationStopped()&&d.removeEventListener(g,St),E.event.triggered=void 0,u&&(r[c]=u)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=n.location,kt=Date.now(),Ot=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Pt=/\[\]$/,Nt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var o;if(Array.isArray(t))E.each(t,function(t,o){n||Pt.test(e)?r(e,o):Dt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==x(t))r(e,t);else for(o in t)Dt(e+"["+o+"]",t[o],n,r)}E.param=function(e,t){var n,r=[],o=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){o(this.name,this.value)});else for(n in e)Dt(n,e[n],t,o);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&At.test(this.nodeName)&&!jt.test(e)&&(this.checked||!me.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}}):{name:t.name,value:n.replace(Nt,"\r\n")}}).get()}});var Lt=/%20/g,It=/#.*$/,Rt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Ft=/^\/\//,Ht={},Ut={},Wt="*/".concat("*"),Bt=a.createElement("a");function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(q)||[];if(y(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function $t(e,t,n,r){var o={},i=e===Ut;function a(l){var u;return o[l]=!0,E.each(e[l]||[],function(e,l){var s=l(t,n,r);return"string"!=typeof s||i||o[s]?i?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)}),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Vt(e,t){var n,r,o=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Bt.href=Ct.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,E.ajaxSettings),t):Vt(E.ajaxSettings,e)},ajaxPrefilter:zt(Ht),ajaxTransport:zt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,l,u,s,c,f,p,d,h=E.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?E(m):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),b=h.statusCode||{},_={},w={},x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=Mt.exec(i);)l[t[1].toLowerCase()+" "]=(l[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=l[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||x;return r&&r.abort(t),S(0,t),this}};if(v.promise(T),h.url=((e||h.url||Ct.href)+"").replace(Ft,Ct.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(q)||[""],null==h.crossDomain){s=a.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),$t(Ht,h,t,T),c)return T;for(p in(f=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!qt.test(h.type),o=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Lt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Ot.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Rt,"$1"),d=(Ot.test(o)?"&":"?")+"_="+kt+++d),h.url=o+d),h.ifModified&&(E.lastModified[o]&&T.setRequestHeader("If-Modified-Since",E.lastModified[o]),E.etag[o]&&T.setRequestHeader("If-None-Match",E.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Wt+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(m,T,h)||c))return T.abort();if(x="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),r=$t(Ut,h,t,T)){if(T.readyState=1,f&&g.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(u=n.setTimeout(function(){T.abort("timeout")},h.timeout));try{c=!1,r.send(_,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,a,l){var s,p,d,_,w,x=t;c||(c=!0,u&&n.clearTimeout(u),r=void 0,i=l||"",T.readyState=e>0?4:0,s=e>=200&&e<300||304===e,a&&(_=function(e,t,n){for(var r,o,i,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(h,T,a)),_=function(e,t,n,r){var o,i,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=s[u+" "+i]||s["* "+i]))for(o in s)if((l=o.split(" "))[1]===i&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(h,_,T,s),s?(h.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(E.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(E.etag[o]=w)),204===e||"HEAD"===h.type?x="nocontent":304===e?x="notmodified":(x=_.state,p=_.data,s=!(d=_.error))):(d=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(t||x)+"",s?v.resolveWith(m,[p,x,T]):v.rejectWith(m,[T,x,d]),T.statusCode(b),b=void 0,f&&g.trigger(s?"ajaxSuccess":"ajaxError",[T,h,s?p:d]),y.fireWith(m,[T,x]),f&&(g.trigger("ajaxComplete",[T,h]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:o,data:n,success:r},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e,t){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Qt={0:200,1223:204},Kt=E.ajaxSettings.xhr();v.cors=!!Kt&&"withCredentials"in Kt,v.ajax=Kt=!!Kt,E.ajaxTransport(function(e){var t,r;if(v.cors||Kt&&!e.crossDomain)return{send:function(o,i){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Qt[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Yt,Xt=[],Gt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||E.expando+"_"+kt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,a,l=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Gt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||E.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always(function(){void 0===i?E(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(o)),a&&y(i)&&i(a[0]),a=i=void 0}),"script"}),v.createHTMLDocument=((Yt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=!n&&[],(o=j.exec(e))?[t.createElement(o[1])]:(o=Te([e],t,i),i&&i.length&&E(i).remove(),E.merge([],o.childNodes)));var r,o,i},E.fn.load=function(e,t,n){var r,o,i,a=this,l=e.indexOf(" ");return l>-1&&(r=_t(e.slice(l)),e=e.slice(0,l)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&E.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var r,o,i,a,l,u,s=E.css(e,"position"),c=E(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),i=E.css(e,"top"),u=E.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+u).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),y(t)&&(t=t.call(e,n,E.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+o),"using"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),o.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-E.css(r,"marginTop",!0),left:t.left-o.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ae})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return $(this,function(e,r,o){var i;if(b(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Ke(v.pixelPosition,function(e,n){if(n)return n=Qe(e,t),ze.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){E.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===i?"margin":"border");return $(this,function(t,n,o){var i;return b(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?E.css(t,n,l):E.style(t,n,o,l)},t,a?o:void 0,a)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=u.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||E.guid++,o},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=N,E.isFunction=y,E.isWindow=b,E.camelCase=Y,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Jt=n.jQuery,Zt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Zt),e&&n.jQuery===E&&(n.jQuery=Jt),E},o||(n.jQuery=n.$=E),E})},function(e,t,n){n(40),e.exports=n(36)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";(function(e){function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}for(var r=["native code","[object MutationObserverConstructor]"],o="undefined"!=typeof window,i=["Edge","Trident","Firefox"],a=0,l=0;l<i.length;l+=1)if(o&&0<=navigator.userAgent.indexOf(i[l])){a=1;break}var u,s=o&&function(e){return r.some(function(t){return-1<(e||"").toString().indexOf(t)})}(window.MutationObserver)?function(e){var t=!1,n=0,r=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(r,{attributes:!0}),function(){t||(t=!0,r.setAttribute("x-index",n),++n)}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},a))}};function c(e){return e&&"[object Function]"==={}.toString.call(e)}function f(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function d(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var t=f(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll)/.test(n+o+r)?e:d(p(e))}function h(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===f(t,"position")?h(t):t:window.document.documentElement}function m(e){return null===e.parentNode?e:m(e.parentNode)}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a=i.commonAncestorContainer;if(e!==a&&t!==a||r.contains(o))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||h(e.firstElementChild)===e)}(a)?a:h(a);var l=m(e);return l.host?g(l.host,t):g(e,m(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=window.document.documentElement;return(window.document.scrollingElement||r)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",r="Left"==n?"Right":"Bottom";return+e["border".concat(n,"Width")].split("px")[0]+ +e["border".concat(r,"Width")].split("px")[0]}var b=function(){return null==u&&(u=-1!==navigator.appVersion.indexOf("MSIE 10")),u};function _(e,t,n,r){return Math.max(t["offset".concat(e)],t["scroll".concat(e)],n["client".concat(e)],n["offset".concat(e)],n["scroll".concat(e)],b()?n["offset".concat(e)]+r["margin".concat("Height"===e?"Top":"Left")]+r["margin".concat("Height"===e?"Bottom":"Right")]:0)}function w(){var e=window.document.body,t=window.document.documentElement,n=b()&&window.getComputedStyle(t);return{height:_("Height",e,t,n),width:_("Width",e,t,n)}}var x=Object.assign||function(e){for(var t,n=1;n<arguments.length;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e};function E(e){return x({},e,{right:e.left+e.width,bottom:e.top+e.height})}function T(e){var t={};if(b())try{t=e.getBoundingClientRect();var n=v(e,"top"),r=v(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}catch(e){}else t=e.getBoundingClientRect();var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?w():{},a=i.width||e.clientWidth||o.right-o.left,l=i.height||e.clientHeight||o.bottom-o.top,u=e.offsetWidth-a,s=e.offsetHeight-l;if(u||s){var c=f(e);u-=y(c,"x"),s-=y(c,"y"),o.width-=u,o.height-=s}return E(o)}function S(e,t){var n=b(),r="HTML"===t.nodeName,o=T(e),i=T(t),a=d(e),l=f(t),u=+l.borderTopWidth.split("px")[0],s=+l.borderLeftWidth.split("px")[0],c=E({top:o.top-i.top-u,left:o.left-i.left-s,width:o.width,height:o.height});if(c.marginTop=0,c.marginLeft=0,!n&&r){var p=+l.marginTop.split("px")[0],h=+l.marginLeft.split("px")[0];c.top-=u-p,c.bottom-=u-p,c.left-=s-h,c.right-=s-h,c.marginTop=p,c.marginLeft=h}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(t,"top"),o=v(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(c,t)),c}function C(e,t,n,r){var o={top:0,left:0},i=g(e,t);if("viewport"===r)o=function(e){var t=Math.max,n=window.document.documentElement,r=S(e,n),o=t(n.clientWidth,window.innerWidth||0),i=t(n.clientHeight,window.innerHeight||0),a=v(n),l=v(n,"left");return E({top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:i})}(i);else{var a;"scrollParent"===r?"BODY"===(a=d(p(e))).nodeName&&(a=window.document.documentElement):a="window"===r?window.document.documentElement:r;var l=S(a,i);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&(!("fixed"!==f(t,"position"))||e(p(t)))}(i))o=l;else{var u=w(),s=u.height,c=u.width;o.top+=l.top-l.marginTop,o.bottom=s+l.top,o.left+=l.left-l.marginLeft,o.right=c+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function k(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=C(n,r,i,o),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(l).map(function(e){return x({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),s=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=0<s.length?s[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-".concat(f):"")}function O(e,t,n){return S(n,g(t,n))}function P(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function N(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function j(e,t,n){n=n.split("-")[0];var r=P(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",l=i?"left":"top",u=i?"height":"width",s=i?"width":"height";return o[a]=t[a]+t[u]/2-r[u]/2,o[l]=n===l?t[l]-r[s]:t[N(l)],o}function A(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function D(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=A(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&c(n)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=n(t,e))}),t}function L(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function I(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length-1;r++){var o=t[r],i=o?"".concat(o).concat(n):e;if(void 0!==window.document.body.style[i])return i}return null}function R(e,t,n,r){n.updateBound=r,window.addEventListener("resize",n.updateBound,{passive:!0});var o=d(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?window:t;a.addEventListener(n,r,{passive:!0}),i||e(d(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function M(){var e;this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=(this.reference,e=this.state,window.removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function F(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(t[n])&&(r="px"),e.style[n]=t[n]+r})}function H(e,t,n){var r=A(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var i="`".concat(t,"`"),a="`".concat(n,"`");console.warn("".concat(a," modifier is required by ").concat(i," modifier in order to work, be sure to include it before ").concat(i,"!"))}return o}var U=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],W=U.slice(3);function B(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=W.indexOf(e),r=W.slice(n+1).concat(W.slice(0,n));return t?r.reverse():r}var z={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function $(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(A(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1===l?[a]:[a.slice(0,l).concat([a[l].split(u)[0]]),[a[l].split(u)[1]].concat(a.slice(l+1))];return(s=s.map(function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=Math.max,i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+i[1],l=i[2];if(!a)return e;if(0===l.indexOf("%")){var u;switch(l){case"%p":u=n;break;case"%":case"%r":default:u=r}return E(u)[t]/100*a}return"vh"===l||"vw"===l?("vh"===l?o(document.documentElement.clientHeight,window.innerHeight||0):o(document.documentElement.clientWidth,window.innerWidth||0))/100*a:a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){q(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var V={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,r=t.split("-")[0],o=t.split("-")[1];if(o){var i=e.offsets,a=i.reference,l=i.popper,u=-1!==["bottom","top"].indexOf(r),s=u?"left":"top",c=u?"width":"height",f={start:n({},s,a[s]),end:n({},s,a[s]+a[c]-l[c])};e.offsets.popper=x({},l,f[o])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n,r=t.offset,o=e.placement,i=e.offsets,a=i.popper,l=i.reference,u=o.split("-")[0];return n=q(+r)?[+r,0]:$(r,a,l,u),"left"===u?(a.top+=n[0],a.left-=n[1]):"right"===u?(a.top+=n[0],a.left+=n[1]):"top"===u?(a.left+=n[0],a.top-=n[1]):"bottom"===u&&(a.left+=n[0],a.top+=n[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var r=t.boundariesElement||h(e.instance.popper);e.instance.reference===r&&(r=h(r));var o=C(e.instance.popper,e.instance.reference,t.padding,r);t.boundaries=o;var i=t.priority,a=e.offsets.popper,l={primary:function(e){var r=a[e];return a[e]<o[e]&&!t.escapeWithReference&&(r=Math.max(a[e],o[e])),n({},e,r)},secondary:function(e){var r="right"===e?"left":"top",i=a[r];return a[e]>o[e]&&!t.escapeWithReference&&(i=Math.min(a[r],o[e]-("right"===e?a.width:a.height))),n({},r,i)}};return i.forEach(function(e){var t=-1===["left","top"].indexOf(e)?"secondary":"primary";a=x({},a,l[t](e))}),e.offsets.popper=a,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",u=a?"left":"top",s=a?"width":"height";return n[l]<i(r[u])&&(e.offsets.popper[u]=i(r[u])-n[s]),n[u]>i(r[l])&&(e.offsets.popper[u]=i(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!H(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,i=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),u=l?"height":"width",s=l?"Top":"Left",c=s.toLowerCase(),p=l?"left":"top",d=l?"bottom":"right",h=P(n)[u];a[d]-h<i[c]&&(e.offsets.popper[c]-=i[c]-(a[d]-h)),a[c]+h>i[d]&&(e.offsets.popper[c]+=a[c]+h-i[d]);var m=a[c]+a[u]/2-h/2,g=f(e.instance.popper,"margin".concat(s)).replace("px",""),v=m-E(e.offsets.popper)[c]-g;return v=Math.max(Math.min(i[u]-h,v),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[c]=Math.round(v),e.offsets.arrow[p]="",e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(L(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=C(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),r=e.placement.split("-")[0],o=N(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case z.FLIP:a=[r,o];break;case z.CLOCKWISE:a=B(r);break;case z.COUNTERCLOCKWISE:a=B(r,!0);break;default:a=t.behavior}return a.forEach(function(l,u){if(r!==l||a.length===u+1)return e;r=e.placement.split("-")[0],o=N(r);var s=e.offsets.popper,c=e.offsets.reference,f=Math.floor,p="left"===r&&f(s.right)>f(c.left)||"right"===r&&f(s.left)<f(c.right)||"top"===r&&f(s.bottom)>f(c.top)||"bottom"===r&&f(s.top)<f(c.bottom),d=f(s.left)<f(n.left),h=f(s.right)>f(n.right),m=f(s.top)<f(n.top),g=f(s.bottom)>f(n.bottom),v="left"===r&&d||"right"===r&&h||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===i&&d||y&&"end"===i&&h||!y&&"start"===i&&m||!y&&"end"===i&&g);(p||v||b)&&(e.flipped=!0,(p||v)&&(r=a[u+1]),b&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=x({},e.offsets.popper,j(e.instance.popper,e.offsets.reference,e.placement)),e=D(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(l?o[a?"width":"height"]:0),e.placement=N(t),e.offsets.popper=E(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!H(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=A(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=Math.floor,r=t.x,o=t.y,i=e.offsets.popper,a=A(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var l,u,s=void 0===a?t.gpuAcceleration:a,c=T(h(e.instance.popper)),f={position:i.position},p={left:n(i.left),top:n(i.top),bottom:n(i.bottom),right:n(i.right)},d="bottom"===r?"top":"bottom",m="right"===o?"left":"right",g=I("transform");if(u="bottom"==d?-c.height+p.bottom:p.top,l="right"==m?-c.width+p.right:p.left,s&&g)f[g]="translate3d(".concat(l,"px, ").concat(u,"px, 0)"),f[d]=0,f[m]=0,f.willChange="transform";else{var v="bottom"==d?-1:1,y="right"==m?-1:1;f[d]=u*v,f[m]=l*y,f.willChange="".concat(d,", ").concat(m)}var b={"x-placement":e.placement};return e.attributes=x({},b,e.attributes),e.styles=x({},f,e.styles),e.arrowStyles=x({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return F(e.instance.popper,e.styles),function(e,t){Object.keys(t).forEach(function(n){!1===t[n]?e.removeAttribute(n):e.setAttribute(n,t[n])})}(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&F(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=O(0,t,e),a=k(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),F(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=s(this.update.bind(this)),this.options=x({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t.jquery?t[0]:t,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(x({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=x({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return x({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&c(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}var n,r,o;return n=e,(r=[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=O(this.state,this.popper,this.reference),e.placement=k(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=j(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=D(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,L(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[I("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=R(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return M.call(this)}}])&&t(n.prototype,r),o&&t(n,o),e}();Q.Utils=("undefined"==typeof window?e:window).PopperUtils,Q.placements=U,Q.Defaults=V}).call(this,n(4))},function(e,t,n){(function(r){var o,i,a;function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */!function(r,u){"object"==l(t)&&void 0!==e?u(t,n(1)):(i=[t,n(1)],void 0===(a="function"==typeof(o=u)?o.apply(t,i):o)||(e.exports=a))}(0,function(e,t){"use strict";function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){var r,o,i;r=e,i=n[o=t],o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i})}return e}t=t&&t.hasOwnProperty("default")?t.default:t;var a="transitionend";var u={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var n=t(e).css("transition-duration"),r=t(e).css("transition-delay"),o=parseFloat(n),i=parseFloat(r);return o||i?(n=n.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(n)+parseFloat(r))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(a)},supportsTransitionEnd:function(){return Boolean(a)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r],i=t[r],a=i&&u.isElement(i)?"element":(l=i,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+o+'".')}var l},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"!=typeof e.getRootNode)return e instanceof ShadowRoot?e:e.parentNode?u.findShadowRoot(e.parentNode):null;var t=e.getRootNode();return t instanceof ShadowRoot?t:null}};t.fn.emulateTransitionEnd=function(e){var n=this,r=!1;return t(this).one(u.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||u.triggerTransitionEnd(n)},e),this},t.event.special[u.TRANSITION_END]={bindType:a,delegateType:a,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var s="alert",c="bs.alert",f="."+c,p=t.fn[s],d={CLOSE:"close"+f,CLOSED:"closed"+f,CLICK_DATA_API:"click"+f+".data-api"},h=function(){function e(e){this._element=e}var n=e.prototype;return n.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},n.dispose=function(){t.removeData(this._element,c),this._element=null},n._getRootElement=function(e){var n=u.getSelectorFromElement(e),r=!1;return n&&(r=document.querySelector(n)),r||(r=t(e).closest(".alert")[0]),r},n._triggerCloseEvent=function(e){var n=t.Event(d.CLOSE);return t(e).trigger(n),n},n._removeElement=function(e){var n=this;if(t(e).removeClass("show"),t(e).hasClass("fade")){var r=u.getTransitionDurationFromElement(e);t(e).one(u.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(r)}else this._destroyElement(e)},n._destroyElement=function(e){t(e).detach().trigger(d.CLOSED).remove()},e._jQueryInterface=function(n){return this.each(function(){var r=t(this),o=r.data(c);o||(o=new e(this),r.data(c,o)),"close"===n&&o[n](this)})},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),e}();t(document).on(d.CLICK_DATA_API,'[data-dismiss="alert"]',h._handleDismiss(new h)),t.fn[s]=h._jQueryInterface,t.fn[s].Constructor=h,t.fn[s].noConflict=function(){return t.fn[s]=p,h._jQueryInterface};var m="button",g="bs.button",v="."+g,y=".data-api",b=t.fn[m],_="active",w='[data-toggle^="button"]',x=".btn",E={CLICK_DATA_API:"click"+v+y,FOCUS_BLUR_DATA_API:"focus"+v+y+" blur"+v+y},T=function(){function e(e){this._element=e}var n=e.prototype;return n.toggle=function(){var e=!0,n=!0,r=t(this._element).closest('[data-toggle="buttons"]')[0];if(r){var o=this._element.querySelector('input:not([type="hidden"])');if(o){if("radio"===o.type)if(o.checked&&this._element.classList.contains(_))e=!1;else{var i=r.querySelector(".active");i&&t(i).removeClass(_)}if(e){if(o.hasAttribute("disabled")||r.hasAttribute("disabled")||o.classList.contains("disabled")||r.classList.contains("disabled"))return;o.checked=!this._element.classList.contains(_),t(o).trigger("change")}o.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(_)),e&&t(this._element).toggleClass(_)},n.dispose=function(){t.removeData(this._element,g),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(g);r||(r=new e(this),t(this).data(g,r)),"toggle"===n&&r[n]()})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),e}();t(document).on(E.CLICK_DATA_API,w,function(e){e.preventDefault();var n=e.target;t(n).hasClass("btn")||(n=t(n).closest(x)),T._jQueryInterface.call(t(n),"toggle")}).on(E.FOCUS_BLUR_DATA_API,w,function(e){var n=t(e.target).closest(x)[0];t(n).toggleClass("focus",/^focus(in)?$/.test(e.type))}),t.fn[m]=T._jQueryInterface,t.fn[m].Constructor=T,t.fn[m].noConflict=function(){return t.fn[m]=b,T._jQueryInterface};var S="carousel",C="bs.carousel",k="."+C,O=".data-api",P=t.fn[S],N={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},j={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},A="next",D="prev",L={SLIDE:"slide"+k,SLID:"slid"+k,KEYDOWN:"keydown"+k,MOUSEENTER:"mouseenter"+k,MOUSELEAVE:"mouseleave"+k,TOUCHSTART:"touchstart"+k,TOUCHMOVE:"touchmove"+k,TOUCHEND:"touchend"+k,POINTERDOWN:"pointerdown"+k,POINTERUP:"pointerup"+k,DRAG_START:"dragstart"+k,LOAD_DATA_API:"load"+k+O,CLICK_DATA_API:"click"+k+O},I="active",R=".active.carousel-item",M=".carousel-indicators",q={TOUCH:"touch",PEN:"pen"},F=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(M),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var n=e.prototype;return n.next=function(){this._isSliding||this._slide(A)},n.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(D)},n.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(e){var n=this;this._activeElement=this._element.querySelector(R);var r=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)t(this._element).one(L.SLID,function(){return n.to(e)});else{if(r===e)return this.pause(),void this.cycle();var o=r<e?A:D;this._slide(o,this._items[e])}},n.dispose=function(){t(this._element).off(k),t.removeData(this._element,C),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(e){return e=i({},N,e),u.typeCheckConfig(S,e,j),e},n._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;0<t&&this.prev(),t<0&&this.next()}},n._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(L.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&t(this._element).on(L.MOUSEENTER,function(t){return e.pause(t)}).on(L.MOUSELEAVE,function(t){return e.cycle(t)}),this._config.touch&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var n=function(t){e._pointerEvent&&q[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},r=function(t){e._pointerEvent&&q[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval))};t(this._element.querySelectorAll(".carousel-item img")).on(L.DRAG_START,function(e){return e.preventDefault()}),this._pointerEvent?(t(this._element).on(L.POINTERDOWN,function(e){return n(e)}),t(this._element).on(L.POINTERUP,function(e){return r(e)}),this._element.classList.add("pointer-event")):(t(this._element).on(L.TOUCHSTART,function(e){return n(e)}),t(this._element).on(L.TOUCHMOVE,function(t){var n;(n=t).originalEvent.touches&&1<n.originalEvent.touches.length?e.touchDeltaX=0:e.touchDeltaX=n.originalEvent.touches[0].clientX-e.touchStartX}),t(this._element).on(L.TOUCHEND,function(e){return r(e)}))}},n._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},n._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(e)},n._getItemByDirection=function(e,t){var n=e===A,r=e===D,o=this._getItemIndex(t),i=this._items.length-1;if((r&&0===o||n&&o===i)&&!this._config.wrap)return t;var a=(o+(e===D?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},n._triggerSlideEvent=function(e,n){var r=this._getItemIndex(e),o=this._getItemIndex(this._element.querySelector(R)),i=t.Event(L.SLIDE,{relatedTarget:e,direction:n,from:o,to:r});return t(this._element).trigger(i),i},n._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));t(n).removeClass(I);var r=this._indicatorsElement.children[this._getItemIndex(e)];r&&t(r).addClass(I)}},n._slide=function(e,n){var r,o,i,a=this,l=this._element.querySelector(R),s=this._getItemIndex(l),c=n||l&&this._getItemByDirection(e,l),f=this._getItemIndex(c),p=Boolean(this._interval);if(i=e===A?(r="carousel-item-left",o="carousel-item-next","left"):(r="carousel-item-right",o="carousel-item-prev","right"),c&&t(c).hasClass(I))this._isSliding=!1;else if(!this._triggerSlideEvent(c,i).isDefaultPrevented()&&l&&c){this._isSliding=!0,p&&this.pause(),this._setActiveIndicatorElement(c);var d=t.Event(L.SLID,{relatedTarget:c,direction:i,from:s,to:f});if(t(this._element).hasClass("slide")){t(c).addClass(o),u.reflow(c),t(l).addClass(r),t(c).addClass(r);var h=parseInt(c.getAttribute("data-interval"),10);this._config.interval=h?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,h):this._config.defaultInterval||this._config.interval;var m=u.getTransitionDurationFromElement(l);t(l).one(u.TRANSITION_END,function(){t(c).removeClass(r+" "+o).addClass(I),t(l).removeClass(I+" "+o+" "+r),a._isSliding=!1,setTimeout(function(){return t(a._element).trigger(d)},0)}).emulateTransitionEnd(m)}else t(l).removeClass(I),t(c).addClass(I),this._isSliding=!1,t(this._element).trigger(d);p&&this.cycle()}},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(C),o=i({},N,t(this).data());"object"==l(n)&&(o=i({},o,n));var a="string"==typeof n?n:o.slide;if(r||(r=new e(this,o),t(this).data(C,r)),"number"==typeof n)r.to(n);else if("string"==typeof a){if(void 0===r[a])throw new TypeError('No method named "'+a+'"');r[a]()}else o.interval&&o.ride&&(r.pause(),r.cycle())})},e._dataApiClickHandler=function(n){var r=u.getSelectorFromElement(this);if(r){var o=t(r)[0];if(o&&t(o).hasClass("carousel")){var a=i({},t(o).data(),t(this).data()),l=this.getAttribute("data-slide-to");l&&(a.interval=!1),e._jQueryInterface.call(t(o),a),l&&t(o).data(C).to(l),n.preventDefault()}}},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return N}}]),e}();t(document).on(L.CLICK_DATA_API,"[data-slide], [data-slide-to]",F._dataApiClickHandler),t(window).on(L.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),n=0,r=e.length;n<r;n++){var o=t(e[n]);F._jQueryInterface.call(o,o.data())}}),t.fn[S]=F._jQueryInterface,t.fn[S].Constructor=F,t.fn[S].noConflict=function(){return t.fn[S]=P,F._jQueryInterface};var H="collapse",U="bs.collapse",W="."+U,B=t.fn[H],z={toggle:!0,parent:""},$={toggle:"boolean",parent:"(string|element)"},V={SHOW:"show"+W,SHOWN:"shown"+W,HIDE:"hide"+W,HIDDEN:"hidden"+W,CLICK_DATA_API:"click"+W+".data-api"},Q="show",K="collapse",Y="collapsing",X="collapsed",G='[data-toggle="collapse"]',J=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(G)),r=0,o=n.length;r<o;r++){var i=n[r],a=u.getSelectorFromElement(i),l=[].slice.call(document.querySelectorAll(a)).filter(function(t){return t===e});null!==a&&0<l.length&&(this._selector=a,this._triggerArray.push(i))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var n=e.prototype;return n.toggle=function(){t(this._element).hasClass(Q)?this.hide():this.show()},n.show=function(){var n,r,o=this;if(!(this._isTransitioning||t(this._element).hasClass(Q)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter(function(e){return"string"==typeof o._config.parent?e.getAttribute("data-parent")===o._config.parent:e.classList.contains(K)})).length&&(n=null),n&&(r=t(n).not(this._selector).data(U))&&r._isTransitioning))){var i=t.Event(V.SHOW);if(t(this._element).trigger(i),!i.isDefaultPrevented()){n&&(e._jQueryInterface.call(t(n).not(this._selector),"hide"),r||t(n).data(U,null));var a=this._getDimension();t(this._element).removeClass(K).addClass(Y),this._element.style[a]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(X).attr("aria-expanded",!0),this.setTransitioning(!0);var l="scroll"+(a[0].toUpperCase()+a.slice(1)),s=u.getTransitionDurationFromElement(this._element);t(this._element).one(u.TRANSITION_END,function(){t(o._element).removeClass(Y).addClass(K).addClass(Q),o._element.style[a]="",o.setTransitioning(!1),t(o._element).trigger(V.SHOWN)}).emulateTransitionEnd(s),this._element.style[a]=this._element[l]+"px"}}},n.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(Q)){var n=t.Event(V.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",u.reflow(this._element),t(this._element).addClass(Y).removeClass(K).removeClass(Q);var o=this._triggerArray.length;if(0<o)for(var i=0;i<o;i++){var a=this._triggerArray[i],l=u.getSelectorFromElement(a);null!==l&&(t([].slice.call(document.querySelectorAll(l))).hasClass(Q)||t(a).addClass(X).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[r]="";var s=u.getTransitionDurationFromElement(this._element);t(this._element).one(u.TRANSITION_END,function(){e.setTransitioning(!1),t(e._element).removeClass(Y).addClass(K).trigger(V.HIDDEN)}).emulateTransitionEnd(s)}}},n.setTransitioning=function(e){this._isTransitioning=e},n.dispose=function(){t.removeData(this._element,U),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(e){return(e=i({},z,e)).toggle=Boolean(e.toggle),u.typeCheckConfig(H,e,$),e},n._getDimension=function(){return t(this._element).hasClass("width")?"width":"height"},n._getParent=function(){var n,r=this;u.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(n.querySelectorAll(o));return t(i).each(function(t,n){r._addAriaAndCollapsedClass(e._getTargetFromElement(n),[n])}),n},n._addAriaAndCollapsedClass=function(e,n){var r=t(e).hasClass(Q);n.length&&t(n).toggleClass(X,!r).attr("aria-expanded",r)},e._getTargetFromElement=function(e){var t=u.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(n){return this.each(function(){var r=t(this),o=r.data(U),a=i({},z,r.data(),"object"==l(n)&&n?n:{});if(!o&&a.toggle&&/show|hide/.test(n)&&(a.toggle=!1),o||(o=new e(this,a),r.data(U,o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return z}}]),e}();t(document).on(V.CLICK_DATA_API,G,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=t(this),r=u.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(r));t(o).each(function(){var e=t(this),r=e.data(U)?"toggle":n.data();J._jQueryInterface.call(e,r)})}),t.fn[H]=J._jQueryInterface,t.fn[H].Constructor=J,t.fn[H].noConflict=function(){return t.fn[H]=B,J._jQueryInterface};for(var Z="undefined"!=typeof window&&"undefined"!=typeof document,ee=["Edge","Trident","Firefox"],te=0,ne=0;ne<ee.length;ne+=1)if(Z&&0<=navigator.userAgent.indexOf(ee[ne])){te=1;break}var re=Z&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},te))}};function oe(e){return e&&"[object Function]"==={}.toString.call(e)}function ie(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function ae(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function le(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=ie(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:le(ae(e))}var ue=Z&&!(!window.MSInputMethodContext||!document.documentMode),se=Z&&/MSIE 10/.test(navigator.userAgent);function ce(e){return 11===e?ue:10===e?se:ue||se}function fe(e){if(!e)return document.documentElement;for(var t=ce(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===ie(n,"position")?fe(n):n:e?e.ownerDocument.documentElement:document.documentElement}function pe(e){return null!==e.parentNode?pe(e.parentNode):e}function de(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,l,u=i.commonAncestorContainer;if(e!==u&&t!==u||r.contains(o))return"BODY"===(l=(a=u).nodeName)||"HTML"!==l&&fe(a.firstElementChild)!==a?fe(u):u;var s=pe(e);return s.host?de(s.host,t):de(e,pe(t).host)}function he(e){var t="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"!==n&&"HTML"!==n)return e[t];var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}function me(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function ge(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],ce(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function ve(e){var t=e.body,n=e.documentElement,r=ce(10)&&getComputedStyle(n);return{height:ge("Height",t,n,r),width:ge("Width",t,n,r)}}var ye=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),be=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},_e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function we(e){return _e({},e,{right:e.left+e.width,bottom:e.top+e.height})}function xe(e){var t={};try{if(ce(10)){t=e.getBoundingClientRect();var n=he(e,"top"),r=he(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?ve(e.ownerDocument):{},a=i.width||e.clientWidth||o.right-o.left,l=i.height||e.clientHeight||o.bottom-o.top,u=e.offsetWidth-a,s=e.offsetHeight-l;if(u||s){var c=ie(e);u-=me(c,"x"),s-=me(c,"y"),o.width-=u,o.height-=s}return we(o)}function Ee(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=ce(10),o="HTML"===t.nodeName,i=xe(e),a=xe(t),l=le(e),u=ie(t),s=parseFloat(u.borderTopWidth,10),c=parseFloat(u.borderLeftWidth,10);n&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f=we({top:i.top-a.top-s,left:i.left-a.left-c,width:i.width,height:i.height});if(f.marginTop=0,f.marginLeft=0,!r&&o){var p=parseFloat(u.marginTop,10),d=parseFloat(u.marginLeft,10);f.top-=s-p,f.bottom-=s-p,f.left-=c-d,f.right-=c-d,f.marginTop=p,f.marginLeft=d}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(f=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=he(t,"top"),o=he(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(f,t)),f}function Te(e){if(!e||!e.parentElement||ce())return document.documentElement;for(var t=e.parentElement;t&&"none"===ie(t,"transform");)t=t.parentElement;return t||document.documentElement}function Se(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?Te(e):de(e,t);if("viewport"===r)i=function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=Ee(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:he(n),l=t?0:he(n,"left");return we({top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:i})}(a,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=le(ae(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var u=Ee(l,a,o);if("HTML"!==l.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===ie(t,"position"))return!0;var r=ae(t);return!!r&&e(r)}(a))i=u;else{var s=ve(e.ownerDocument),c=s.height,f=s.width;i.top+=u.top-u.marginTop,i.bottom=c+u.top,i.left+=u.left-u.marginLeft,i.right=f+u.left}}var p="number"==typeof(n=n||0);return i.left+=p?n:n.left||0,i.top+=p?n:n.top||0,i.right-=p?n:n.right||0,i.bottom-=p?n:n.bottom||0,i}function Ce(e,t,n,r,o){var i=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=Se(n,r,i,o),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},u=Object.keys(l).map(function(e){return _e({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),s=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=0<s.length?s[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function ke(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return Ee(n,r?Te(t):de(t,n),r)}function Oe(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function Pe(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function Ne(e,t,n){n=n.split("-")[0];var r=Oe(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",l=i?"left":"top",u=i?"height":"width",s=i?"width":"height";return o[a]=t[a]+t[u]/2-r[u]/2,o[l]=n===l?t[l]-r[s]:t[Pe(l)],o}function je(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function Ae(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=je(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&oe(n)&&(t.offsets.popper=we(t.offsets.popper),t.offsets.reference=we(t.offsets.reference),t=n(t,e))}),t}function De(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function Le(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function Ie(e){var t=e.ownerDocument;return t?t.defaultView:window}function Re(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Me(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Re(t[n])&&(r="px"),e.style[n]=t[n]+r})}var qe=Z&&/Firefox/i.test(navigator.userAgent);function Fe(e,t,n){var r=je(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var He=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Ue=He.slice(3);function We(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=Ue.indexOf(e),r=Ue.slice(n+1).concat(Ue.slice(0,n));return t?r.reverse():r}var Be={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,l=-1!==["bottom","top"].indexOf(n),u=l?"left":"top",s=l?"width":"height",c={start:be({},u,i[u]),end:be({},u,i[u]+i[s]-a[s])};e.offsets.popper=_e({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n,r=t.offset,o=e.placement,i=e.offsets,a=i.popper,l=i.reference,u=o.split("-")[0];return n=Re(+r)?[+r,0]:function(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(je(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,s=-1!==l?[a.slice(0,l).concat([a[l].split(u)[0]]),[a[l].split(u)[1]].concat(a.slice(l+1))]:[a];return(s=s.map(function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return e;if(0!==a.indexOf("%"))return"vh"!==a&&"vw"!==a?i:("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return we(l)[t]/100*i}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){Re(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}(r,a,l,u),"left"===u?(a.top+=n[0],a.left-=n[1]):"right"===u?(a.top+=n[0],a.left+=n[1]):"top"===u?(a.left+=n[0],a.top-=n[1]):"bottom"===u&&(a.left+=n[0],a.top+=n[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||fe(e.instance.popper);e.instance.reference===n&&(n=fe(n));var r=Le("transform"),o=e.instance.popper.style,i=o.top,a=o.left,l=o[r];o.top="",o.left="",o[r]="";var u=Se(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=l,t.boundaries=u;var s=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),be({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),be({},n,r)}};return s.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=_e({},c,f[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),l=a?"right":"bottom",u=a?"left":"top",s=a?"width":"height";return n[l]<i(r[u])&&(e.offsets.popper[u]=i(r[u])-n[s]),n[u]>i(r[l])&&(e.offsets.popper[u]=i(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Fe(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,a=i.popper,l=i.reference,u=-1!==["left","right"].indexOf(o),s=u?"height":"width",c=u?"Top":"Left",f=c.toLowerCase(),p=u?"left":"top",d=u?"bottom":"right",h=Oe(r)[s];l[d]-h<a[f]&&(e.offsets.popper[f]-=a[f]-(l[d]-h)),l[f]+h>a[d]&&(e.offsets.popper[f]+=l[f]+h-a[d]),e.offsets.popper=we(e.offsets.popper);var m=l[f]+l[s]/2-h/2,g=ie(e.instance.popper),v=parseFloat(g["margin"+c],10),y=parseFloat(g["border"+c+"Width"],10),b=m-e.offsets.popper[f]-v-y;return b=Math.max(Math.min(a[s]-h,b),0),e.arrowElement=r,e.offsets.arrow=(be(n={},f,Math.round(b)),be(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(De(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=Se(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=Pe(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case"flip":a=[r,o];break;case"clockwise":a=We(r);break;case"counterclockwise":a=We(r,!0);break;default:a=t.behavior}return a.forEach(function(l,u){if(r!==l||a.length===u+1)return e;r=e.placement.split("-")[0],o=Pe(r);var s,c=e.offsets.popper,f=e.offsets.reference,p=Math.floor,d="left"===r&&p(c.right)>p(f.left)||"right"===r&&p(c.left)<p(f.right)||"top"===r&&p(c.bottom)>p(f.top)||"bottom"===r&&p(c.top)<p(f.bottom),h=p(c.left)<p(n.left),m=p(c.right)>p(n.right),g=p(c.top)<p(n.top),v=p(c.bottom)>p(n.bottom),y="left"===r&&h||"right"===r&&m||"top"===r&&g||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),_=!!t.flipVariations&&(b&&"start"===i&&h||b&&"end"===i&&m||!b&&"start"===i&&g||!b&&"end"===i&&v);(d||y||_)&&(e.flipped=!0,(d||y)&&(r=a[u+1]),_&&(i="end"===(s=i)?"start":"start"===s?"end":s),e.placement=r+(i?"-"+i:""),e.offsets.popper=_e({},e.offsets.popper,Ne(e.instance.popper,e.offsets.reference,e.placement)),e=Ae(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(l?o[a?"width":"height"]:0),e.placement=Pe(t),e.offsets.popper=we(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Fe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=je(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=je(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a,l,u,s,c,f,p,d,h,m,g,v,y,b,_,w,x=void 0!==i?i:t.gpuAcceleration,E=fe(e.instance.popper),T=xe(E),S={position:o.position},C=(a=e,l=window.devicePixelRatio<2||!qe,s=(u=a.offsets).popper,c=u.reference,f=Math.round,p=Math.floor,d=function(e){return e},h=f(c.width),m=f(s.width),g=-1!==["left","right"].indexOf(a.placement),v=-1!==a.placement.indexOf("-"),b=l?f:d,{left:(y=l?g||v||h%2==m%2?f:p:d)(h%2==1&&m%2==1&&!v&&l?s.left-1:s.left),top:b(s.top),bottom:b(s.bottom),right:y(s.right)}),k="bottom"===n?"top":"bottom",O="right"===r?"left":"right",P=Le("transform");if(w="bottom"===k?"HTML"===E.nodeName?-E.clientHeight+C.bottom:-T.height+C.bottom:C.top,_="right"===O?"HTML"===E.nodeName?-E.clientWidth+C.right:-T.width+C.right:C.left,x&&P)S[P]="translate3d("+_+"px, "+w+"px, 0)",S[k]=0,S[O]=0,S.willChange="transform";else{var N="bottom"===k?-1:1,j="right"===O?-1:1;S[k]=w*N,S[O]=_*j,S.willChange=k+", "+O}var A={"x-placement":e.placement};return e.attributes=_e({},A,e.attributes),e.styles=_e({},S,e.styles),e.arrowStyles=_e({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return Me(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&Me(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=ke(o,t,e,n.positionFixed),a=Ce(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),Me(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ze=function(){function e(t,n){var r=this,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};!function(t,n){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=re(this.update.bind(this)),this.options=_e({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_e({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=_e({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return _e({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&oe(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return ye(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=ke(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=Ce(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=Ne(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=Ae(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,De(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Le("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=function(e,t,n,r){n.updateBound=r,Ie(e).addEventListener("resize",n.updateBound,{passive:!0});var o=le(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),i||e(le(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return function(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,Ie(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}.call(this)}}]),e}();ze.Utils=("undefined"!=typeof window?window:r).PopperUtils,ze.placements=He,ze.Defaults=Be;var $e="dropdown",Ve="bs.dropdown",Qe="."+Ve,Ke=".data-api",Ye=t.fn[$e],Xe=new RegExp("38|40|27"),Ge={HIDE:"hide"+Qe,HIDDEN:"hidden"+Qe,SHOW:"show"+Qe,SHOWN:"shown"+Qe,CLICK:"click"+Qe,CLICK_DATA_API:"click"+Qe+Ke,KEYDOWN_DATA_API:"keydown"+Qe+Ke,KEYUP_DATA_API:"keyup"+Qe+Ke},Je="disabled",Ze="show",et="dropdown-menu-right",tt='[data-toggle="dropdown"]',nt=".dropdown-menu",rt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},ot={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},it=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var n=e.prototype;return n.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(Je)){var n=e._getParentFromElement(this._element),r=t(this._menu).hasClass(Ze);if(e._clearMenus(),!r){var o={relatedTarget:this._element},i=t.Event(Ge.SHOW,o);if(t(n).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===ze)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var a=this._element;"parent"===this._config.reference?a=n:u.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(n).addClass("position-static"),this._popper=new ze(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(n).closest(".navbar-nav").length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(Ze),t(n).toggleClass(Ze).trigger(t.Event(Ge.SHOWN,o))}}}},n.show=function(){if(!(this._element.disabled||t(this._element).hasClass(Je)||t(this._menu).hasClass(Ze))){var n={relatedTarget:this._element},r=t.Event(Ge.SHOW,n),o=e._getParentFromElement(this._element);t(o).trigger(r),r.isDefaultPrevented()||(t(this._menu).toggleClass(Ze),t(o).toggleClass(Ze).trigger(t.Event(Ge.SHOWN,n)))}},n.hide=function(){if(!this._element.disabled&&!t(this._element).hasClass(Je)&&t(this._menu).hasClass(Ze)){var n={relatedTarget:this._element},r=t.Event(Ge.HIDE,n),o=e._getParentFromElement(this._element);t(o).trigger(r),r.isDefaultPrevented()||(t(this._menu).toggleClass(Ze),t(o).toggleClass(Ze).trigger(t.Event(Ge.HIDDEN,n)))}},n.dispose=function(){t.removeData(this._element,Ve),t(this._element).off(Qe),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},n.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},n._addEventListeners=function(){var e=this;t(this._element).on(Ge.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},n._getConfig=function(e){return e=i({},this.constructor.Default,t(this._element).data(),e),u.typeCheckConfig($e,e,this.constructor.DefaultType),e},n._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(nt))}return this._menu},n._getPlacement=function(){var e=t(this._element.parentNode),n="bottom-start";return e.hasClass("dropup")?(n="top-start",t(this._menu).hasClass(et)&&(n="top-end")):e.hasClass("dropright")?n="right-start":e.hasClass("dropleft")?n="left-start":t(this._menu).hasClass(et)&&(n="bottom-end"),n},n._detectNavbar=function(){return 0<t(this._element).closest(".navbar").length},n._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=i({},t.offsets,e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},n._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(Ve);if(r||(r=new e(this,"object"==l(n)?n:null),t(this).data(Ve,r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},e._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var r=[].slice.call(document.querySelectorAll(tt)),o=0,i=r.length;o<i;o++){var a=e._getParentFromElement(r[o]),l=t(r[o]).data(Ve),u={relatedTarget:r[o]};if(n&&"click"===n.type&&(u.clickEvent=n),l){var s=l._menu;if(t(a).hasClass(Ze)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&t.contains(a,n.target))){var c=t.Event(Ge.HIDE,u);t(a).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),r[o].setAttribute("aria-expanded","false"),t(s).removeClass(Ze),t(a).removeClass(Ze).trigger(t.Event(Ge.HIDDEN,u)))}}}},e._getParentFromElement=function(e){var t,n=u.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},e._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||t(n.target).closest(nt).length)):Xe.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!t(this).hasClass(Je))){var r=e._getParentFromElement(this),o=t(r).hasClass(Ze);if(o&&(!o||27!==n.which&&32!==n.which)){var i=[].slice.call(r.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"));if(0!==i.length){var a=i.indexOf(n.target);38===n.which&&0<a&&a--,40===n.which&&a<i.length-1&&a++,a<0&&(a=0),i[a].focus()}}else{if(27===n.which){var l=r.querySelector(tt);t(l).trigger("focus")}t(this).trigger("click")}}},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return rt}},{key:"DefaultType",get:function(){return ot}}]),e}();t(document).on(Ge.KEYDOWN_DATA_API,tt,it._dataApiKeydownHandler).on(Ge.KEYDOWN_DATA_API,nt,it._dataApiKeydownHandler).on(Ge.CLICK_DATA_API+" "+Ge.KEYUP_DATA_API,it._clearMenus).on(Ge.CLICK_DATA_API,tt,function(e){e.preventDefault(),e.stopPropagation(),it._jQueryInterface.call(t(this),"toggle")}).on(Ge.CLICK_DATA_API,".dropdown form",function(e){e.stopPropagation()}),t.fn[$e]=it._jQueryInterface,t.fn[$e].Constructor=it,t.fn[$e].noConflict=function(){return t.fn[$e]=Ye,it._jQueryInterface};var at="modal",lt="bs.modal",ut="."+lt,st=t.fn[at],ct={backdrop:!0,keyboard:!0,focus:!0,show:!0},ft={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},pt={HIDE:"hide"+ut,HIDDEN:"hidden"+ut,SHOW:"show"+ut,SHOWN:"shown"+ut,FOCUSIN:"focusin"+ut,RESIZE:"resize"+ut,CLICK_DISMISS:"click.dismiss"+ut,KEYDOWN_DISMISS:"keydown.dismiss"+ut,MOUSEUP_DISMISS:"mouseup.dismiss"+ut,MOUSEDOWN_DISMISS:"mousedown.dismiss"+ut,CLICK_DATA_API:"click"+ut+".data-api"},dt="modal-open",ht="fade",mt="show",gt=".modal-dialog",vt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",yt=".sticky-top",bt=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(gt),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var n=e.prototype;return n.toggle=function(e){return this._isShown?this.hide():this.show(e)},n.show=function(e){var n=this;if(!this._isShown&&!this._isTransitioning){t(this._element).hasClass(ht)&&(this._isTransitioning=!0);var r=t.Event(pt.SHOW,{relatedTarget:e});t(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(pt.CLICK_DISMISS,'[data-dismiss="modal"]',function(e){return n.hide(e)}),t(this._dialog).on(pt.MOUSEDOWN_DISMISS,function(){t(n._element).one(pt.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},n.hide=function(e){var n=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var r=t.Event(pt.HIDE);if(t(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var o=t(this._element).hasClass(ht);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(pt.FOCUSIN),t(this._element).removeClass(mt),t(this._element).off(pt.CLICK_DISMISS),t(this._dialog).off(pt.MOUSEDOWN_DISMISS),o){var i=u.getTransitionDurationFromElement(this._element);t(this._element).one(u.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(i)}else this._hideModal()}}},n.dispose=function(){[window,this._element,this._dialog].forEach(function(e){return t(e).off(ut)}),t(document).off(pt.FOCUSIN),t.removeData(this._element,lt),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(e){return e=i({},ct,e),u.typeCheckConfig(at,e,ft),e},n._showElement=function(e){var n=this,r=t(this._element).hasClass(ht);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),t(this._dialog).hasClass("modal-dialog-scrollable")?this._dialog.querySelector(".modal-body").scrollTop=0:this._element.scrollTop=0,r&&u.reflow(this._element),t(this._element).addClass(mt),this._config.focus&&this._enforceFocus();var o=t.Event(pt.SHOWN,{relatedTarget:e}),i=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(o)};if(r){var a=u.getTransitionDurationFromElement(this._dialog);t(this._dialog).one(u.TRANSITION_END,i).emulateTransitionEnd(a)}else i()},n._enforceFocus=function(){var e=this;t(document).off(pt.FOCUSIN).on(pt.FOCUSIN,function(n){document!==n.target&&e._element!==n.target&&0===t(e._element).has(n.target).length&&e._element.focus()})},n._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(pt.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(pt.KEYDOWN_DISMISS)},n._setResizeEvent=function(){var e=this;this._isShown?t(window).on(pt.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(pt.RESIZE)},n._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(dt),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(pt.HIDDEN)})},n._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},n._showBackdrop=function(e){var n=this,r=t(this._element).hasClass(ht)?ht:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",r&&this._backdrop.classList.add(r),t(this._backdrop).appendTo(document.body),t(this._element).on(pt.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),r&&u.reflow(this._backdrop),t(this._backdrop).addClass(mt),!e)return;if(!r)return void e();var o=u.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(u.TRANSITION_END,e).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(mt);var i=function(){n._removeBackdrop(),e&&e()};if(t(this._element).hasClass(ht)){var a=u.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(u.TRANSITION_END,i).emulateTransitionEnd(a)}else i()}else e&&e()},n._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(vt)),r=[].slice.call(document.querySelectorAll(yt));t(n).each(function(n,r){var o=r.style.paddingRight,i=t(r).css("padding-right");t(r).data("padding-right",o).css("padding-right",parseFloat(i)+e._scrollbarWidth+"px")}),t(r).each(function(n,r){var o=r.style.marginRight,i=t(r).css("margin-right");t(r).data("margin-right",o).css("margin-right",parseFloat(i)-e._scrollbarWidth+"px")});var o=document.body.style.paddingRight,i=t(document.body).css("padding-right");t(document.body).data("padding-right",o).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}t(document.body).addClass(dt)},n._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(vt));t(e).each(function(e,n){var r=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=r||""});var n=[].slice.call(document.querySelectorAll(""+yt));t(n).each(function(e,n){var r=t(n).data("margin-right");void 0!==r&&t(n).css("margin-right",r).removeData("margin-right")});var r=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},n._getScrollbarWidth=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(n,r){return this.each(function(){var o=t(this).data(lt),a=i({},ct,t(this).data(),"object"==l(n)&&n?n:{});if(o||(o=new e(this,a),t(this).data(lt,o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n](r)}else a.show&&o.show(r)})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return ct}}]),e}();t(document).on(pt.CLICK_DATA_API,'[data-toggle="modal"]',function(e){var n,r=this,o=u.getSelectorFromElement(this);o&&(n=document.querySelector(o));var a=t(n).data(lt)?"toggle":i({},t(n).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var l=t(n).one(pt.SHOW,function(e){e.isDefaultPrevented()||l.one(pt.HIDDEN,function(){t(r).is(":visible")&&r.focus()})});bt._jQueryInterface.call(t(n),a,this)}),t.fn[at]=bt._jQueryInterface,t.fn[at].Constructor=bt,t.fn[at].noConflict=function(){return t.fn[at]=st,bt._jQueryInterface};var _t=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],wt=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi,xt=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function Et(e,t,n){if(0===e.length)return e;if(n&&"function"==typeof n)return n(e);for(var r=(new window.DOMParser).parseFromString(e,"text/html"),o=Object.keys(t),i=[].slice.call(r.body.querySelectorAll("*")),a=function(e,n){var r=i[e],a=r.nodeName.toLowerCase();if(-1===o.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var l=[].slice.call(r.attributes),u=[].concat(t["*"]||[],t[a]||[]);l.forEach(function(e){(function(e,t){var n=e.nodeName.toLowerCase();if(-1!==t.indexOf(n))return-1===_t.indexOf(n)||Boolean(e.nodeValue.match(wt)||e.nodeValue.match(xt));for(var r=t.filter(function(e){return e instanceof RegExp}),o=0,i=r.length;o<i;o++)if(n.match(r[o]))return!0;return!1})(e,u)||r.removeAttribute(e.nodeName)})},l=0,u=i.length;l<u;l++)a(l);return r.body.innerHTML}var Tt="tooltip",St="bs.tooltip",Ct="."+St,kt=t.fn[Tt],Ot="bs-tooltip",Pt=new RegExp("(^|\\s)"+Ot+"\\S+","g"),Nt=["sanitize","whiteList","sanitizeFn"],jt={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object"},At={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Dt={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]}},Lt="show",It={HIDE:"hide"+Ct,HIDDEN:"hidden"+Ct,SHOW:"show"+Ct,SHOWN:"shown"+Ct,INSERTED:"inserted"+Ct,CLICK:"click"+Ct,FOCUSIN:"focusin"+Ct,FOCUSOUT:"focusout"+Ct,MOUSEENTER:"mouseenter"+Ct,MOUSELEAVE:"mouseleave"+Ct},Rt="fade",Mt="show",qt="hover",Ft="focus",Ht=function(){function e(e,t){if(void 0===ze)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var n=e.prototype;return n.enable=function(){this._isEnabled=!0},n.disable=function(){this._isEnabled=!1},n.toggleEnabled=function(){this._isEnabled=!this._isEnabled},n.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,r=t(e.currentTarget).data(n);r||(r=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(t(this.getTipElement()).hasClass(Mt))return void this._leave(null,this);this._enter(null,this)}},n.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},n.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var n=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(n);var r=u.findShadowRoot(this.element),o=t.contains(null!==r?r:this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!o)return;var i=this.getTipElement(),a=u.getUID(this.constructor.NAME);i.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&t(i).addClass(Rt);var l="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(l);this.addAttachmentClass(s);var c=this._getContainer();t(i).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(i).appendTo(c),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new ze(this.element,i,{placement:s,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}}),t(i).addClass(Mt),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var f=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),"out"===n&&e._leave(null,e)};if(t(this.tip).hasClass(Rt)){var p=u.getTransitionDurationFromElement(this.tip);t(this.tip).one(u.TRANSITION_END,f).emulateTransitionEnd(p)}else f()}},n.hide=function(e){var n=this,r=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),i=function(){n._hoverState!==Lt&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};if(t(this.element).trigger(o),!o.isDefaultPrevented()){if(t(r).removeClass(Mt),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger.click=!1,this._activeTrigger[Ft]=!1,this._activeTrigger[qt]=!1,t(this.tip).hasClass(Rt)){var a=u.getTransitionDurationFromElement(r);t(r).one(u.TRANSITION_END,i).emulateTransitionEnd(a)}else i();this._hoverState=""}},n.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},n.isWithContent=function(){return Boolean(this.getTitle())},n.addAttachmentClass=function(e){t(this.getTipElement()).addClass(Ot+"-"+e)},n.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},n.setContent=function(){var e=this.getTipElement();this.setElementContent(t(e.querySelectorAll(".tooltip-inner")),this.getTitle()),t(e).removeClass(Rt+" "+Mt)},n.setElementContent=function(e,n){"object"!=l(n)||!n.nodeType&&!n.jquery?this.config.html?(this.config.sanitize&&(n=Et(n,this.config.whiteList,this.config.sanitizeFn)),e.html(n)):e.text(n):this.config.html?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text())},n.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},n._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=i({},t.offsets,e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},n._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?t(this.config.container):t(document).find(this.config.container)},n._getAttachment=function(e){return At[e.toUpperCase()]},n._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if("manual"!==n){var r=n===qt?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===qt?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(r,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}}),t(this.element).closest(".modal").on("hide.bs.modal",function(){e.element&&e.hide()}),this.config.selector?this.config=i({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},n._fixTitle=function(){var e=l(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},n._enter=function(e,n){var r=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(r))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(r,n)),e&&(n._activeTrigger["focusin"===e.type?Ft:qt]=!0),t(n.getTipElement()).hasClass(Mt)||n._hoverState===Lt?n._hoverState=Lt:(clearTimeout(n._timeout),n._hoverState=Lt,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===Lt&&n.show()},n.config.delay.show):n.show())},n._leave=function(e,n){var r=this.constructor.DATA_KEY;(n=n||t(e.currentTarget).data(r))||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(r,n)),e&&(n._activeTrigger["focusout"===e.type?Ft:qt]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState="out",n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){"out"===n._hoverState&&n.hide()},n.config.delay.hide):n.hide())},n._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},n._getConfig=function(e){var n=t(this.element).data();return Object.keys(n).forEach(function(e){-1!==Nt.indexOf(e)&&delete n[e]}),"number"==typeof(e=i({},this.constructor.Default,n,"object"==l(e)&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),u.typeCheckConfig(Tt,e,this.constructor.DefaultType),e.sanitize&&(e.template=Et(e.template,e.whiteList,e.sanitizeFn)),e},n._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},n._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(Pt);null!==n&&n.length&&e.removeClass(n.join(""))},n._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},n._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(Rt),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(St),o="object"==l(n)&&n;if((r||!/dispose|hide/.test(n))&&(r||(r=new e(this,o),t(this).data(St,r)),"string"==typeof n)){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Dt}},{key:"NAME",get:function(){return Tt}},{key:"DATA_KEY",get:function(){return St}},{key:"Event",get:function(){return It}},{key:"EVENT_KEY",get:function(){return Ct}},{key:"DefaultType",get:function(){return jt}}]),e}();t.fn[Tt]=Ht._jQueryInterface,t.fn[Tt].Constructor=Ht,t.fn[Tt].noConflict=function(){return t.fn[Tt]=kt,Ht._jQueryInterface};var Ut="popover",Wt="bs.popover",Bt="."+Wt,zt=t.fn[Ut],$t="bs-popover",Vt=new RegExp("(^|\\s)"+$t+"\\S+","g"),Qt=i({},Ht.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Kt=i({},Ht.DefaultType,{content:"(string|element|function)"}),Yt={HIDE:"hide"+Bt,HIDDEN:"hidden"+Bt,SHOW:"show"+Bt,SHOWN:"shown"+Bt,INSERTED:"inserted"+Bt,CLICK:"click"+Bt,FOCUSIN:"focusin"+Bt,FOCUSOUT:"focusout"+Bt,MOUSEENTER:"mouseenter"+Bt,MOUSELEAVE:"mouseleave"+Bt},Xt=function(e){var n,r;function i(){return e.apply(this,arguments)||this}r=e,(n=i).prototype=Object.create(r.prototype),(n.prototype.constructor=n).__proto__=r;var a=i.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(e){t(this.getTipElement()).addClass($t+"-"+e)},a.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},a.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(".popover-header"),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(".popover-body"),n),e.removeClass("fade show")},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(Vt);null!==n&&0<n.length&&e.removeClass(n.join(""))},i._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(Wt),r="object"==l(e)?e:null;if((n||!/dispose|hide/.test(e))&&(n||(n=new i(this,r),t(this).data(Wt,n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return Qt}},{key:"NAME",get:function(){return Ut}},{key:"DATA_KEY",get:function(){return Wt}},{key:"Event",get:function(){return Yt}},{key:"EVENT_KEY",get:function(){return Bt}},{key:"DefaultType",get:function(){return Kt}}]),i}(Ht);t.fn[Ut]=Xt._jQueryInterface,t.fn[Ut].Constructor=Xt,t.fn[Ut].noConflict=function(){return t.fn[Ut]=zt,Xt._jQueryInterface};var Gt="scrollspy",Jt="bs.scrollspy",Zt="."+Jt,en=t.fn[Gt],tn={offset:10,method:"auto",target:""},nn={offset:"number",method:"string",target:"(string|element)"},rn={ACTIVATE:"activate"+Zt,SCROLL:"scroll"+Zt,LOAD_DATA_API:"load"+Zt+".data-api"},on="active",an=".nav, .list-group",ln=".nav-link",un=".list-group-item",sn=".dropdown-item",cn="position",fn=function(){function e(e,n){var r=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+ln+","+this._config.target+" "+un+","+this._config.target+" "+sn,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(rn.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var n=e.prototype;return n.refresh=function(){var e=this,n=this._scrollElement===this._scrollElement.window?"offset":cn,r="auto"===this._config.method?n:this._config.method,o=r===cn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var n,i=u.getSelectorFromElement(e);if(i&&(n=document.querySelector(i)),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[t(n)[r]().top+o,i]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},n.dispose=function(){t.removeData(this._element,Jt),t(this._scrollElement).off(Zt),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(e){if("string"!=typeof(e=i({},tn,"object"==l(e)&&e?e:{})).target){var n=t(e.target).attr("id");n||(n=u.getUID(Gt),t(e.target).attr("id",n)),e.target="#"+n}return u.typeCheckConfig(Gt,e,nn),e},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n<=e){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&e>=this._offsets[o]&&(void 0===this._offsets[o+1]||e<this._offsets[o+1])&&this._activate(this._targets[o])}},n._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",").map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'}),r=t([].slice.call(document.querySelectorAll(n.join(","))));r.hasClass("dropdown-item")?(r.closest(".dropdown").find(".dropdown-toggle").addClass(on),r.addClass(on)):(r.addClass(on),r.parents(an).prev(ln+", "+un).addClass(on),r.parents(an).prev(".nav-item").children(ln).addClass(on)),t(this._scrollElement).trigger(rn.ACTIVATE,{relatedTarget:e})},n._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(e){return e.classList.contains(on)}).forEach(function(e){return e.classList.remove(on)})},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(Jt);if(r||(r=new e(this,"object"==l(n)&&n),t(this).data(Jt,r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"Default",get:function(){return tn}}]),e}();t(window).on(rn.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),n=e.length;n--;){var r=t(e[n]);fn._jQueryInterface.call(r,r.data())}}),t.fn[Gt]=fn._jQueryInterface,t.fn[Gt].Constructor=fn,t.fn[Gt].noConflict=function(){return t.fn[Gt]=en,fn._jQueryInterface};var pn="bs.tab",dn="."+pn,hn=t.fn.tab,mn={HIDE:"hide"+dn,HIDDEN:"hidden"+dn,SHOW:"show"+dn,SHOWN:"shown"+dn,CLICK_DATA_API:"click"+dn+".data-api"},gn="active",vn=".active",yn="> li > .active",bn=function(){function e(e){this._element=e}var n=e.prototype;return n.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(gn)||t(this._element).hasClass("disabled"))){var n,r,o=t(this._element).closest(".nav, .list-group")[0],i=u.getSelectorFromElement(this._element);if(o){var a="UL"===o.nodeName||"OL"===o.nodeName?yn:vn;r=(r=t.makeArray(t(o).find(a)))[r.length-1]}var l=t.Event(mn.HIDE,{relatedTarget:this._element}),s=t.Event(mn.SHOW,{relatedTarget:r});if(r&&t(r).trigger(l),t(this._element).trigger(s),!s.isDefaultPrevented()&&!l.isDefaultPrevented()){i&&(n=document.querySelector(i)),this._activate(this._element,o);var c=function(){var n=t.Event(mn.HIDDEN,{relatedTarget:e._element}),o=t.Event(mn.SHOWN,{relatedTarget:r});t(r).trigger(n),t(e._element).trigger(o)};n?this._activate(n,n.parentNode,c):c()}}},n.dispose=function(){t.removeData(this._element,pn),this._element=null},n._activate=function(e,n,r){var o=this,i=(!n||"UL"!==n.nodeName&&"OL"!==n.nodeName?t(n).children(vn):t(n).find(yn))[0],a=r&&i&&t(i).hasClass("fade"),l=function(){return o._transitionComplete(e,i,r)};if(i&&a){var s=u.getTransitionDurationFromElement(i);t(i).removeClass("show").one(u.TRANSITION_END,l).emulateTransitionEnd(s)}else l()},n._transitionComplete=function(e,n,r){if(n){t(n).removeClass(gn);var o=t(n.parentNode).find("> .dropdown-menu .active")[0];o&&t(o).removeClass(gn),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(gn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),u.reflow(e),e.classList.contains("fade")&&e.classList.add("show"),e.parentNode&&t(e.parentNode).hasClass("dropdown-menu")){var i=t(e).closest(".dropdown")[0];if(i){var a=[].slice.call(i.querySelectorAll(".dropdown-toggle"));t(a).addClass(gn)}e.setAttribute("aria-expanded",!0)}r&&r()},e._jQueryInterface=function(n){return this.each(function(){var r=t(this),o=r.data(pn);if(o||(o=new e(this),r.data(pn,o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}}]),e}();t(document).on(mn.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(e){e.preventDefault(),bn._jQueryInterface.call(t(this),"show")}),t.fn.tab=bn._jQueryInterface,t.fn.tab.Constructor=bn,t.fn.tab.noConflict=function(){return t.fn.tab=hn,bn._jQueryInterface};var _n="toast",wn="bs.toast",xn="."+wn,En=t.fn[_n],Tn={CLICK_DISMISS:"click.dismiss"+xn,HIDE:"hide"+xn,HIDDEN:"hidden"+xn,SHOW:"show"+xn,SHOWN:"shown"+xn},Sn="show",Cn="showing",kn={animation:"boolean",autohide:"boolean",delay:"number"},On={animation:!0,autohide:!0,delay:500},Pn=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var n=e.prototype;return n.show=function(){var e=this;t(this._element).trigger(Tn.SHOW),this._config.animation&&this._element.classList.add("fade");var n=function(){e._element.classList.remove(Cn),e._element.classList.add(Sn),t(e._element).trigger(Tn.SHOWN),e._config.autohide&&e.hide()};if(this._element.classList.remove("hide"),this._element.classList.add(Cn),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);t(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},n.hide=function(e){var n=this;this._element.classList.contains(Sn)&&(t(this._element).trigger(Tn.HIDE),e?this._close():this._timeout=setTimeout(function(){n._close()},this._config.delay))},n.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(Sn)&&this._element.classList.remove(Sn),t(this._element).off(Tn.CLICK_DISMISS),t.removeData(this._element,wn),this._element=null,this._config=null},n._getConfig=function(e){return e=i({},On,t(this._element).data(),"object"==l(e)&&e?e:{}),u.typeCheckConfig(_n,e,this.constructor.DefaultType),e},n._setListeners=function(){var e=this;t(this._element).on(Tn.CLICK_DISMISS,'[data-dismiss="toast"]',function(){return e.hide(!0)})},n._close=function(){var e=this,n=function(){e._element.classList.add("hide"),t(e._element).trigger(Tn.HIDDEN)};if(this._element.classList.remove(Sn),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);t(this._element).one(u.TRANSITION_END,n).emulateTransitionEnd(r)}else n()},e._jQueryInterface=function(n){return this.each(function(){var r=t(this),o=r.data(wn);if(o||(o=new e(this,"object"==l(n)&&n),r.data(wn,o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n](this)}})},o(e,null,[{key:"VERSION",get:function(){return"4.3.1"}},{key:"DefaultType",get:function(){return kn}},{key:"Default",get:function(){return On}}]),e}();t.fn[_n]=Pn._jQueryInterface,t.fn[_n].Constructor=Pn,t.fn[_n].noConflict=function(){return t.fn[_n]=En,Pn._jQueryInterface},function(){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),e.Util=u,e.Alert=h,e.Button=T,e.Carousel=F,e.Collapse=J,e.Dropdown=it,e.Modal=bt,e.Popover=Xt,e.Scrollspy=fn,e.Tab=bn,e.Toast=Pn,e.Tooltip=Ht,Object.defineProperty(e,"__esModule",{value:!0})})}).call(this,n(4))},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(14),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,g=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var T=E.prototype=new x;T.constructor=E,r(T,w.prototype),T.isPureReactComponent=!0;var S={current:null},C={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:C.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var j=/\/+/g,A=[];function D(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+R(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+R(l=t[s],s);u+=e(l,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+R(l,s++),r,o);else"object"===l&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function q(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(j,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(j,"$&/")+"/"),I(e,q,t=D(t,i,r,o)),L(t)}function H(){var e=S.current;return null===e&&y("321"),e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,M,t=D(null,null,t,n)),L(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return N(e)||y("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return H().useCallback(e,t)},useContext:function(e,t){return H().useContext(e,t)},useEffect:function(e,t){return H().useEffect(e,t)},useImperativeHandle:function(e,t,n){return H().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return H().useLayoutEffect(e,t)},useMemo:function(e,t){return H().useMemo(e,t)},useReducer:function(e,t,n){return H().useReducer(e,t,n)},useRef:function(e){return H().useRef(e)},useState:function(e){return H().useState(e)},Fragment:l,StrictMode:u,Suspense:h,createElement:P,cloneElement:function(e,t,n){null==e&&y("267",e);var o=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=C.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!O.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:C,assign:r}},W={default:U},B=W&&U||W;e.exports=B.default||B},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(16),i=n(17);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function p(e,t,n,r,o,i,a,s,c){l=!1,u=null,function(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;y.hasOwnProperty(u)&&a("99",u),y[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&g(s[o],l,u);o=!0}else i.registrationName?(g(i.registrationName,l,u),o=!0):o=!1;o||a("98",r,e)}}}function g(e,t,n){b[e]&&a("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var v=[],y={},b={},_={},w=null,x=null,E=null;function T(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),l){if(l){var m=u;l=!1,u=null}else a("198"),m=void 0;s||(s=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var k=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)T(e,t[r],n[r]);else t&&T(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(k=S(k,e)),e=k,k=null,e&&(C(e,O),k&&a("95"),s))throw e=c,s=!1,c=null,e}var A=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+A,L="__reactEventHandlers$"+A;function I(e){if(e[D])return e[D];for(;!e[D];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[D]).tag||6===e.tag?e:null}function R(e){return!(e=e[D])||5!==e.tag&&6!==e.tag?null:e}function M(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function q(e){return e[L]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function H(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function U(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)H(n[t],"captured",e);for(t=0;t<n.length;t++)H(n[t],"bubbled",e)}}function W(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&W(e._targetInst,null,e)}function z(e){C(e,U)}var $=!("undefined"==typeof window||!window.document||!window.document.createElement);function V(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:V("Animation","AnimationEnd"),animationiteration:V("Animation","AnimationIteration"),animationstart:V("Animation","AnimationStart"),transitionend:V("Transition","TransitionEnd")},K={},Y={};function X(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}$&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var G=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var pe=ue.extend({data:null}),de=ue.extend({data:null}),he=[9,13,27,32],me=$&&"CompositionEvent"in window,ge=null;$&&"documentMode"in document&&(ge=document.documentMode);var ve=$&&"TextEvent"in window&&!ge,ye=$&&(!me||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function xe(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var Se={eventTypes:_e,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=_e.compositionStart;break e;case"compositionend":o=_e.compositionEnd;break e;case"compositionupdate":o=_e.compositionUpdate;break e}o=void 0}else Te?xe(e,n)&&(o=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=_e.compositionStart);return o?(ye&&"ko"!==n.locale&&(Te||o!==_e.compositionStart?o===_e.compositionEnd&&Te&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Te=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),z(o),i=o):i=null,(e=ve?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Te)return"compositionend"===e||!me&&xe(e,t)?(e=ie(),oe=re=ne=null,Te=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(_e.beforeInput,t,n,r)).data=e,z(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,ke=null,Oe=null;function Pe(e){if(e=x(e)){"function"!=typeof Ce&&a("280");var t=w(e.stateNode);Ce(e.stateNode,e.type,t)}}function Ne(e){ke?Oe?Oe.push(e):Oe=[e]:ke=e}function je(){if(ke){var e=ke,t=Oe;if(Oe=ke=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Ae(e,t){return e(t)}function De(e,t,n){return e(t,n)}function Le(){}var Ie=!1;function Re(e,t){if(Ie)return e(t);Ie=!0;try{return Ae(e,t)}finally{Ie=!1,(null!==ke||null!==Oe)&&(Le(),je())}}var Me={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Me[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function He(e){if(!$)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ue(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function We(e){e._valueTracker||(e._valueTracker=function(e){var t=Ue(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ue(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var ze=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;ze.hasOwnProperty("ReactCurrentDispatcher")||(ze.ReactCurrentDispatcher={current:null});var $e=/^(.*)[\\\/]/,Ve="function"==typeof Symbol&&Symbol.for,Qe=Ve?Symbol.for("react.element"):60103,Ke=Ve?Symbol.for("react.portal"):60106,Ye=Ve?Symbol.for("react.fragment"):60107,Xe=Ve?Symbol.for("react.strict_mode"):60108,Ge=Ve?Symbol.for("react.profiler"):60114,Je=Ve?Symbol.for("react.provider"):60109,Ze=Ve?Symbol.for("react.context"):60110,et=Ve?Symbol.for("react.concurrent_mode"):60111,tt=Ve?Symbol.for("react.forward_ref"):60112,nt=Ve?Symbol.for("react.suspense"):60113,rt=Ve?Symbol.for("react.memo"):60115,ot=Ve?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case Ke:return"Portal";case Ge:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=lt(e.type);n=null,r&&(n=lt(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace($e,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(pt,e)||!ct.call(ft,e)&&(st.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function xt(e,t){wt(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ct(e,t,n){return(e=ue.getPooled(St.change,e,t,n)).type="change",Ne(n),z(e),e}var kt=null,Ot=null;function Pt(e){j(e)}function Nt(e){if(Be(M(e)))return e}function jt(e,t){if("change"===e)return t}var At=!1;function Dt(){kt&&(kt.detachEvent("onpropertychange",Lt),Ot=kt=null)}function Lt(e){"value"===e.propertyName&&Nt(Ot)&&Re(Pt,e=Ct(Ot,e,Fe(e)))}function It(e,t,n){"focus"===e?(Dt(),Ot=n,(kt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&Dt()}function Rt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ot)}function Mt(e,t){if("click"===e)return Nt(t)}function qt(e,t){if("input"===e||"change"===e)return Nt(t)}$&&(At=He("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:St,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?M(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=jt:qe(o)?At?i=qt:(i=Rt,a=It):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Mt),i&&(i=i(e,t)))return Ct(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Tt(o,"number",o.value)}},Ht=ue.extend({view:null,detail:null}),Ut={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ut[e])&&!!t[e]}function Bt(){return Wt}var zt=0,$t=0,Vt=!1,Qt=!1,Kt=Ht.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=zt;return zt=e.screenX,Vt?"mousemove"===e.type?e.screenX-t:0:(Vt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Qt?"mousemove"===e.type?e.screenY-t:0:(Qt=!0,0)}}),Yt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Gt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?I(t):null):i=null,i===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,l=Xt.mouseLeave,u=Xt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,l=Xt.pointerLeave,u=Xt.pointerEnter,s="pointer");var c=null==i?o:M(i);if(o=null==t?o:M(t),(e=a.getPooled(l,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=F(a))s++;for(a=0,u=o;u;u=F(u))a++;for(;0<s-a;)t=F(t),s--;for(;0<a-s;)o=F(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=F(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=F(r);for(r=0;r<t.length;r++)W(t[r],"bubbled",e);for(r=i.length;0<r--;)W(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return nn(o),e;if(l===r)return nn(o),t;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Ht.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Ht.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=Ht.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[G,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},yn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),gn.forEach(function(e){bn(e,!1)});var _n={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=yn[e];if(!o)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case G:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Ht;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=ue}return z(t=e.getPooled(o,t,n,r)),t}},wn=_n.isInteractiveTopLevelEventType,xn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=I(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,l=0;l<v.length;l++){var u=v[l];u&&(u=u.extractEvents(r,t,i,o))&&(a=S(a,u))}j(a)}}var Tn=!0;function Sn(e,t){if(!t)return null;var n=(wn(e)?kn:On).bind(null,e);t.addEventListener(e,n,!1)}function Cn(e,t){if(!t)return null;var n=(wn(e)?kn:On).bind(null,e);t.addEventListener(e,n,!0)}function kn(e,t){De(On,e,t)}function On(e,t){if(Tn){var n=Fe(t);if(null===(n=I(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),xn.length){var r=xn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Re(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>xn.length&&xn.push(e)}}}var Pn={},Nn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Nn++,Pn[e[jn]]={}),Pn[e[jn]]}function Dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function Rn(){for(var e=window,t=Dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Dn((e=t.contentWindow).document)}return t}function Mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function qn(e){var t=Rn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Mn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=In(n,i);var a=In(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=$&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Un=null,Wn=null,Bn=null,zn=!1;function $n(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return zn||null==Un||Un!==Dn(n)?null:("selectionStart"in(n=Un)&&Mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=ue.getPooled(Hn.select,Wn,e,t)).type="select",e.target=Un,z(e),e))}var Vn={eventTypes:Hn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=_.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?M(t):window,e){case"focus":(qe(i)||"true"===i.contentEditable)&&(Un=i,Wn=t,Bn=null);break;case"blur":Bn=Wn=Un=null;break;case"mousedown":zn=!0;break;case"contextmenu":case"mouseup":case"dragend":return zn=!1,$n(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return $n(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Xn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Gn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=q,x=R,E=M,P.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:Ft,SelectEventPlugin:Vn,BeforeInputEventPlugin:Se});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Cn("scroll",e);break;case"focus":case"blur":Cn("focus",e),Cn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":He(o)&&Cn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function dr(){}var hr=null,mr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yr="function"==typeof setTimeout?setTimeout:void 0,br="function"==typeof clearTimeout?clearTimeout:void 0,_r=i.unstable_scheduleCallback,wr=i.unstable_cancelCallback;function xr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Tr=[],Sr=-1;function Cr(e){0>Sr||(e.current=Tr[Sr],Tr[Sr]=null,Sr--)}function kr(e,t){Tr[++Sr]=e.current,e.current=t}var Or={},Pr={current:Or},Nr={current:!1},jr=Or;function Ar(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Dr(e){return null!=(e=e.childContextTypes)}function Lr(e){Cr(Nr),Cr(Pr)}function Ir(e){Cr(Nr),Cr(Pr)}function Rr(e,t,n){Pr.current!==Or&&a("168"),kr(Pr,t),kr(Nr,n)}function Mr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function qr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,jr=Pr.current,kr(Pr,t),kr(Nr,Nr.current),!0}function Fr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Mr(e,t,jr),r.__reactInternalMemoizedMergedChildContext=t,Cr(Nr),Cr(Pr),kr(Pr,t)):Cr(Nr),kr(Nr,n)}var Hr=null,Ur=null;function Wr(e){return function(t){try{return e(t)}catch(e){}}}function Br(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function zr(e,t,n,r){return new Br(e,t,n,r)}function $r(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vr(e,t){var n=e.alternate;return null===n?((n=zr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Qr(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)$r(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ye:return Kr(n.children,o,i,t);case et:return Yr(n,3|o,i,t);case Xe:return Yr(n,2|o,i,t);case Ge:return(e=zr(12,n,t,4|o)).elementType=Ge,e.type=Ge,e.expirationTime=i,e;case nt:return(e=zr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case ot:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=zr(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Kr(e,t,n,r){return(e=zr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=zr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=zr(6,e,null,t)).expirationTime=n,e}function Gr(e,t,n){return(t=zr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),to(t,e)}function Zr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),to(t,e)}function eo(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function to(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function no(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ro=(new r.Component).refs;function oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var io={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=wl(),o=Yi(r=Ka(r,e));o.payload=t,null!=n&&(o.callback=n),Wa(),Gi(e,o),Ga(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=wl(),o=Yi(r=Ka(r,e));o.tag=Bi,o.payload=t,null!=n&&(o.callback=n),Wa(),Gi(e,o),Ga(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=wl(),r=Yi(n=Ka(n,e));r.tag=zi,null!=t&&(r.callback=t),Wa(),Gi(e,r),Ga(e,n)}};function ao(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Ui(i):(o=Dr(t)?jr:Pr.current,i=(r=null!=(r=t.contextTypes))?Ar(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=io,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function uo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&io.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ro;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Ui(i):(i=Dr(t)?jr:Pr.current,o.context=Ar(e,i)),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var co=Array.isArray;function fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function po(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Vr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=fo(e,t,n),r.return=e,r):((r=Qr(n.type,n.key,n.props,null,e.mode,r)).ref=fo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Kr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=Qr(t.type,t.key,t.props,null,e.mode,n)).ref=fo(e,null,t),n.return=e,n;case Ke:return(t=Gr(t,e.mode,n)).return=e,t}if(co(t)||at(t))return(t=Kr(t,e.mode,n,null)).return=e,t;po(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case Ke:return n.key===o?c(e,t,n,r):null}if(co(n)||at(n))return null!==o?null:f(e,t,n,r,null);po(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(co(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);po(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=d(o,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)(f=p(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(o,e)}),s}function g(o,l,u,s){var c=at(u);"function"!=typeof c&&a("150"),null==(u=c.call(u))&&a("151");for(var f=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=d(o,m,y.value,s);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=p(o,y.value,s))&&(l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;g++,y=u.next())null!==(y=h(m,o,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===Ye&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Qe:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?i.type===Ye:s.elementType===i.type){n(e,s.sibling),(r=o(s,i.type===Ye?i.props.children:i.props)).ref=fo(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ye?((r=Kr(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Qr(i.type,i.key,i.props,null,e.mode,u)).ref=fo(e,r,i),u.return=e,e=u)}return l(e);case Ke:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gr(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,u)).return=e,e=r),l(e);if(co(i))return m(e,r,i,u);if(at(i))return g(e,r,i,u);if(c&&po(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:a("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var mo=ho(!0),go=ho(!1),vo={},yo={current:vo},bo={current:vo},_o={current:vo};function wo(e){return e===vo&&a("174"),e}function xo(e,t){kr(_o,t),kr(bo,e),kr(yo,vo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Cr(yo),kr(yo,t)}function Eo(e){Cr(yo),Cr(bo),Cr(_o)}function To(e){wo(_o.current);var t=wo(yo.current),n=tr(t,e.type);t!==n&&(kr(bo,e),kr(yo,n))}function So(e){bo.current===e&&(Cr(yo),Cr(bo))}var Co=0,ko=2,Oo=4,Po=8,No=16,jo=32,Ao=64,Do=128,Lo=ze.ReactCurrentDispatcher,Io=0,Ro=null,Mo=null,qo=null,Fo=null,Ho=null,Uo=null,Wo=0,Bo=null,zo=0,$o=!1,Vo=null,Qo=0;function Ko(){a("321")}function Yo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Io=i,Ro=t,qo=null!==e?e.memoizedState:null,Lo.current=null===qo?si:ci,t=n(r,o),$o){do{$o=!1,Qo+=1,qo=null!==e?e.memoizedState:null,Uo=Fo,Bo=Ho=Mo=null,Lo.current=ci,t=n(r,o)}while($o);Vo=null,Qo=0}return Lo.current=ui,(e=Ro).memoizedState=Fo,e.expirationTime=Wo,e.updateQueue=Bo,e.effectTag|=zo,e=null!==Mo&&null!==Mo.next,Io=0,Uo=Ho=Fo=qo=Mo=Ro=null,Wo=0,Bo=null,zo=0,e&&a("300"),t}function Go(){Lo.current=ui,Io=0,Uo=Ho=Fo=qo=Mo=Ro=null,Wo=0,Bo=null,zo=0,$o=!1,Vo=null,Qo=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ho?Fo=Ho=e:Ho=Ho.next=e,Ho}function Zo(){if(null!==Uo)Uo=(Ho=Uo).next,qo=null!==(Mo=qo)?Mo.next:null;else{null===qo&&a("310");var e={memoizedState:(Mo=qo).memoizedState,baseState:Mo.baseState,queue:Mo.queue,baseUpdate:Mo.baseUpdate,next:null};Ho=null===Ho?Fo=e:Ho.next=e,qo=Mo.next}return Ho}function ei(e,t){return"function"==typeof t?t(e):t}function ti(e){var t=Zo(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<Qo){var r=n.dispatch;if(null!==Vo){var o=Vo.get(n);if(void 0!==o){Vo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(wi=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(i=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=o=null,s=r,c=!1;do{var f=s.expirationTime;f<Io?(c||(c=!0,u=l,o=i),f>Wo&&(Wo=f)):i=s.eagerReducer===e?s.eagerState:e(i,s.action),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,o=i),Jt(i,t.memoizedState)||(wi=!0),t.memoizedState=i,t.baseUpdate=u,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Bo?(Bo={lastEffect:null}).lastEffect=e.next=e:null===(t=Bo.lastEffect)?Bo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Bo.lastEffect=e),e}function ri(e,t,n,r){var o=Jo();zo|=e,o.memoizedState=ni(t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Zo();r=void 0===r?null:r;var i=void 0;if(null!==Mo){var a=Mo.memoizedState;if(i=a.destroy,null!==r&&Yo(r,a.deps))return void ni(Co,n,i,r)}zo|=e,o.memoizedState=ni(t,n,i,r)}function ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function li(e,t,n){25>Qo||a("301");var r=e.alternate;if(e===Ro||null!==r&&r===Ro)if($o=!0,e={expirationTime:Io,action:n,eagerReducer:null,eagerState:null,next:null},null===Vo&&(Vo=new Map),void 0===(n=Vo.get(t)))Vo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Wa();var o=wl(),i={expirationTime:o=Ka(o,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)i.next=i;else{var u=l.next;null!==u&&(i.next=u),l.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(i.eagerReducer=r,i.eagerState=c,Jt(c,s))return}catch(e){}Ga(e,o)}}var ui={readContext:Ui,useCallback:Ko,useContext:Ko,useEffect:Ko,useImperativeHandle:Ko,useLayoutEffect:Ko,useMemo:Ko,useReducer:Ko,useRef:Ko,useState:Ko,useDebugValue:Ko},si={readContext:Ui,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Ui,useEffect:function(e,t){return ri(516,Do|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,Oo|jo,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,Oo|jo,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=li.bind(null,Ro,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ei,lastRenderedState:e}).dispatch=li.bind(null,Ro,e),[t.memoizedState,e]},useDebugValue:ai},ci={readContext:Ui,useCallback:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Ui,useEffect:function(e,t){return oi(516,Do|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Oo|jo,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Oo|jo,e,t)},useMemo:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ti,useRef:function(){return Zo().memoizedState},useState:function(e){return ti(ei)},useDebugValue:ai},fi=null,pi=null,di=!1;function hi(e,t){var n=zr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function gi(e){if(di){var t=pi;if(t){var n=t;if(!mi(e,t)){if(!(t=xr(n))||!mi(e,t))return e.effectTag|=2,di=!1,void(fi=e);hi(fi,n)}fi=e,pi=Er(t)}else e.effectTag|=2,di=!1,fi=e}}function vi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fi=e}function yi(e){if(e!==fi)return!1;if(!di)return vi(e),di=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=pi;t;)hi(e,t),t=xr(t);return vi(e),pi=fi?xr(e.stateNode):null,!0}function bi(){pi=fi=null,di=!1}var _i=ze.ReactCurrentOwner,wi=!1;function xi(e,t,n,r){t.child=null===e?go(t,null,n,r):mo(t,e.child,n,r)}function Ei(e,t,n,r,o){n=n.render;var i=t.ref;return Hi(t,o),r=Xo(e,t,n,r,i,o),null===e||wi?(t.effectTag|=1,xi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Ti(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||$r(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Qr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Si(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ai(e,t,i):(t.effectTag|=1,(e=Vr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Si(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(wi=!1,o<i)?Ai(e,t,i):ki(e,t,n,r,i)}function Ci(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ki(e,t,n,r,o){var i=Dr(n)?jr:Pr.current;return i=Ar(t,i),Hi(t,o),n=Xo(e,t,n,r,i,o),null===e||wi?(t.effectTag|=1,xi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Oi(e,t,n,r,o){if(Dr(n)){var i=!0;qr(t)}else i=!1;if(Hi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=Ui(s):s=Ar(t,s=Dr(n)?jr:Pr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&uo(t,a,r,s),Vi=!1;var p=t.memoizedState;u=a.state=p;var d=t.updateQueue;null!==d&&(ta(t,d,r,a,o),u=t.memoizedState),l!==r||p!==u||Nr.current||Vi?("function"==typeof c&&(oo(t,n,c,r),u=t.memoizedState),(l=Vi||ao(t,n,l,r,p,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:no(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ui(s):s=Ar(t,s=Dr(n)?jr:Pr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&uo(t,a,r,s),Vi=!1,u=t.memoizedState,p=a.state=u,null!==(d=t.updateQueue)&&(ta(t,d,r,a,o),p=t.memoizedState),l!==r||u!==p||Nr.current||Vi?("function"==typeof c&&(oo(t,n,c,r),p=t.memoizedState),(c=Vi||ao(t,n,l,r,u,p,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Pi(e,t,n,r,i,o)}function Pi(e,t,n,r,o,i){Ci(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Fr(t,n,!1),Ai(e,t,i);r=t.stateNode,_i.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mo(t,e.child,null,i),t.child=mo(t,null,l,i)):xi(e,t,l,i),t.memoizedState=r.state,o&&Fr(t,n,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?Rr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Rr(0,t.context,!1),xo(e,t.containerInfo)}function ji(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=o.fallback;e=Kr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Kr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=go(t,null,o.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=o.fallback,o=Vr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Vr(l,n,l.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=mo(t,r.child,o.children,n)):(l=e.child,a?(a=o.fallback,(o=Kr(null,r,0,null)).child=l,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Kr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=mo(t,l,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ai(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Vr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Di(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)wi=!0;else if(r<n){switch(wi=!1,t.tag){case 3:Ni(t),bi();break;case 5:To(t);break;case 1:Dr(t.type)&&qr(t);break;case 4:xo(t,t.stateNode.containerInfo);break;case 10:qi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ji(e,t,n):null!==(t=Ai(e,t,n))?t.sibling:null}return Ai(e,t,n)}}else wi=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ar(t,Pr.current);if(Hi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Go(),Dr(r)){var i=!0;qr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&oo(t,r,l,e),o.updater=io,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Pi(null,t,r,!0,i,n)}else t.tag=0,xi(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return $r(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=no(e,i),l=void 0,o){case 0:l=ki(null,t,e,i,n);break;case 1:l=Oi(null,t,e,i,n);break;case 11:l=Ei(null,t,e,i,n);break;case 14:l=Ti(null,t,e,no(e.type,i),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,o=t.pendingProps,ki(e,t,r,o=t.elementType===r?o:no(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:no(r,o),n);case 3:return Ni(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,ta(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(bi(),t=Ai(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pi=Er(t.stateNode.containerInfo),fi=t,o=di=!0),o?(t.effectTag|=2,t.child=go(t,null,r,n)):(xi(e,t,r,n),bi()),t=t.child),t;case 5:return To(t),null===e&&gi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,vr(r,o)?l=null:null!==i&&vr(r,i)&&(t.effectTag|=16),Ci(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(xi(e,t,l,n),t=t.child),t;case 6:return null===e&&gi(t),null;case 13:return ji(e,t,n);case 4:return xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mo(t,null,r,n):xi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ei(e,t,r,o=t.elementType===r?o:no(r,o),n);case 7:return xi(e,t,t.pendingProps,n),t.child;case 8:case 12:return xi(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,qi(t,i=o.value),null!==l){var u=l.value;if(0===(i=Jt(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!Nr.current){t=Ai(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.contextDependencies;if(null!==s){l=u.child;for(var c=s.first;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=Yi(n)).tag=zi,Gi(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),c=n;for(var f=u.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<c)f.childExpirationTime=c,null!==p&&p.childExpirationTime<c&&(p.childExpirationTime=c);else{if(!(null!==p&&p.childExpirationTime<c))break;p.childExpirationTime=c}f=f.return}s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}xi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Hi(t,n),r=r(o=Ui(o,i.unstable_observedBits)),t.effectTag|=1,xi(e,t,r,n),t.child;case 14:return i=no(o=t.type,t.pendingProps),Ti(e,t,o,i=no(o.type,i),r,n);case 15:return Si(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:no(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Dr(r)?(e=!0,qr(t)):e=!1,Hi(t,n),lo(t,r,o),so(t,r,o,n),Pi(null,t,r,!0,e,n)}a("156")}var Li={current:null},Ii=null,Ri=null,Mi=null;function qi(e,t){var n=e.type._context;kr(Li,n._currentValue),n._currentValue=t}function Fi(e){var t=Li.current;Cr(Li),e.type._context._currentValue=t}function Hi(e,t){Ii=e,Mi=Ri=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(wi=!0),e.contextDependencies=null}function Ui(e,t){return Mi!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Mi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ri?(null===Ii&&a("308"),Ri=t,Ii.contextDependencies={first:t,expirationTime:0}):Ri=Ri.next=t),e._currentValue}var Wi=0,Bi=1,zi=2,$i=3,Vi=!1;function Qi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{expirationTime:e,tag:Wi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Gi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Qi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Qi(e.memoizedState),o=n.updateQueue=Qi(n.memoizedState)):r=e.updateQueue=Ki(o):null===o&&(o=n.updateQueue=Ki(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Ji(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Qi(e.memoizedState):Zi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Zi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ki(t)),t}function ea(e,t,n,r,i,a){switch(n.tag){case Bi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case $i:e.effectTag=-2049&e.effectTag|64;case Wi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case zi:Vi=!0}return r}function ta(e,t,n,r,o){Vi=!1;for(var i=(t=Zi(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=i;null!==u;){var c=u.expirationTime;c<o?(null===a&&(a=u,i=s),l<c&&(l=c)):(s=ea(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<o?(null===c&&(c=u,null===a&&(i=s)),l<f&&(l=f)):(s=ea(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function na(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ra(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ra(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ra(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:ut(t)}}function ia(e){e.effectTag|=4}var aa=void 0,la=void 0,ua=void 0,sa=void 0;aa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},la=function(){},ua=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(wo(yo.current),e=null,n){case"input":a=bt(l,a),r=bt(l,r),e=[];break;case"option":a=Qn(l,a),r=Qn(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Yn(l,a),r=Yn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=dr)}cr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&pr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),i=e,(t.updateQueue=i)&&ia(t)}},sa=function(e,t,n,r){n!==r&&ia(t)};var ca="function"==typeof WeakSet?WeakSet:Set;function fa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Qa(e,t)}else t.current=null}function da(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Co){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Co&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ha(e){switch("function"==typeof Ur&&Ur(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Qa(e,t)}break;case 5:pa(e);break;case 4:va(e)}}function ma(e){return 5===e.tag||3===e.tag||4===e.tag}function ga(e){e:{for(var t=e.return;null!==t;){if(ma(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ma(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,l=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(o.stateNode,n);else r?(l=t,u=o.stateNode,8===l.nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=dr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function va(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,l=i;;)if(ha(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===i)break;for(;null===l.sibling;){if(null===l.return||l.return===i)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(i=r,l=t.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ya(e,t){switch(t.tag){case 0:case 11:case 14:case 15:da(Oo,Po,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[L]=o,"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),fr(n,r),r=fr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?ur(e,l):"dangerouslySetInnerHTML"===a?rr(e,l):"children"===a?or(e,l):vt(e,a,l,r)}switch(n){case"input":xt(e,o);break;case"textarea":Gn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=wl())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new ca),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ka(t=wl(),e),null!==(e=Xa(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&xl(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var ba="function"==typeof WeakMap?WeakMap:Map;function _a(e,t,n){(n=Yi(n)).tag=$i,n.payload={element:null};var r=t.value;return n.callback=function(){jl(r),fa(e,t)},n}function wa(e,t,n){(n=Yi(n)).tag=$i;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ma?Ma=new Set([this]):Ma.add(this));var n=t.value,o=t.stack;fa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function xa(e){switch(e.tag){case 1:Dr(e.type)&&Lr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Ir(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return So(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eo(),null;case 10:return Fi(e),null;default:return null}}var Ea=ze.ReactCurrentDispatcher,Ta=ze.ReactCurrentOwner,Sa=1073741822,Ca=!1,ka=null,Oa=null,Pa=0,Na=-1,ja=!1,Aa=null,Da=!1,La=null,Ia=null,Ra=null,Ma=null;function qa(){if(null!==ka)for(var e=ka.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Lr();break;case 3:Eo(),Ir();break;case 5:So(t);break;case 4:Eo();break;case 10:Fi(t)}e=e.return}Oa=null,Pa=0,Na=-1,ja=!1,ka=null}function Fa(){for(;null!==Aa;){var e=Aa.effectTag;if(16&e&&or(Aa.stateNode,""),128&e){var t=Aa.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:ga(Aa),Aa.effectTag&=-3;break;case 6:ga(Aa),Aa.effectTag&=-3,ya(Aa.alternate,Aa);break;case 4:ya(Aa.alternate,Aa);break;case 8:va(e=Aa),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Aa=Aa.nextEffect}}function Ha(){for(;null!==Aa;){if(256&Aa.effectTag)e:{var e=Aa.alternate,t=Aa;switch(t.tag){case 0:case 11:case 15:da(ko,Co,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:no(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Aa=Aa.nextEffect}}function Ua(e,t){for(;null!==Aa;){var n=Aa.effectTag;if(36&n){var r=Aa.alternate,o=Aa,i=t;switch(o.tag){case 0:case 11:case 15:da(No,jo,o);break;case 1:var l=o.stateNode;if(4&o.effectTag)if(null===r)l.componentDidMount();else{var u=o.elementType===o.type?r.memoizedProps:no(o.type,r.memoizedProps);l.componentDidUpdate(u,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&na(0,r,l);break;case 3:if(null!==(r=o.updateQueue)){if(l=null,null!==o.child)switch(o.child.tag){case 5:l=o.child.stateNode;break;case 1:l=o.child.stateNode}na(0,r,l)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&gr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Aa.ref)&&(i=Aa.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(La=e),Aa=Aa.nextEffect}}function Wa(){null!==Ia&&wr(Ia),null!==Ra&&Ra()}function Ba(e,t){Da=Ca=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Jr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,t)):t>n&&Jr(e,t)}to(0,e)}(e,o>r?o:r),Ta.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Tn,mr=function(){var e=Rn();if(Mn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,u=0,s=0,c=e,f=null;t:for(;;){for(var p;c!==t||0!==r&&3!==c.nodeType||(a=i+r),c!==o||0!==n&&3!==c.nodeType||(l=i+n),3===c.nodeType&&(i+=c.nodeValue.length),null!==(p=c.firstChild);)f=c,c=p;for(;;){if(c===e)break t;if(f===t&&++u===r&&(a=i),f===o&&++s===n&&(l=i),null!==(p=c.nextSibling))break;f=(c=f).parentNode}c=p}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Tn=!1,Aa=r;null!==Aa;){o=!1;var l=void 0;try{Ha()}catch(e){o=!0,l=e}o&&(null===Aa&&a("178"),Qa(Aa,l),null!==Aa&&(Aa=Aa.nextEffect))}for(Aa=r;null!==Aa;){o=!1,l=void 0;try{Fa()}catch(e){o=!0,l=e}o&&(null===Aa&&a("178"),Qa(Aa,l),null!==Aa&&(Aa=Aa.nextEffect))}for(qn(mr),mr=null,Tn=!!hr,hr=null,e.current=t,Aa=r;null!==Aa;){o=!1,l=void 0;try{Ua(e,n)}catch(e){o=!0,l=e}o&&(null===Aa&&a("178"),Qa(Aa,l),null!==Aa&&(Aa=Aa.nextEffect))}if(null!==r&&null!==La){var u=function(e,t){Ra=Ia=La=null;var n=rl;rl=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;da(Do,Co,i),da(Co,Ao,i)}catch(e){r=!0,o=e}r&&Qa(t,o)}t=t.nextEffect}while(null!==t);rl=n,0!==(n=e.expirationTime)&&xl(e,n),sl||rl||kl(1073741823,!1)}.bind(null,e,r);Ia=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return _r(u)}),Ra=u}Ca=Da=!1,"function"==typeof Hr&&Hr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ma=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function za(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){ka=e;e:{var i=t,l=Pa,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Dr(t.type)&&Lr();break;case 3:Eo(),Ir(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(yi(t),t.effectTag&=-3),la(t);break;case 5:So(t);var s=wo(_o.current);if(l=t.type,null!==i&&null!=t.stateNode)ua(i,t,l,u,s),i.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=wo(yo.current);if(yi(t)){i=(u=t).stateNode;var f=u.type,p=u.memoizedProps,d=s;switch(i[D]=u,i[L]=p,l=void 0,s=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":_t(i,p),Sn("invalid",i),pr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),pr(d,"onChange");break;case"textarea":Xn(i,p),Sn("invalid",i),pr(d,"onChange")}for(l in cr(s,p),f=null,p)p.hasOwnProperty(l)&&(c=p[l],"children"===l?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(l)&&null!=c&&pr(d,l));switch(s){case"input":We(i),Et(i,p,!0);break;case"textarea":We(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=dr)}l=f,u.updateQueue=l,(u=null!==l)&&ia(t)}else{p=t,d=l,i=u,f=9===s.nodeType?s:s.ownerDocument,c===Zn.html&&(c=er(d)),c===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(c,d),(i=f)[D]=p,i[L]=u,aa(i,t,!1,!1),d=i;var h=s,m=fr(f=l,p=u);switch(f){case"iframe":case"object":Sn("load",d),s=p;break;case"video":case"audio":for(s=0;s<te.length;s++)Sn(te[s],d);s=p;break;case"source":Sn("error",d),s=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),s=p;break;case"form":Sn("reset",d),Sn("submit",d),s=p;break;case"details":Sn("toggle",d),s=p;break;case"input":_t(d,p),s=bt(d,p),Sn("invalid",d),pr(h,"onChange");break;case"option":s=Qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},s=o({},p,{value:void 0}),Sn("invalid",d),pr(h,"onChange");break;case"textarea":Xn(d,p),s=Yn(d,p),Sn("invalid",d),pr(h,"onChange");break;default:s=p}cr(f,s),c=void 0;var g=f,v=d,y=s;for(c in y)if(y.hasOwnProperty(c)){var _=y[c];"style"===c?ur(v,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&rr(v,_):"children"===c?"string"==typeof _?("textarea"!==g||""!==_)&&or(v,_):"number"==typeof _&&or(v,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=_&&pr(h,c):null!=_&&vt(v,c,_,m))}switch(f){case"input":We(d),Et(d,p,!1);break;case"textarea":We(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+yt(p.value));break;case"select":(s=d).multiple=!!p.multiple,null!=(d=p.value)?Kn(s,!!p.multiple,d,!1):null!=p.defaultValue&&Kn(s,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof s.onClick&&(d.onclick=dr)}(u=gr(l,u))&&ia(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?sa(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),i=wo(_o.current),wo(yo.current),yi(t)?(l=(u=t).stateNode,i=u.memoizedProps,l[D]=u,(u=l.nodeValue!==i)&&ia(t)):(l=t,(u=(9===i.nodeType?i:i.ownerDocument).createTextNode(u))[D]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,ka=t;break e}u=null!==u,l=null!==i&&null!==i.memoizedState,null!==i&&!u&&l&&(null!==(i=i.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(u||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo(),la(t);break;case 10:Fi(t);break;case 9:case 14:break;case 17:Dr(t.type)&&Lr();break;case 18:break;default:a("156")}ka=null}if(t=e,1===Pa||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(i=l.expirationTime)>u&&(u=i),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==ka)return ka;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=xa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function $a(e){var t=Di(e.alternate,e,Pa);return e.memoizedProps=e.pendingProps,null===t&&(t=za(e)),Ta.current=null,t}function Va(e,t){Ca&&a("243"),Wa(),Ca=!0;var n=Ea.current;Ea.current=ui;var r=e.nextExpirationTimeToWorkOn;r===Pa&&e===Oa&&null!==ka||(qa(),Pa=r,ka=Vr((Oa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==ka&&!Sl();)ka=$a(ka);else for(;null!==ka;)ka=$a(ka)}catch(t){if(Mi=Ri=Ii=null,Go(),null===ka)o=!0,jl(t);else{null===ka&&a("271");var i=ka,l=i.return;if(null!==l){e:{var u=e,s=l,c=i,f=t;if(l=Pa,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=s;var d=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?d=0:(-1===d||m<d)&&(d=m))}f=f.return}while(null!==f);f=s;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(s=f.updateQueue)?((s=new Set).add(p),f.updateQueue=s):s.add(p),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((l=Yi(1073741823)).tag=zi,Gi(c,l))),c.expirationTime=1073741823;break e}s=l;var g=(c=u).pingCache;null===g?(g=c.pingCache=new ba,m=new Set,g.set(p,m)):void 0===(m=g.get(p))&&(m=new Set,g.set(p,m)),m.has(s)||(m.add(s),c=Ya.bind(null,c,p,s),p.then(c,c)),-1===d?u=1073741823:(-1===h&&(h=10*(1073741822-eo(u,l))-5e3),u=h+d),0<=u&&Na<u&&(Na=u),f.effectTag|=2048,f.expirationTime=l;break e}f=f.return}while(null!==f);f=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(c))}ja=!0,f=oa(f,c),u=s;do{switch(u.tag){case 3:u.effectTag|=2048,u.expirationTime=l,Ji(u,l=_a(u,f,l));break e;case 1:if(d=f,h=u.type,c=u.stateNode,0==(64&u.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==c&&"function"==typeof c.componentDidCatch&&(null===Ma||!Ma.has(c)))){u.effectTag|=2048,u.expirationTime=l,Ji(u,l=wa(u,d,l));break e}}u=u.return}while(null!==u)}ka=za(i);continue}o=!0,jl(t)}}break}if(Ca=!1,Ea.current=n,Mi=Ri=Ii=null,Go(),o)Oa=null,e.finishedWork=null;else if(null!==ka)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Oa=null,ja){if(o=e.latestPendingTime,i=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==l&&l<r)return Zr(e,r),void _l(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void _l(e,n,r,t,-1)}t&&-1!==Na?(Zr(e,r),(t=10*(1073741822-eo(e,r)))<Na&&(Na=t),t=10*(1073741822-wl()),t=Na-t,_l(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ma||!Ma.has(r)))return Gi(n,e=wa(n,e=oa(t,e),1073741823)),void Ga(n,1073741823);break;case 3:return Gi(n,e=_a(n,e=oa(t,e),1073741823)),void Ga(n,1073741823)}n=n.return}3===e.tag&&(Gi(e,n=_a(e,n=oa(t,e),1073741823)),Ga(e,1073741823))}function Ka(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ca&&!Da)r=Pa;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Oa&&r===Pa&&--r}return n===i.unstable_UserBlockingPriority&&(0===al||r<al)&&(al=r),r}function Ya(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Oa&&Pa===n?Oa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),to(n,e),0!==(n=e.expirationTime)&&xl(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ga(e,t){null!==(e=Xa(e,t))&&(!Ca&&0!==Pa&&t>Pa&&qa(),Jr(e,t),Ca&&!Da&&Oa===e||xl(e,e.expirationTime),gl>ml&&(gl=0,a("185")))}function Ja(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var Za=null,el=null,tl=0,nl=void 0,rl=!1,ol=null,il=0,al=0,ll=!1,ul=null,sl=!1,cl=!1,fl=null,pl=i.unstable_now(),dl=1073741822-(pl/10|0),hl=dl,ml=50,gl=0,vl=null;function yl(){dl=1073741822-((i.unstable_now()-pl)/10|0)}function bl(e,t){if(0!==tl){if(t<tl)return;null!==nl&&i.unstable_cancelCallback(nl)}tl=t,e=i.unstable_now()-pl,nl=i.unstable_scheduleCallback(Cl,{timeout:10*(1073741822-t)-e})}function _l(e,t,n,r,o){e.expirationTime=r,0!==o||Sl()?0<o&&(e.timeoutHandle=yr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,yl(),hl=dl,Ol(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function wl(){return rl?hl:(El(),0!==il&&1!==il||(yl(),hl=dl),hl)}function xl(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===el?(Za=el=e,e.nextScheduledRoot=e):(el=el.nextScheduledRoot=e).nextScheduledRoot=Za):t>e.expirationTime&&(e.expirationTime=t),rl||(sl?cl&&(ol=e,il=1073741823,Pl(e,1073741823,!1)):1073741823===t?kl(1073741823,!1):bl(e,t))}function El(){var e=0,t=null;if(null!==el)for(var n=el,r=Za;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===el)&&a("244"),r===r.nextScheduledRoot){Za=el=r.nextScheduledRoot=null;break}if(r===Za)Za=o=r.nextScheduledRoot,el.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===el){(el=n).nextScheduledRoot=Za,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===el)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ol=t,il=e}var Tl=!1;function Sl(){return!!Tl||!!i.unstable_shouldYield()&&(Tl=!0)}function Cl(){try{if(!Sl()&&null!==Za){yl();var e=Za;do{var t=e.expirationTime;0!==t&&dl<=t&&(e.nextExpirationTimeToWorkOn=dl),e=e.nextScheduledRoot}while(e!==Za)}kl(0,!0)}finally{Tl=!1}}function kl(e,t){if(El(),t)for(yl(),hl=dl;null!==ol&&0!==il&&e<=il&&!(Tl&&dl>il);)Pl(ol,il,dl>il),El(),yl(),hl=dl;else for(;null!==ol&&0!==il&&e<=il;)Pl(ol,il,!1),El();if(t&&(tl=0,nl=null),0!==il&&bl(ol,il),gl=0,vl=null,null!==fl)for(e=fl,fl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ll||(ll=!0,ul=e)}}if(ll)throw e=ul,ul=null,ll=!1,e}function Ol(e,t){rl&&a("253"),ol=e,il=t,Pl(e,t,!1),kl(1073741823,!1)}function Pl(e,t,n){if(rl&&a("245"),rl=!0,n){var r=e.finishedWork;null!==r?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Va(e,n),null!==(r=e.finishedWork)&&(Sl()?e.finishedWork=r:Nl(e,r,t)))}else null!==(r=e.finishedWork)?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),Va(e,n),null!==(r=e.finishedWork)&&Nl(e,r,t));rl=!1}function Nl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===fl?fl=[r]:fl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===vl?gl++:(vl=e,gl=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){Ba(e,t)})}function jl(e){null===ol&&a("246"),ol.expirationTime=0,ll||(ll=!0,ul=e)}function Al(e,t){var n=sl;sl=!0;try{return e(t)}finally{(sl=n)||rl||kl(1073741823,!1)}}function Dl(e,t){if(sl&&!cl){cl=!0;try{return e(t)}finally{cl=!1}}return e(t)}function Ll(e,t,n){sl||rl||0===al||(kl(al,!1),al=0);var r=sl;sl=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(sl=r)||rl||kl(1073741823,!1)}}function Il(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Dr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var u=n.type;if(Dr(u)){n=Mr(n,u,l);break e}}n=l}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Yi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Wa(),Gi(i,o),Ga(i,r),r}function Rl(e,t,n,r){var o=t.current;return Il(e,t,n,o=Ka(wl(),o),r)}function Ml(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ql(e){var t=1073741822-25*(1+((1073741822-wl()+500)/25|0));t>=Sa&&(t=Sa-1),this._expirationTime=Sa=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Fl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Hl(e,t,n){e={current:t=zr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ul(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Wl(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Ml(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hl(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=Ml(i._internalRoot);l.call(e)}}Dl(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Ml(i._internalRoot)}function Bl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ul(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ce=function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=q(r);o||a("90"),Be(r),xt(r,o)}}}break;case"textarea":Gn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},ql.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Fl;return Il(e,t,null,n,r._onCommit),r},ql.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ql.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ol(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ql.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Fl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Hl.prototype.render=function(e,t){var n=this._internalRoot,r=new Fl;return null!==(t=void 0===t?null:t)&&r.then(t),Rl(e,n,null,r._onCommit),r},Hl.prototype.unmount=function(e){var t=this._internalRoot,n=new Fl;return null!==(e=void 0===e?null:e)&&n.then(e),Rl(null,t,null,n._onCommit),n},Hl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Fl;return null!==(n=void 0===n?null:n)&&o.then(n),Rl(t,r,e,o._onCommit),o},Hl.prototype.createBatch=function(){var e=new ql(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ae=Al,De=Ll,Le=function(){rl||0===al||(kl(al,!1),al=0)};var zl,$l,Vl={createPortal:Bl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Ul(t)||a("200"),Wl(null,e,t,!0,n)},render:function(e,t,n){return Ul(t)||a("200"),Wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Ul(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ul(e)||a("40"),!!e._reactRootContainer&&(Dl(function(){Wl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Bl.apply(void 0,arguments)},unstable_batchedUpdates:Al,unstable_interactiveUpdates:Ll,flushSync:function(e,t){rl&&a("187");var n=sl;sl=!0;try{return Ja(e,t)}finally{sl=n,kl(1073741823,!1)}},unstable_createRoot:function(e,t){return Ul(e)||a("299","unstable_createRoot"),new Hl(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=sl;sl=!0;try{Ja(e)}finally{(sl=t)||rl||kl(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[R,M,q,P.injectEventPluginsByName,y,z,function(e){C(e,B)},Ne,je,On,j]}};$l=(zl={findFiberByHostInstance:I,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Hr=Wr(function(e){return t.onCommitFiberRoot(n,e)}),Ur=Wr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}}(o({},zl,{overrideProps:null,currentDispatcherRef:ze.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $l?$l(e):null}}));var Ql={default:Vl},Kl=Ql&&Vl||Ql;e.exports=Kl.default||Kl},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t,n){"use strict";e.exports=n(18)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?E():u=!0,x(p,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,l=a;o=e,a=t;try{var u=r()}finally{o=i,a=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function p(e){l=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{c()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{c()}while(null!==n&&!T())}finally{l=!1,r=o,null!==n?s():u=!1,f()}}var d,h,m=Date,g="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,y="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){d=y(function(t){v(h),e(t)}),h=g(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return m.now()};var x,E,T,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var C=S._schedMock;x=C[0],E=C[1],T=C[2],t.unstable_now=C[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var k=null,O=function(e){if(null!==k)try{k(e)}finally{k=null}};x=function(e){null!==k?setTimeout(x,0,e):(k=e,setTimeout(O,0,!1))},E=function(){k=null},T=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var P=null,N=!1,j=-1,A=!1,D=!1,L=0,I=33,R=33;T=function(){return L<=t.unstable_now()};var M=new MessageChannel,q=M.port2;M.port1.onmessage=function(){N=!1;var e=P,n=j;P=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=L-r){if(!(-1!==n&&n<=r))return A||(A=!0,_(F)),P=e,void(j=n);o=!0}if(null!==e){D=!0;try{e(o)}finally{D=!1}}};var F=function(e){if(null!==P){_(F);var t=e-L+R;t<R&&I<R?(8>t&&(t=8),R=t<I?I:t):I=t,L=e+R,N||(N=!0,q.postMessage(void 0))}else A=!1};x=function(e,t){P=e,j=t,D||0>t?q.postMessage(void 0):A||(A=!0,_(F))},E=function(){P=null,N=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||T())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(4))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,l,u=1,s={},c=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){i.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",l=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",l,!1):e.attachEvent("onmessage",l),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[u]=o,r(u),u++},p.clearImmediate=d}function d(e){delete s[e]}function h(e){if(c)setTimeout(h,0,e);else{var t=s[e];if(t){c=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{d(e),c=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(4),n(20))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&d())}function d(){if(!c){var e=l(p);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){e.exports=n(22)()},function(e,t,n){"use strict";var r=n(23);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.hide=function(e){a(i.default.GLOBAL.HIDE,{target:e})},e.rebuild=function(){a(i.default.GLOBAL.REBUILD)},e.show=function(e){a(i.default.GLOBAL.SHOW,{target:e})},e.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},e.prototype.globalShow=function(e){if(this.mount){var t={currentTarget:e.detail.target};this.showTooltip(t,!0)}},e.prototype.globalHide=function(e){if(this.mount){var t=!!(e&&e.detail&&e.detail.target);this.hideTooltip({currentTarget:t&&e.detail.target},t)}}};var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r};var a=function(e,t){var n=void 0;"function"==typeof window.CustomEvent?n=new window.CustomEvent(e,{detail:t}):((n=document.createEvent("Event")).initEvent(e,!1,!0),n.detail=t),window.dispatchEvent(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindWindowEvents=function(e){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.addEventListener(i.default.GLOBAL.HIDE,this.globalHide,!1),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.addEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild,!1),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.addEventListener(i.default.GLOBAL.SHOW,this.globalShow,!1),e&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},e.prototype.unbindWindowEvents=function(){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},e.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}};var r,o=n(6),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCustomEvent=function(e){return this.state.event||!!e.getAttribute("data-event")},e.prototype.customBindListener=function(e){var t=this,n=this.state,o=n.event,a=n.eventOff,l=e.getAttribute("data-event")||o,u=e.getAttribute("data-event-off")||a;l.split(" ").forEach(function(n){e.removeEventListener(n,i.get(e,n));var o=r.bind(t,u);i.set(e,n,o),e.addEventListener(n,o,!1)}),u&&u.split(" ").forEach(function(n){e.removeEventListener(n,t.hideTooltip),e.addEventListener(n,t.hideTooltip,!1)})},e.prototype.customUnbindListener=function(e){var t=this.state,n=t.event,r=t.eventOff,o=n||e.getAttribute("data-event"),a=r||e.getAttribute("data-event-off");e.removeEventListener(o,i.get(e,n)),a&&e.removeEventListener(a,this.hideTooltip)}};var r=function(e,t){var n=this.state.show,r=this.props.id,i=t.currentTarget.getAttribute("data-iscapture"),a=i&&"true"===i||this.props.isCapture,l=t.currentTarget.getAttribute("currentItem");a||t.stopPropagation(),n&&"true"===l?e||this.hideTooltip(t):(t.currentTarget.setAttribute("currentItem","true"),o(t.currentTarget,this.getTargetArray(r)),this.showTooltip(t))},o=function(e,t){for(var n=0;n<t.length;n++)e!==t[n]?t[n].setAttribute("currentItem","false"):t[n].setAttribute("currentItem","true")},i={id:"9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",set:function(e,t,n){var r,o,i;this.id in e?e[this.id][t]=n:Object.defineProperty(e,this.id,{configurable:!0,value:(r={},o=t,i=n,o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r)})},get:function(e,t){var n=e[this.id];if(void 0!==n)return n[t]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCapture=function(e){return e&&"true"===e.getAttribute("data-iscapture")||this.props.isCapture||!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.getEffect=function(e){return e.getAttribute("data-effect")||this.props.effect||"float"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindRemovalTracker=function(){var e=this,t=r();if(null!=t){var n=new t(function(t){for(var n=0;n<t.length;n++)for(var r=t[n],o=0;o<r.removedNodes.length;o++){if(r.removedNodes[o]===e.state.currentTarget)return void e.hideTooltip()}});n.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=n}},e.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)}};var r=function(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,u,s,c,f){for(var p=r(n),d=p.width,h=p.height,m=r(t),g=m.width,v=m.height,y=o(e,t,c),b=y.mouseX,_=y.mouseY,w=i(c,g,v,d,h),x=a(f),E=x.extraOffset_X,T=x.extraOffset_Y,S=window.innerWidth,C=window.innerHeight,k=l(n),O=k.parentTop,P=k.parentLeft,N=function(e){var t=w[e].l;return b+t+E},j=function(e){var t=w[e].t;return _+t+T},A=function(e){return function(e){var t=w[e].r;return b+t+E}(e)>S},D=function(e){return function(e){var t=w[e].b;return _+t+T}(e)>C},L=function(e){return function(e){return N(e)<0}(e)||A(e)||function(e){return j(e)<0}(e)||D(e)},I=function(e){return!L(e)},R=["top","bottom","left","right"],M=[],q=0;q<4;q++){var F=R[q];I(F)&&M.push(F)}var H=!1,U=void 0;return I(s)&&s!==u?(H=!0,U=s):M.length>0&&L(s)&&L(u)&&(H=!0,U=M[0]),H?{isNewState:!0,newState:{place:U}}:{isNewState:!1,position:{left:parseInt(N(u)-P,10),top:parseInt(j(u)-O,10)}}};var r=function(e){var t=e.getBoundingClientRect(),n=t.height,r=t.width;return{height:parseInt(n,10),width:parseInt(r,10)}},o=function(e,t,n){var o=t.getBoundingClientRect(),i=o.top,a=o.left,l=r(t),u=l.width,s=l.height;return"float"===n?{mouseX:e.clientX,mouseY:e.clientY}:{mouseX:a+u/2,mouseY:i+s/2}},i=function(e,t,n,r,o){var i=void 0,a=void 0,l=void 0,u=void 0;return"float"===e?(i={l:-r/2,r:r/2,t:-(o+3+2),b:-3},l={l:-r/2,r:r/2,t:15,b:o+3+2+12},u={l:-(r+3+2),r:-3,t:-o/2,b:o/2},a={l:3,r:r+3+2,t:-o/2,b:o/2}):"solid"===e&&(i={l:-r/2,r:r/2,t:-(n/2+o+2),b:-n/2},l={l:-r/2,r:r/2,t:n/2,b:n/2+o+2},u={l:-(r+t/2+2),r:-t/2,t:-o/2,b:o/2},a={l:t/2,r:r+t/2+2,t:-o/2,b:o/2}),{top:i,bottom:l,left:u,right:a}},a=function(e){var t=0,n=0;for(var r in"[object String]"===Object.prototype.toString.apply(e)&&(e=JSON.parse(e.toString().replace(/\'/g,'"'))),e)"top"===r?n-=parseInt(e[r],10):"bottom"===r?n+=parseInt(e[r],10):"left"===r?t-=parseInt(e[r],10):"right"===r&&(t+=parseInt(e[r],10));return{extraOffset_X:t,extraOffset_Y:n}},l=function(e){for(var t=e;t&&"none"===window.getComputedStyle(t).getPropertyValue("transform");)t=t.parentElement;return{parentTop:t&&t.getBoundingClientRect().top||0,parentLeft:t&&t.getBoundingClientRect().left||0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(t)return t;if(null!=n)return n;if(null===n)return null;var o=/<br\s*\/?>/;return r&&"false"!==r&&o.test(e)?e.split(o).map(function(e,t){return i.default.createElement("span",{key:t,className:"multi-line"},e)}):e};var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseAria=function(e){var t={};return Object.keys(e).filter(function(e){return/(^aria-\w+$|^role$)/.test(e)}).forEach(function(n){t[n]=e[n]}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.length;return e.hasOwnProperty?Array.prototype.slice.call(e):new Array(t).fill().map(function(t){return e[t]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default='.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip.allow_hover,.__react_component_tooltip.allow_click{pointer-events:auto}.__react_component_tooltip:before,.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top-color:#222;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom-color:#222;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-dark.place-left:after{border-left-color:#222;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-dark.place-right:after{border-right-color:#222;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-dark.border{border:1px solid #fff}.__react_component_tooltip.type-dark.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-dark.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-dark.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-dark.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top-color:#8DC572;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-success.place-bottom:after{border-bottom-color:#8DC572;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-success.place-left:after{border-left-color:#8DC572;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-success.place-right:after{border-right-color:#8DC572;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-success.border{border:1px solid #fff}.__react_component_tooltip.type-success.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-success.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-success.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-success.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top-color:#F0AD4E;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom-color:#F0AD4E;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-warning.place-left:after{border-left-color:#F0AD4E;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-warning.place-right:after{border-right-color:#F0AD4E;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-warning.border{border:1px solid #fff}.__react_component_tooltip.type-warning.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-warning.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-warning.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-warning.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top-color:#BE6464;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-error.place-bottom:after{border-bottom-color:#BE6464;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-error.place-left:after{border-left-color:#BE6464;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-error.place-right:after{border-right-color:#BE6464;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-error.border{border:1px solid #fff}.__react_component_tooltip.type-error.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-error.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-error.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-error.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top-color:#337AB7;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-info.place-bottom:after{border-bottom-color:#337AB7;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-info.place-left:after{border-left-color:#337AB7;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-info.place-right:after{border-right-color:#337AB7;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-info.border{border:1px solid #fff}.__react_component_tooltip.type-info.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-info.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-info.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-info.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top-color:#fff;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-light.place-bottom:after{border-bottom-color:#fff;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-light.place-left:after{border-left-color:#fff;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-light.place-right:after{border-right-color:#fff;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-light.border{border:1px solid #222}.__react_component_tooltip.type-light.border.place-top:before{border-top:8px solid #222}.__react_component_tooltip.type-light.border.place-bottom:before{border-bottom:8px solid #222}.__react_component_tooltip.type-light.border.place-left:before{border-left:8px solid #222}.__react_component_tooltip.type-light.border.place-right:before{border-right:8px solid #222}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:before{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-top:after{border-left:8px solid transparent;border-right:8px solid transparent;bottom:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:before{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom:after{border-left:8px solid transparent;border-right:8px solid transparent;top:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:before{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-left:after{border-top:5px solid transparent;border-bottom:5px solid transparent;right:-6px;top:50%;margin-top:-4px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:before{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right:after{border-top:5px solid transparent;border-bottom:5px solid transparent;left:-6px;top:50%;margin-top:-4px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}'},function(e,t,n){var r=n(37);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(38)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,s=0,c=[],f=n(39);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=g(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var b,_=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),i=n(1),a=n.n(i),l=(n(11),n(12),n(0)),u=n.n(l),s=n(2),c=n.n(s),f=n(5),p=n(7),d=n.n(p);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),e}function y(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var x=["name","email","organization","on"],E=["email","file","image","password","url"],T=function(e){function t(e){var n;return m(this,t),(n=y(this,b(t).call(this,e))).state={checked:n.props.checked||!1},n}return _(t,l["Component"]),v(t,[{key:"toggleCheckbox",value:function(){var e=this;this.setState({checked:!this.state.checked},function(){e.props.cb&&e.props.cb(e.state.checked)})}},{key:"componentWillReceiveProps",value:function(e){e.checked&&e.checked!=this.state.checked&&this.setState({checked:e.checked})}},{key:"render",value:function(){var e=this.props.id?"chq-".concat(this.props.id):null;return u.a.createElement("div",{className:"custom-control custom-checkbox"},u.a.createElement(d.a,null),u.a.createElement("input",{id:e,type:"checkbox",class:"custom-control-input",name:this.props.name||null,checked:this.state.checked,onChange:this.toggleCheckbox.bind(this)}),u.a.createElement("label",{className:"custom-control-label noselect",for:e,"data-tip":this.props.tooltip||!1},this.props.label))}}]),t}(),S=function(e){function t(){return m(this,t),y(this,b(t).apply(this,arguments))}return _(t,l["Component"]),v(t,[{key:"render",value:function(){var e;return this.props.label&&(e=u.a.createElement("label",{className:!!this.props.required&&"required",htmlFor:this.props.htmlFor||null},this.props.label)),u.a.createElement("div",{className:"form-group"},e,this.props.children)}}]),t}(),C=function(e){function t(e){var n;return m(this,t),(n=y(this,b(t).call(this,e))).state={value:n.props.value},n}return _(t,l["Component"]),v(t,[{key:"handleChange",value:function(e){this.setState({value:e.target.value}),this.props.cb&&this.props.cb(e.target.value)}},{key:"getAutoComplete",value:function(){if(x.includes(this.props.autoComplete))return this.props.autoComplete;switch(this.props.autoComplete){case"phone":return"tel";case"password":return"current-password";case"newpassword":return"new-password";default:return"off"}}},{key:"getType",value:function(){if(!this.props.type)throw"You must provide a type for the input field";if(E.includes(this.props.type))return this.props.type;switch(this.props.type){case"date":return"datetime-local";default:return"text"}}},{key:"componentWillReceiveProps",value:function(e){this.state.value!=e.value&&this.setState({value:e.value})}},{key:"render",value:function(){return u.a.createElement("input",{id:this.props.id||!1,type:this.getType(),className:this.props.inputClass||"form-control",name:this.props.name||!1,value:this.state.value,placeholder:this.props.placeHolder||!1,autocomplete:this.getAutoComplete(),disabled:!!this.props.disabled,readonly:!!this.props.readOnly,required:!!this.props.required,autoFocus:!!this.props.autoFocus,minLength:this.props.minLength||!1,maxLength:this.props.maxLength||!1,onChange:this.handleChange.bind(this),onPaste:this.handleChange.bind(this)})}}]),t}(),k=function(e){function t(e){var n;return m(this,t),(n=y(this,b(t).call(this,e))).state={value:n.props.value},n}return _(t,l["Component"]),v(t,[{key:"handleChange",value:function(e){this.setState({value:e.target.value}),this.props.cb&&this.props.cb(e.target.value)}},{key:"componentWillReceiveProps",value:function(e){this.state.value!=e.value&&this.setState({value:e.value})}},{key:"render",value:function(){var e,t=this;return this.props.options&&(e=this.props.options.map(function(e){var n=!1;return t.props.selected&&t.props.selected.toLowerCase()==e.toLowerCase()&&(n=!0),u.a.createElement("option",{value:e,selected:n},e)})),u.a.createElement("select",{id:this.props.id||!1,className:this.props.inputClass||"form-control",name:this.props.name||!1,disabled:!!this.props.disabled,readonly:!!this.props.readOnly,required:!!this.props.required,onChange:this.handleChange.bind(this)},e)}}]),t}(),O=function(e){function t(e){var n;return m(this,t),(n=y(this,b(t).call(this,e))).state={value:n.props.value},n}return _(t,l["Component"]),v(t,[{key:"handleChange",value:function(e){this.setState({value:e.target.value}),this.props.cb&&this.props.cb(e.target.value)}},{key:"getAutoComplete",value:function(){if(x.includes(this.props.autoComplete))return this.props.autoComplete;switch(this.props.autoComplete){case"phone":return"tel";case"password":return"current-password";case"newpassword":return"new-password";default:return"off"}}},{key:"componentWillReceiveProps",value:function(e){this.state.value!=e.value&&this.setState({value:e.value})}},{key:"getCharCount",value:function(){return this.state.value&&this.state.value.length?this.state.value.length:0}},{key:"render",value:function(){var e;return this.props.maxLength&&(e=u.a.createElement("span",{className:"d-block text-right"},this.props.maxLength-this.getCharCount()," characters remaining")),u.a.createElement(u.a.Fragment,null,u.a.createElement("textarea",{id:this.props.id||!1,className:this.props.inputClass||"form-control",name:this.props.name||!1,value:this.state.value,placeholder:this.props.placeHolder||!1,autocomplete:this.getAutoComplete(),rows:this.props.rows||!1,disabled:!!this.props.disabled,readonly:!!this.props.readOnly,required:!!this.props.required,autoFocus:!!this.props.autoFocus,minLength:this.props.minLength||!1,maxLength:this.props.maxLength||!1,onChange:this.handleChange.bind(this)}),e)}}]),t}();function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var L=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),j(this,A(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(t,l["Component"]),n=t,(r=[{key:"getModalSize",value:function(){switch(this.props.size){case"large":return"modal-lg";case"small":return"modal-sm";default:return""}}},{key:"render",value:function(){var e;return this.props.title&&(e=u.a.createElement("div",{className:"modal-header"},u.a.createElement("h5",{className:"modal-title"},this.props.title),u.a.createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},u.a.createElement("span",{"aria-hidden":"true"},"Ã")))),u.a.createElement("div",{id:this.props.id||!1,className:"modal fade",tabindex:"-1",role:"dialog"},u.a.createElement("div",{className:"modal-dialog ".concat(this.getModalSize()),role:"document"},u.a.createElement("div",{className:"modal-content"},e,u.a.createElement("div",{className:"modal-body"},this.props.children))))}}])&&N(n.prototype,r),o&&N(n,o),t}();function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return t&&M(e.prototype,t),n&&M(e,n),e}function F(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function U(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}function W(e,t){return(W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var B=function(e){function t(e){var n;return R(this,t),(n=F(this,H(t).call(this,e))).state={width:0},n.contentRef=u.a.createRef(),n}return U(t,l["Component"]),q(t,[{key:"componentDidMount",value:function(){var e=c.a.findDOMNode(this.contentRef.current).getBoundingClientRect().width;if(e>this.state.width){var t=Math.round(e);t=Math.trunc(t),this.setState({width:t})}}},{key:"handleClick",value:function(){this.props.cb&&this.props.cb()}},{key:"getClass",value:function(){return this.props.btnClass||"btn btn-primary"}},{key:"getType",value:function(){return this.props.type||"button"}},{key:"render",value:function(){var e;return e=this.props.pending?u.a.createElement("i",{className:"far fa-spinner-third fa-spin"}):this.props.children||"",u.a.createElement("button",{className:this.getClass(),type:this.getType(),disabled:this.props.disabled||this.props.pending,style:{minWidth:"".concat(this.state.width,"px")},ref:this.contentRef,onClick:this.handleClick.bind(this)},e)}}]),t}(),z=function(e){function t(){return R(this,t),F(this,H(t).apply(this,arguments))}return U(t,l["Component"]),q(t,[{key:"size",value:function(){switch(this.props.size){case"sm":return"btn-group-sm";case"lg":return"btn-group-lg"}}},{key:"direction",value:function(){return"btn-group".concat("vertical"==this.props.direction?"-vertical":"")}},{key:"render",value:function(){return u.a.createElement("div",{role:"group",class:"".concat(this.direction()," ").concat(this.size()," ").concat(this.props.className||"")},this.props.children)}}]),t}(),$=function(e){function t(e){var n;return R(this,t),(n=F(this,H(t).call(this,e))).state={confirmPending:!1,halt:!1,width:0},n.contentRef=u.a.createRef(),n}return U(t,l["Component"]),q(t,[{key:"componentDidMount",value:function(){var e=c.a.findDOMNode(this.contentRef.current).getBoundingClientRect().width;if(e>this.state.width){var t=Math.round(e);t=Math.trunc(t),this.setState({width:t})}}},{key:"handleClick",value:function(e){var t=this;this.state.halt||(this.state.confirmPending?this.setState({confirmPending:!1},function(){t.props.cb()}):this.setState({confirmPending:!0,halt:!0},function(){Object(f.setTimeout)(function(){t.setState({halt:!1})},500),Object(f.setTimeout)(function(){t.setState({confirmPending:!1})},5e3)}))}},{key:"getClass",value:function(){var e=this.state.confirmPending?"btn-confirm":"",t=this.props.btnClass||"btn btn-primary";return"".concat(t," ").concat(e)}},{key:"render",value:function(){var e;return e=this.props.pending?u.a.createElement("i",{className:"far fa-spinner-third fa-spin"}):this.props.children||"",u.a.createElement("button",{className:this.getClass(),type:"button",disabled:this.props.disabled||this.props.pending,style:{minWidth:"".concat(this.state.width,"px")},ref:this.contentRef,onClick:this.handleClick.bind(this)},u.a.createElement("span",null,e))}}]),t}(),V=function(e){function t(e){var n;return R(this,t),(n=F(this,H(t).call(this,e))).state={disabled:!!n.props.confirmPhrase},n}return U(t,l["Component"]),q(t,[{key:"confirmed",value:function(){this.state.disabled||(this.toggleModal("hide"),this.props.cb&&this.props.cb())}},{key:"toggleModal",value:function(e){a()("#confirmodal").modal(e||"toggle")}},{key:"updateConfirmPhrase",value:function(e){this.setState({disabled:e.toLowerCase()!=this.props.confirmPhrase.toLowerCase()})}},{key:"render",value:function(){var e;return this.props.confirmPhrase&&(e=u.a.createElement(S,null,u.a.createElement("label",null,'Please type "',this.props.confirmPhrase,'" to confirm.'),u.a.createElement(C,{type:"string",cb:this.updateConfirmPhrase.bind(this)}))),u.a.createElement(l.Fragment,null,u.a.createElement(B,{btnClass:this.props.btnClass||"btn btn-danger",cb:this.toggleModal.bind(this)},this.props.children),u.a.createElement(L,{id:"confirmodal"},u.a.createElement("h4",null,u.a.createElement("i",{className:"far fa-exclamation-triangle pr-3"}),"Really ",this.props.question.toLowerCase(),"?"),u.a.createElement("hr",{className:"pb-2"}),u.a.createElement("p",null,this.props.explanation),e,u.a.createElement(S,null,u.a.createElement($,{btnClass:"btn btn-danger float-right",disabled:this.state.disabled,cb:this.confirmed.bind(this)},this.props.actionText||this.props.question),u.a.createElement(B,{btnClass:"btn btn-dark float-right mx-1",cb:this.toggleModal.bind(this,"hide")},"No"))))}}]),t}();function Q(e){return(Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t){return!t||"object"!==Q(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function X(e){return(X=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var J=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Y(this,X(t).call(this,e))).state={requestPending:!1,requestFailed:"",passwords:{1:null,2:null}},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(t,l["Component"]),n=t,(r=[{key:"passwordComparer",value:function(e,t){var n=this.state.passwords;n={1:1==e?t:n[1],2:2==e?t:n[2]},this.setState({passwords:n})}},{key:"passwordConditions",value:function(){var e={label:"",disabled:!0};return this.state.passwords[1]&&this.state.passwords[1].length>5?this.state.passwords[1]==this.state.passwords[2]?e.disabled=!1:e.label="Your new passwords do not match":e.label="Password must be at least six characters",e}},{key:"updateAccountPassword",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0}),a.a.ajax({type:"post",url:"".concat(this.props.baseUri,"/password"),data:a()("#password").serialize()}).done(function(){t.setState({requestPending:!1,requestFailed:"",passwords:{1:0,2:0}}),a()("#password").trigger("reset")}).fail(function(e){t.setState({requestPending:!1,requestFailed:e.responseText}),console.error("[ChangePassword@updateAccountPassword] Error updating password: ",e.responseText)})}},{key:"render",value:function(){return u.a.createElement("form",{id:"password",onSubmit:this.updateAccountPassword.bind(this)},u.a.createElement(S,{label:"Your Current Password",htmlFor:"currentPassword",required:!0},u.a.createElement(C,{id:"currentPassword",type:"password",name:"currentPassword",autoComplete:"password",required:!0})),u.a.createElement(S,{label:"New Password",htmlFor:"newPassword",required:!0},u.a.createElement(C,{id:"newPassword",type:"password",name:"newPassword",autoComplete:"newpassword",cb:this.passwordComparer.bind(this,1),required:!0})),u.a.createElement(S,{label:"Confirm New Password",htmlFor:"confirmPassword",required:!0},u.a.createElement(C,{id:"confirmPassword",type:"password",name:"confirmPassword",autoComplete:"newpassword",cb:this.passwordComparer.bind(this,2),required:!0}),u.a.createElement("small",{className:"text-danger"},this.passwordConditions().label),u.a.createElement("small",{className:"text-danger d-block"},this.state.requestFailed)),u.a.createElement(B,{btnClass:"btn btn-primary d-block",type:"submit",disabled:this.passwordConditions().disabled,pending:this.state.requestPending},"Update Password"))}}])&&K(n.prototype,r),o&&K(n,o),t}();function Z(e){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function te(e,t){return!t||"object"!==Z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ne(e){return(ne=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function re(e,t){return(re=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var oe=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=te(this,ne(t).call(this,e))).state={requestPending:!1,account:{id:null,email:null,phoneNumber:null},error:null},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&re(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentWillReceiveProps",value:function(e){e.account&&e.account!=this.state.account&&this.setState({account:{id:e.account.id,name:e.account.name,email:e.account.email,phoneNumber:e.account.phoneNumber}})}},{key:"updateVal",value:function(e,t){var n=this.state.account;switch(e){case"name":n.name=t;break;case"email":n.email=t;break;case"phoneNumber":n.phoneNumber=t}this.setState({account:n})}},{key:"updateAccount",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0}),a.a.ajax({type:"post",url:"".concat(this.props.baseUri),data:{id:this.state.account.id,name:this.state.account.name,email:this.state.account.email,phone:this.state.account.phoneNumber}}).done(function(){t.setState({requestPending:!1}),t.props.u()}).fail(function(e){t.setState({requestPending:!1}),console.error("[Settings@updateAccount] Error updating account settings: ",e.responseText)})}},{key:"render",value:function(){return u.a.createElement(l.Fragment,null,u.a.createElement("form",{id:"settings",onSubmit:this.updateAccount.bind(this)},u.a.createElement(S,{label:"Account Name",htmlFor:"accountName",required:!0},u.a.createElement(C,{id:"accountName",type:"text",autoComplete:"name",value:this.state.account.name,cb:this.updateVal.bind(this,"name"),required:!0})),u.a.createElement(S,{label:"Email",htmlFor:"accountEmail",required:!0},u.a.createElement(C,{id:"accountEmail",type:"email",autoComplete:"email",value:this.state.account.email,cb:this.updateVal.bind(this,"email"),required:!0})),u.a.createElement(S,{label:"Phone Number",htmlFor:"accountPhone"},u.a.createElement(C,{id:"accountPhone",type:"text",value:this.state.account.phoneNumber,autoComplete:"phone",cb:this.updateVal.bind(this,"phoneNumber")})),u.a.createElement(B,{btnClass:"btn btn-primary mt-4",pending:this.state.requestPending,type:"submit"},"Update Settings")))}}])&&ee(n.prototype,r),o&&ee(n,o),t}();function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return!t||"object"!==ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ce=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),le(this,ue(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(t,l["Component"]),n=t,(r=[{key:"toggleChannel",value:function(e,t){var n=this;a.a.ajax({type:t?"post":"delete",url:"".concat(this.props.baseUri,"/channel/").concat(e)}).done(function(){n.props.u()}).fail(function(e){Console.err("[Notifications@toggleChannel] Error leaving/removing a notification channel: ".concat(e.ResponseText))})}},{key:"render",value:function(){var e,t=this;return this.props.channels&&(e=this.props.channels.map(function(e,n){for(var r=!1,o=0;o<t.props.channelMemberships.length;o++)t.props.channelMemberships[o]!=e.id||(r=!0);return u.a.createElement(T,{id:e.id,label:e.name,tooltip:e.description,checked:r,cb:t.toggleChannel.bind(t,e.id)})})),u.a.createElement(l.Fragment,null,u.a.createElement("p",null,"Send me emails when..."),e)}}])&&ae(n.prototype,r),o&&ae(n,o),t}();function fe(e){return(fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function de(e,t){return!t||"object"!==fe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function he(e){return(he=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ge="/admin/account",ve=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=de(this,he(t).call(this,e))).state={account:null},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;a.a.ajax({type:"get",url:"".concat(ge,"/data")}).done(function(t){e.setState({account:t.account,channels:t.availableChannels})}).fail(function(e){console.error("[Account@getData] Error getting data: ",e.responseText)})}},{key:"getChannelMemberships",value:function(){return this.state.account?this.state.account.notificationChannels:null}},{key:"render",value:function(){return u.a.createElement("div",{className:"container"},u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-12 pb-3"},u.a.createElement("h1",{className:"text-center"},"Account Settings")),u.a.createElement("div",{className:"col-12"},u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement(oe,{account:this.state.account,u:this.getData.bind(this),baseUri:ge})),u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement(J,{baseUri:ge})),u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement(ce,{baseUri:ge,channels:this.state.channels,channelMemberships:this.getChannelMemberships(),u:this.getData.bind(this)}))))))}}])&&pe(n.prototype,r),o&&pe(n,o),t}();function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _e(e,t){return!t||"object"!==ye(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xe(e,t){return(xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_accountSettings")&&Object(s.render)(u.a.createElement(ve,null),document.getElementById("react_accountSettings"));var Ee=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=_e(this,we(t).call(this,e))).state={loginFailed:!1,loginPending:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&xe(e,t)}(t,l["Component"]),n=t,(r=[{key:"attemptLogin",value:function(e){var t=this;e.preventDefault(),this.setState({loginPending:!0}),a.a.ajax({type:"post",url:"".concat("/login"),data:a()("form").serialize()}).done(function(){window.location.replace("/admin")}).fail(function(e){t.setState({loginFailed:e.responseText,loginPending:!1}),console.error("[Login@attemptLogin] Error logging in: ",e.responseText)})}},{key:"render",value:function(){var e;return this.state.loginFailed&&(e=u.a.createElement(S,null,u.a.createElement("p",{className:"text-danger"},this.state.loginFailed))),u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",{onSubmit:this.attemptLogin.bind(this)},u.a.createElement("h1",{className:"sr-only"},"Login Form"),u.a.createElement("h1",{className:"display-4 mb-5"},"Log In"),u.a.createElement(S,null,u.a.createElement(C,{type:"email",name:"email",placeHolder:"Email",autoComplete:"email",autoFocus:!0,required:!0})),u.a.createElement(S,null,u.a.createElement(C,{type:"password",name:"password",placeHolder:"Password",autoComplete:"Password",required:!0})),e,u.a.createElement(S,null,u.a.createElement(B,{btnClass:"btn btn-primary btn-block",type:"submit",pending:this.state.loginPending},"Log In")),u.a.createElement("a",{className:"forgot",href:"/reset-password"},"Forgot your email or password?")))}}])&&be(n.prototype,r),o&&be(n,o),t}();function Te(e){return(Te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ce(e,t){return!t||"object"!==Te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_login")&&Object(s.render)(u.a.createElement(Ee,null),document.getElementById("react_login"));var Pe=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ce(this,ke(t).call(this,e))).state={requestFailed:!1,requestPending:!1,emailSent:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t)}(t,l["Component"]),n=t,(r=[{key:"attemptRequest",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0}),this.state.emailSent||a.a.ajax({type:"post",url:"".concat("/reset-password"),data:a()("form").serialize()}).done(function(){t.setState({requestPending:!1,emailSent:!0,requestFailed:!1})}).fail(function(e){t.setState({requestPending:!1,requestFailed:e.responseText}),console.error("[RequestPasswordReset@attemptrequest] Error requesting new password: ",e.responseText)})}},{key:"render",value:function(){var e,t,n;return this.state.requestFailed&&(e=u.a.createElement(S,null,u.a.createElement("p",{className:"text-danger"},"Something went wrong. Please try again."))),this.state.emailSent&&(t=u.a.createElement(S,null,u.a.createElement("p",{className:"text-success"},"We've sent you an email with instructions. It may take up to five minutes to appear."))),this.state.emailSent||(n=u.a.createElement(S,null,u.a.createElement(B,{btnClass:"btn btn-primary btn-block",type:"submit",pending:this.state.requestPending}," Reset My Password"))),u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",{onSubmit:this.attemptRequest.bind(this)},u.a.createElement("h1",{className:"sr-only"},"Request password reset form"),u.a.createElement("h1",{className:"display-4 mb-5"},"Password Reset"),u.a.createElement(S,null,u.a.createElement(C,{type:"email",name:"email",placeHolder:"Email",autoComplete:"email",autoFocus:!0,required:!0})),e,t,n,u.a.createElement("a",{className:"forgot",href:"/login"},"Know your details? Login Here")))}}])&&Se(n.prototype,r),o&&Se(n,o),t}();function Ne(e){return(Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function je(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,t){return!t||"object"!==Ne(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function De(e){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Le(e,t){return(Le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_requestPasswordreset")&&Object(s.render)(u.a.createElement(Pe,null),document.getElementById("react_requestPasswordreset"));var Ie=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ae(this,De(t).call(this,e))).state={requestFailed:!1,requestPending:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Le(e,t)}(t,l["Component"]),n=t,(r=[{key:"attemptRequest",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0}),a.a.ajax({type:"post",url:"".concat(window.location.href),data:a()("form").serialize()}).done(function(){location.replace("/login")}).fail(function(e){t.setState({requestPending:!1,requestFailed:e.responseText}),console.error("[ResetPassword@attemptRequest] Error changing password: ",e.responseText)})}},{key:"render",value:function(){var e;return this.state.requestFailed&&(e=u.a.createElement(S,null,u.a.createElement("p",{className:"text-danger"},this.state.requestFailed))),u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",{onSubmit:this.attemptRequest.bind(this)},u.a.createElement("h1",{className:"sr-only"},"New email password form"),u.a.createElement("h1",{className:"display-4 mb-5"},"New Password"),u.a.createElement(S,null,u.a.createElement(C,{type:"email",name:"email",placeHolder:"Email",autoComplete:"email",autoFocus:!0,required:!0})),u.a.createElement(S,null,u.a.createElement(C,{type:"password",name:"password",placeHolder:"New Password",autoComplete:"new-password",minLength:"6",required:!0})),u.a.createElement(S,null,u.a.createElement(C,{type:"password",name:"passswordConfirm",placeHolder:"Retype Password",autoComplete:"new-password",minLength:"6",required:!0})),e,u.a.createElement(S,null,u.a.createElement(B,{btnClass:"btn btn-primary btn-block",type:"submit",pending:this.state.requestPending}," Reset My Password"))))}}])&&je(n.prototype,r),o&&je(n,o),t}();function Re(e){return(Re="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qe(e,t){return!t||"object"!==Re(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Fe(e){return(Fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_resetPassword")&&Object(s.render)(u.a.createElement(Ie,null),document.getElementById("react_resetPassword"));var Ue=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=qe(this,Fe(t).call(this,e))).state={requestFailed:!1,requestPending:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(t,l["Component"]),n=t,(r=[{key:"attemptRegistration",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0}),a.a.ajax({type:"post",url:"".concat("/register"),data:a()("#register").serialize()}).done(function(){window.location.replace("/admin-portal/users")}).fail(function(e){t.setState({requestFailed:e.responseText,requestPending:!1}),console.error("[Register@attemptLogin] Error registering new account: ",e.responseText)})}},{key:"render",value:function(){var e=u.a.createElement("p",{className:"text-dark"},"The user will be emailed their login information.");return this.state.requestFailed&&(e=u.a.createElement(S,null,u.a.createElement("p",{className:"text-danger"},this.state.requestFailed))),u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",{id:"register",onSubmit:this.attemptRegistration.bind(this)},u.a.createElement("h1",{className:"sr-only"},"Login Form"),u.a.createElement("h1",{className:"display-4 mb-5"},"Create a New User"),u.a.createElement(S,null,u.a.createElement(C,{type:"text",name:"name",placeHolder:"Name",autoComplete:"name",autoFocus:!0,required:!0})),u.a.createElement(S,null,u.a.createElement(C,{type:"email",name:"email",placeHolder:"Email",autoComplete:"email",required:!0})),e,u.a.createElement(S,null,u.a.createElement(B,{btnClass:"btn btn-primary btn-block",type:"submit",pending:this.state.requestPending},"Create Account"))))}}])&&Me(n.prototype,r),o&&Me(n,o),t}();function We(e){return(We="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Be(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return!t||"object"!==We(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $e(e){return($e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ve(e,t){return(Ve=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_register")&&Object(s.render)(u.a.createElement(Ue,null),document.getElementById("react_register"));var Qe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ze(this,$e(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ve(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e,t;return e="view"==this.props.mode?u.a.createElement("input",{className:"form-control-plaintext",type:"text",value:this.props.value,disabled:!0}):u.a.createElement(C,{id:"email_user:".concat(this.props.accountId),type:"email",autoComplete:"email",value:this.props.value,cb:this.props.cb}),this.props.error&&(t=u.a.createElement("small",{className:"text-danger"},this.props.error)),u.a.createElement(S,{label:"Email",htmlFor:"email_user:".concat(this.props.accountId),required:!0},e,t)}}])&&Be(n.prototype,r),o&&Be(n,o),t}();function Ke(e){return(Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ye(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e,t){return!t||"object"!==Ke(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ge(e){return(Ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Je(e,t){return(Je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ze=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Xe(this,Ge(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Je(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e;return e="view"==this.props.mode?u.a.createElement("input",{className:"form-control-plaintext",type:"text",value:this.props.value,disabled:!0}):u.a.createElement(C,{id:"phone_user:".concat(this.props.accountId),type:"text",autoComplete:"phone",value:this.props.value,cb:this.props.cb}),u.a.createElement(S,{label:"Phone",htmlFor:"phone_user:".concat(this.props.accountId)},e)}}])&&Ye(n.prototype,r),o&&Ye(n,o),t}();function et(e){return(et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nt(e,t){return!t||"object"!==et(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ot(e,t){return(ot=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var it=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),nt(this,rt(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ot(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e;return e="view"==this.props.mode?u.a.createElement("input",{className:"form-control-plaintext",type:"text",value:this.props.value,disabled:!0}):u.a.createElement(k,{id:"status_user:".concat(this.props.accountId),options:["Active","Inactive"],selected:this.props.value,cb:this.props.cb}),u.a.createElement(S,{label:"Status",htmlFor:"status_user:".concat(this.props.accountId)},e)}}])&&tt(n.prototype,r),o&&tt(n,o),t}();function at(e){return(at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ut(e,t){return!t||"object"!==at(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function st(e){return(st=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,t){return(ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ft=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ut(this,st(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ct(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){return u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement("label",null,"Account Created"),u.a.createElement("p",null,this.props.timestamps.signup)),u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement("label",null,"Last Login"),u.a.createElement("p",null,this.props.timestamps.lastLogin)))}}])&&lt(n.prototype,r),o&&lt(n,o),t}();function pt(e){return(pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ht(e,t){return!t||"object"!==pt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function mt(e){return(mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function gt(e,t){return(gt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var vt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ht(this,mt(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&gt(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e,t;return this.props.cardHead&&(e=u.a.createElement("div",{className:"card-header"},u.a.createElement("h5",{className:"mb-0"},this.props.cardHead))),this.props.cardFoot&&(t=u.a.createElement("div",{className:"card-footer"},this.props.cardFoot)),u.a.createElement("div",{className:"card"},e,u.a.createElement("div",{class:"card-body"},this.props.children),t)}}])&&dt(n.prototype,r),o&&dt(n,o),t}();function yt(e){if(e)return e.includes("http://")||e.includes("https://")&&!e.includes(window.location.hostname)}function bt(e){return(bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function wt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xt(e,t,n){return t&&wt(e.prototype,t),n&&wt(e,n),e}function Et(e,t){return!t||"object"!==bt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Tt(e){return(Tt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function St(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ct(e,t)}function Ct(e,t){return(Ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var kt="view",Ot="edit",Pt=function(e){function t(e){var n;return _t(this,t),(n=Et(this,Tt(t).call(this,e))).state={requestPending:!1},n}return St(t,l["Component"]),xt(t,[{key:"DeleteUser",value:function(){var e=this;this.setState({requestPending:!0},function(){a.a.ajax({type:"delete",url:"".concat(e.props.baseUri,"/").concat(e.props.accountId)}).done(function(){e.props.u(),e.setState({requestPending:!1})}).fail(function(t){console.error("[DeleteUser@DeleteUser] Error deleting the account: ",t.responseText),e.setState({requestPending:!1})})})}},{key:"render",value:function(){return u.a.createElement($,{btnClass:"btn btn-danger mt-3 mx-1",cb:this.DeleteUser.bind(this),pending:this.state.requestPending},"Delete User ",u.a.createElement("i",{className:"fas fa-user-times"}))}}]),t}(),Nt=function(e){function t(e){var n;return _t(this,t),(n=Et(this,Tt(t).call(this,e))).state={requestPending:!1},n}return St(t,l["Component"]),xt(t,[{key:"ResetPassword",value:function(){var e=this;this.setState({requestPending:!0},function(){a.a.ajax({type:"patch",url:"".concat(e.props.baseUri,"/").concat(e.props.accountId)}).done(function(){e.props.u(),e.setState({requestPending:!1})}).fail(function(t){console.error("[ResetPassword@ResetPassword] Error flagging account for a password reset: ",t.responseText),e.setState({requestPending:!1})})})}},{key:"render",value:function(){return u.a.createElement($,{btnClass:"btn btn-dark mt-3 mx-1",cb:this.ResetPassword.bind(this),pending:this.state.requestPending},"Reset Password ",u.a.createElement("i",{className:"fas fa-user-lock"}))}}]),t}(),jt=function(e){function t(){return _t(this,t),Et(this,Tt(t).apply(this,arguments))}return St(t,l["Component"]),xt(t,[{key:"render",value:function(){var e;return e=this.props.mode==kt?u.a.createElement(B,{btnClass:"btn btn-info btn-sm",cb:this.props.setModeCb.bind(this,Ot)},"Edit ",u.a.createElement("i",{className:"fas fa-pencil"})):u.a.createElement("div",{role:"group",class:"btn-group btn-group-sm"},u.a.createElement($,{btnClass:"btn btn-danger",cb:this.props.cancelCb.bind(this)},"Cancel ",u.a.createElement("i",{className:"fas fa-times"})),u.a.createElement(B,{btnClass:"btn btn-success",cb:this.props.updateCb.bind(this)},"Save ",u.a.createElement("i",{className:"fas fa-check"}))),u.a.createElement("div",{className:"text-center pb-2"},e)}}]),t}();function At(e){return(At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Lt(e,t){return!t||"object"!==At(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function It(e){return(It=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Rt(e,t){return(Rt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Mt={View:"view",Edit:"edit"},qt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Lt(this,It(t).call(this,e))).state={mode:Mt.View,account:o.a.cloneDeep(n.props.account),error:null},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rt(e,t)}(t,l["Component"]),n=t,(r=[{key:"updateVal",value:function(e,t){var n=this.state.account;switch(e){case"email":n.email=t;break;case"phone":n.phoneNumber=t;break;case"status":n.active="Active"==t}this.setState({account:n})}},{key:"setMode",value:function(e){this.setState({mode:e})}},{key:"cancel",value:function(){this.setState({mode:Mt.View,account:o.a.cloneDeep(this.props.account)})}},{key:"updateAccount",value:function(){var e,t=this;e=this.state.account.email,RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?").test(e)?a.a.ajax({type:"put",url:"".concat(this.props.baseUri,"/").concat(this.state.account.id),data:{email:this.state.account.email,phone:this.state.account.phoneNumber,status:this.state.account.active}}).done(function(){t.props.u(),t.setState({mode:Mt.View,error:null})}).fail(function(e){console.error("[AccountCard@updateAccount] Error updating account data: ",e.responseText)}):this.setState({error:"Please enter a valid email address."},function(){console.error("".concat(t.state.account.email," is not an RFC2822 compliant email address."))})}},{key:"render",value:function(){return u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement(vt,{onSubmit:this.updateAccount.bind(this)},u.a.createElement("h4",{class:"text-center"},this.state.account.name||""),u.a.createElement(jt,{mode:this.state.mode,setModeCb:this.setMode.bind(this),cancelCb:this.cancel.bind(this),updateCb:this.updateAccount.bind(this)}),u.a.createElement(Qe,{mode:this.state.mode,value:this.state.account.email,accountId:this.props.accountId,error:this.state.error,cb:this.updateVal.bind(this,"email")}),u.a.createElement(Ze,{mode:this.state.mode,value:this.state.account.phoneNumber,accountId:this.props.account.id,cb:this.updateVal.bind(this,"phone")}),u.a.createElement(it,{mode:this.state.mode,value:this.state.account.active?"Active":"Inactive",accountId:this.props.account.id,cb:this.updateVal.bind(this,"status")}),u.a.createElement(ft,{timestamps:this.state.account.timestamps}),u.a.createElement(Nt,{accountId:this.props.account.id,baseUri:this.props.baseUri,u:this.props.u}),u.a.createElement(Pt,{accountId:this.props.account.id,baseUri:this.props.baseUri,u:this.props.u})))}}])&&Dt(n.prototype,r),i&&Dt(n,i),t}();function Ft(e){return(Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ht(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ut(e,t){return!t||"object"!==Ft(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wt(e){return(Wt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bt(e,t){return(Bt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ut(this,Wt(t).call(this,e))).state={accounts:null},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Bt(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var e=this;a.a.ajax({type:"get",url:"".concat("/admin/users","/data")}).done(function(t){e.setState({accounts:null},function(){e.setState({accounts:t})})}).fail(function(e){console.error("[User@getData] Error getting data: ",e.responseText)})}},{key:"render",value:function(){var e,t=this;return this.state.accounts&&(e=this.state.accounts.map(function(e,n){return u.a.createElement(qt,{account:e,u:t.getData.bind(t),baseUri:"/admin/users"})})),u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-12"},u.a.createElement("h1",{className:"text-center"},"Manage Users"),u.a.createElement("p",{className:"text-center"},"Active accounts have access to all functions, ",u.a.createElement("a",{href:"/register"},"click here")," to register a new account.")),e)}}])&&Ht(n.prototype,r),o&&Ht(n,o),t}();function $t(e){return($t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qt(e,t){return!t||"object"!==$t(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Kt(e){return(Kt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Yt(e,t){return(Yt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_users")&&Object(s.render)(u.a.createElement(zt,null),document.getElementById("react_users"));var Xt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Qt(this,Kt(t).call(this,e))).state={pages:null,filter:"main"},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yt(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;if(!document.getElementById("react_PagesDirectory"))throw"Failed to attach component. Attribute 'data-filter' was not found";this.setState({filter:document.getElementById("react_PagesDirectory").getAttribute("data-filter")},function(){a.a.ajax({type:"get",url:"".concat("/admin/web/pages","/data?filter=").concat(e.state.filter)}).done(function(t){e.setState({pages:t})}).fail(function(e){console.log(e.responseText)})})}},{key:"render",value:function(){return u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-12"},u.a.createElement("h1",{className:"text-center"},"Pages")))}}])&&Vt(n.prototype,r),o&&Vt(n,o),t}();function Gt(e){return(Gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Jt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Zt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function en(e,t,n){return t&&Zt(e.prototype,t),n&&Zt(e,n),e}function tn(e,t){return!t||"object"!==Gt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function nn(e){return(nn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function rn(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&on(e,t)}function on(e,t){return(on=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_PagesDirectory")&&Object(s.render)(u.a.createElement(Xt,null),document.getElementById("react_PagesDirectory"));var an=function(e){function t(e){var n;return Jt(this,t),(n=tn(this,nn(t).call(this,e))).state={contact:n.props.contact,requestPending:!1},n}return rn(t,l["Component"]),en(t,[{key:"componentWillReceiveProps",value:function(e){e.contact!=this.state.contact&&this.setState({contact:e.contact})}},{key:"updateState",value:function(e,t){var n=this.state.contact;switch(e){case"email.general":n.email.general=t;break;case"email.bookings":n.email.bookings=t;break;case"phone":n.phone=t;break;case"url.facebook":n.urls.facebook=t;break;case"url.googlePlay":n.urls.googlePlay=t;break;case"url.googleMaps":n.urls.googleMaps=t;break;case"missionStatement":n.missionStatement=t}this.setState({contact:n})}},{key:"submitForm",value:function(e){var t=this;e.preventDefault(),this.setState({requestPending:!0},function(){a.a.ajax({type:"post",url:"".concat(t.props.baseUri,"/contact"),data:{emailGeneral:t.state.contact.email.general,emailBookings:t.state.contact.email.bookings,phone:t.state.contact.phone,urlFacebook:t.state.contact.urls.facebook,urlGooglePlay:t.state.contact.urls.googlePlay,urlGoogleMaps:t.state.contact.urls.googleMaps,missionStatement:t.state.contact.missionStatement}}).done(function(){t.props.u(),t.setState({requestPending:!1})}).fail(function(e){console.error("[ContactInformation@submitForm] Error updating site settings (contact information): ",e.responseText)})})}},{key:"render",value:function(){return u.a.createElement("form",{className:"row",onSubmit:this.submitForm.bind(this)},u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement(ln,{email:this.state.contact.email.general,cb:this.updateState.bind(this,"email.general")}),u.a.createElement(un,{email:this.state.contact.email.bookings,cb:this.updateState.bind(this,"email.bookings")}),u.a.createElement(cn,{number:this.state.contact.phone,cb:this.updateState.bind(this,"phone")}),u.a.createElement(sn,{text:this.state.contact.missionStatement,cb:this.updateState.bind(this,"missionStatement")})),u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement(fn,{url:this.state.contact.urls.facebook,cb:this.updateState.bind(this,"url.facebook")}),u.a.createElement(pn,{url:this.state.contact.urls.googlePlay,cb:this.updateState.bind(this,"url.googlePlay")}),u.a.createElement(dn,{url:this.state.contact.urls.googleMaps,cb:this.updateState.bind(this,"url.googleMaps")}),u.a.createElement(S,{label:"â£"},u.a.createElement(B,{btnClass:"btn btn-primary d-block",type:"submit",pending:this.state.requestPending},"Update Settings ",u.a.createElement("i",{className:"fas fa-check-circle"})))))}}]),t}(),ln=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Email: (General Enquiries)",required:!0},u.a.createElement(C,{type:"email",value:this.props.email,cb:this.props.cb.bind(this)}),u.a.createElement("small",{className:"text-muted pl-2"},u.a.createElement("i",{className:"fas fa-envelope"})," Used by the contact us email form, the footer & in the emails."))}}]),t}(),un=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Email: (Booking Enquiries)",required:!0},u.a.createElement(C,{type:"email",value:this.props.email,cb:this.props.cb.bind(this)}),u.a.createElement("small",{className:"text-muted pl-2"},"Used by the contact us form."))}}]),t}(),sn=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Mission Statement",required:!0},u.a.createElement(O,{maxLength:"200",value:this.props.text,cb:this.props.cb.bind(this)}))}}]),t}(),cn=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Phone:"},u.a.createElement(C,{type:"phone",value:this.props.number,cb:this.props.cb.bind(this)}),u.a.createElement("small",{className:"text-muted pl-2"},u.a.createElement("i",{className:"fas fa-phone"})," Used in the footer & in emails."))}}]),t}(),fn=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Facebook Page URL:"},u.a.createElement(C,{type:"url",value:this.props.url,cb:this.props.cb.bind(this),placeHolder:"e.g. https://example.com"}),u.a.createElement("small",{className:"text-muted pl-2"},u.a.createElement("i",{class:"fab fa-facebook-square"})," Used in the footer & in emails."))}}]),t}(),pn=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"render",value:function(){return u.a.createElement(S,{label:"Discover Deep Cove - App URL:"},u.a.createElement(C,{type:"url",value:this.props.url,cb:this.props.cb.bind(this),placeHolder:"e.g. https://example.com"}),u.a.createElement("small",{className:"text-muted pl-2"},u.a.createElement("i",{className:"fab fa-google-play"})," Used in the footer & in emails."))}}]),t}(),dn=function(e){function t(){return Jt(this,t),tn(this,nn(t).apply(this,arguments))}return rn(t,l["Component"]),en(t,[{key:"handleInput",value:function(e){this.props.cb(function(e){for(var t=e.split(" "),n=0;n<t.length;n++){if(t[n].includes("src="))return t[n].split('"')[1];if(n==t.length-1)return e}}(e))}},{key:"render",value:function(){return u.a.createElement(S,{label:"Google Maps - URL"},u.a.createElement(C,{type:"url",value:this.props.url,cb:this.handleInput.bind(this)}),u.a.createElement("small",{className:"text-muted pl-2"},"Used for the map of the contact us page"))}}]),t}();function hn(e){return(hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function mn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function gn(e,t){return!t||"object"!==hn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function vn(e){return(vn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function yn(e,t){return(yn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var bn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),gn(this,vn(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&yn(e,t)}(t,l["Component"]),n=t,(r=[{key:"addLink",value:function(e){var t=this;a.a.ajax({type:"post",url:"".concat(this.props.baseUri,"/quicklink/").concat(e,"/").concat(this.props.sectionId)}).done(function(){t.props.u()}).fail(function(e){console.error("[QuicklinksPages@removeLink] Error removing quicklink: ",e.responseText)})}},{key:"render",value:function(){var e,t=this;!this.props.pages||this.props.pages&&this.props.pages.length;return e=this.props.pages&&this.props.pages.length>0?this.props.pages.map(function(e){return u.a.createElement("a",{class:"dropdown-item",role:"presentation",onClick:t.addLink.bind(t,e.id)},e.name)}):u.a.createElement("a",{className:"dropdown-item disabled",role:"presentation"},"All pages have been assigned"),u.a.createElement("div",{class:"dropdown"},u.a.createElement("button",{class:"btn btn-info btn-sm float-right dropdown-toggle","data-toggle":"dropdown","aria-expanded":"false",type:"button"}," Add Page "),u.a.createElement("div",{class:"dropdown-menu",role:"menu"},e))}}])&&mn(n.prototype,r),o&&mn(n,o),t}();function _n(e){return(_n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function xn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function En(e,t,n){return t&&xn(e.prototype,t),n&&xn(e,n),e}function Tn(e,t){return!t||"object"!==_n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Sn(e){return(Sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Cn(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&kn(e,t)}function kn(e,t){return(kn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var On=function(e){function t(){return wn(this,t),Tn(this,Sn(t).apply(this,arguments))}return Cn(t,l["Component"]),En(t,[{key:"removeLink",value:function(e){var t=this;a.a.ajax({type:"delete",url:"".concat(this.props.baseUri,"/quicklink/").concat(e)}).done(function(){t.props.u()}).fail(function(e){console.error("[QuicklinksPages@removeLink] Error removing quicklink: ",e.responseText)})}},{key:"render",value:function(){return u.a.createElement("tr",null,u.a.createElement("td",null,u.a.createElement(Pn,{page:this.props.page})),u.a.createElement("td",null,u.a.createElement("button",{className:"btn btn-danger btn-sm float-right",type:"button",onClick:this.removeLink.bind(this,this.props.page.id)},"Remove Quick Link ",u.a.createElement("i",{className:"fas fa-times"}))))}}]),t}(),Pn=function(e){function t(){return wn(this,t),Tn(this,Sn(t).apply(this,arguments))}return Cn(t,l["Component"]),En(t,[{key:"url",value:function(e){return e.replace(/\s+/g,"-").toLowerCase()}},{key:"render",value:function(){var e=this.props.page;return u.a.createElement("a",{href:"education"!=e.section?"/".concat(this.url(e.name)):"/education/".concat(this.url(e.name))},e.name)}}]),t}();function Nn(e){return(Nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function An(e,t){return!t||"object"!==Nn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ln(e,t){return(Ln=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var In=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=An(this,Dn(t).call(this,e))).state={value:o.a.cloneDeep(n.props.section.title)},console.log(n.props.sectionId),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ln(e,t)}(t,l["Component"]),n=t,(r=[{key:"cancelChange",value:function(){this.setState({value:o.a.cloneDeep(this.props.section.title)})}},{key:"saveChange",value:function(e){var t=this;a.a.ajax({type:"put",url:"".concat(this.props.baseUri,"/quicklink/").concat(e),data:{title:this.state.value}}).done(function(){t.props.u()}).fail(function(e){console.error("[Section@saveChange] Error updating page title: ",e.responseText)})}},{key:"updateVal",value:function(e){this.setState({value:e})}},{key:"render",value:function(){var e,t,n=this;return this.props.section.pages&&(e=this.props.section.pages.map(function(e){return u.a.createElement(On,{page:e,baseUri:n.props.baseUri,u:n.props.u})})),this.state.value!=this.props.section.title&&(t=u.a.createElement(z,{size:"sm",className:"float-right pb-2"},u.a.createElement($,{btnClass:"btn btn-danger",cb:this.cancelChange.bind(this)},"Cancel ",u.a.createElement("i",{className:"fas fa-times"})),u.a.createElement($,{btnClass:"btn btn-success",cb:this.saveChange.bind(this,this.props.sectionId)},"Save ",u.a.createElement("i",{className:"fas fa-check"})))),u.a.createElement(l.Fragment,null,u.a.createElement(S,{label:"Section Title",required:!0},t,u.a.createElement(C,{type:"text",value:this.state.value,cb:this.updateVal.bind(this),required:!0})),u.a.createElement("div",{class:"table-responsive"},u.a.createElement("table",{class:"table table-hover table-sm"},u.a.createElement("thead",null,u.a.createElement("tr",null,u.a.createElement("th",null,"Name"),u.a.createElement("th",null,u.a.createElement(bn,{pages:this.props.avaliablePages,sectionId:this.props.sectionId,baseUri:this.props.baseUri,u:this.props.u})))),u.a.createElement("tbody",null,e))))}}])&&jn(n.prototype,r),i&&jn(n,i),t}();function Rn(e){return(Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e,t){return!t||"object"!==Rn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Fn(e){return(Fn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Hn(e,t){return(Hn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Un=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),qn(this,Fn(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Hn(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){return u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement(In,{section:this.props.sections.a,avaliablePages:this.props.sections.avaliable,baseUri:this.props.baseUri,u:this.props.u,sectionId:1})),u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement(In,{section:this.props.sections.b,avaliablePages:this.props.sections.avaliable,baseUri:this.props.baseUri,u:this.props.u,sectionId:2})))}}])&&Mn(n.prototype,r),o&&Mn(n,o),t}();function Wn(e){return(Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bn(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function zn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $n(e,t,n){return t&&zn(e.prototype,t),n&&zn(e,n),e}function Vn(e,t){return!t||"object"!==Wn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Qn(e){return(Qn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Kn(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yn(e,t)}function Yn(e,t){return(Yn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Xn=function(e){function t(e){var n;return Bn(this,t),(n=Vn(this,Qn(t).call(this,e))).state={settings:null,activeTab:null},n}return Kn(t,l["Component"]),$n(t,[{key:"componentDidMount",value:function(){var e=this;this.setState({activeTab:document.getElementById("react_websiteSettings").getAttribute("data-tab")},function(){e.getData()})}},{key:"getData",value:function(){var e=this;a.a.ajax({type:"get",url:"".concat("/admin/web/settings","/data")}).done(function(t){e.setState({settings:t})}).fail(function(e){console.error("[User@getData] Error getting data: ",e.responseText)})}},{key:"render",value:function(){if(!this.state.settings)return null;var e=u.a.createElement(an,{contact:this.state.settings.contact,u:this.getData.bind(this),baseUri:"/admin/web/settings"});return"footer"==this.state.activeTab&&(e=u.a.createElement(Un,{sections:this.state.settings.quickLinks,u:this.getData.bind(this),baseUri:"/admin/web/settings"})),u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-12"},u.a.createElement("h1",{className:"text-center"},"System Settings"),u.a.createElement(Gn,{activeTab:this.state.activeTab}),e))}}]),t}(),Gn=function(e){function t(){return Bn(this,t),Vn(this,Qn(t).apply(this,arguments))}return Kn(t,l["Component"]),$n(t,[{key:"render",value:function(){var e,t=this,n=[{url:"contact",tabName:"Contact Information"},{url:"footer",tabName:"Footer Quick-Links"}];return n&&(e=n.map(function(e){return u.a.createElement("li",{className:"nav-item"},u.a.createElement("a",{className:"nav-link ".concat(e.url==t.props.activeTab?"active":""),href:"?tab=".concat(e.url)},e.tabName))})),u.a.createElement("ul",{className:"nav nav-tabs mb-3"},e)}}]),t}();function Jn(e){return(Jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function er(e,t){return!t||"object"!==Jn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function tr(e){return(tr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nr(e,t){return(nr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_websiteSettings")&&Object(s.render)(u.a.createElement(Xn,null),document.getElementById("react_websiteSettings"));var rr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),er(this,tr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nr(e,t)}(t,l["Component"]),n=t,(r=[{key:"align",value:function(){switch(this.props.link.align){case"center":return"text-center";case"right":return"text-right";default:return!1}}},{key:"render",value:function(){var e;return yt(this.props.link.href)&&(e=u.a.createElement("i",{className:"far fa-external-link-alt"})),u.a.createElement("div",{className:this.align()},u.a.createElement("a",{className:"btn btn-".concat(this.props.link.color," ").concat("block"==this.props.link.align?"btn-block":""),href:this.props.link.href},this.props.link.text," Â  ",e))}}])&&Zn(n.prototype,r),o&&Zn(n,o),t}();function or(e){return(or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ir(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ar(e,t){return!t||"object"!==or(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function lr(e){return(lr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ur(e,t){return(ur=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var sr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ar(this,lr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ur(e,t)}(t,l["Component"]),n=t,(r=[{key:"alignText",value:function(){var e=this.props.link.align;return"default"==e||"block"==e||null==e?"":"d-block text-".concat(e)}},{key:"render",value:function(){var e;return yt(this.props.link.href)&&(e=u.a.createElement("i",{className:"far fa-external-link-alt"})),u.a.createElement("a",{className:"text-".concat(this.props.link.color," ").concat(this.alignText()),href:this.props.link.href},this.props.link.text," Â  ",e)}}])&&ir(n.prototype,r),o&&ir(n,o),t}();function cr(e){return(cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pr(e,t){return!t||"object"!==cr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function dr(e){return(dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function hr(e,t){return(hr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var mr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),pr(this,dr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&hr(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){return this.props.link&&this.props.link.text?(e=this.props.link.isButton?u.a.createElement(rr,{link:this.props.link}):u.a.createElement(sr,{link:this.props.link}),u.a.createElement(l.Fragment,null,e)):null;var e}}])&&fr(n.prototype,r),o&&fr(n,o),t}();function gr(e){return(gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function vr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function yr(e,t){return!t||"object"!==gr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function br(e){return(br=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _r(e,t){return(_r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var wr="view",xr="edit",Er="preview",Tr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),yr(this,br(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_r(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e;return e=this.props.mode==Er?u.a.createElement(B,{btnClass:"btn btn-info",type:"button",cb:this.props.editMode.bind(this,xr)},"Edit ",u.a.createElement("i",{className:"fa fa-pencil"})):u.a.createElement(B,{btnClass:"btn btn-info",type:"button",cb:this.props.editMode.bind(this,Er)},"Preview ",u.a.createElement("i",{className:"fa fa-binoculars"})),this.props.mode==wr?null:u.a.createElement("div",{role:"group",className:"btn-group btn-group-sm pb-2 d-block"},u.a.createElement($,{btnClass:"btn btn-danger",cb:this.props.cancelEditMode.bind(this)},"CancelÂ ",u.a.createElement("i",{className:"fas fa-times"})),e,u.a.createElement($,{pending:this.props.requestPending,cb:this.props.saveChanges.bind(this),btnClass:"btn btn-success"},"SaveÂ ",u.a.createElement("i",{className:"fa fa-check"})))}}])&&vr(n.prototype,r),o&&vr(n,o),t}();function Sr(e){return(Sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Cr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function kr(e,t){return!t||"object"!==Sr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Or(e){return(Or=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pr(e,t){return(Pr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Nr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),kr(this,Or(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pr(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e,t;return this.props.mode!=zr.Edit&&this.props.heading?e=u.a.createElement("h6",{className:"d-inline mr-3"},this.props.heading):this.props.mode==zr.Edit&&(e=u.a.createElement(l.Fragment,null,u.a.createElement("small",{className:"text-muted"},"Heading (Optional)"),u.a.createElement(C,{type:"text",inputClass:"form-control cms",value:this.props.heading||null,cb:this.props.editVal.bind(this)}))),this.props.admin&&this.props.mode==zr.View&&(t=u.a.createElement(B,{btnClass:"btn btn-sm btn-info",cb:this.props.editMode.bind(this,zr.Edit)},this.props.heading||this.props.exists?"Edit":"Add Content"," Â ",u.a.createElement("i",{className:this.props.heading||this.props.exists?"fas fa-pencil":"fas fa-plus"}))),u.a.createElement(l.Fragment,null,e,t)}}])&&Cr(n.prototype,r),o&&Cr(n,o),t}();function jr(e){return(jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dr(e,t){return!t||"object"!==jr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Lr(e){return(Lr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ir(e,t){return(Ir=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Rr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Dr(this,Lr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ir(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){var e=u.a.createElement("p",null,this.props.text);return this.props.mode==zr.Edit&&(e=u.a.createElement(l.Fragment,null,u.a.createElement("small",{className:"text-muted"},"Text Content"),u.a.createElement(O,{inputClass:"form-control cms mb-2",value:this.props.text,rows:6,cb:this.props.editVal.bind(this,"text")}))),u.a.createElement(l.Fragment,null,e)}}])&&Ar(n.prototype,r),o&&Ar(n,o),t}(),Mr=n(8),qr=n.n(Mr);function Fr(e){return(Fr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ur(e,t){return!t||"object"!==Fr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wr(e){return(Wr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Br(e,t){return(Br=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zr={View:"view",Edit:"edit",Preview:"preview"},$r=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ur(this,Wr(t).call(this,e))).state={content:{heading:null,text:null,link:null},editMode:zr.View,requestPending:!1},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Br(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentWillReceiveProps",value:function(e){e.content&&e.content!=this.state.content&&this.setState({content:o.a.cloneDeep(e.content)})}},{key:"editVal",value:function(e,t){var n=o.a.cloneDeep(this.state.content);switch(e){case"heading":n.heading=t;break;case"text":n.text=t;break;case"link":n.link=t}this.setState({content:n})}},{key:"cancelEditMode",value:function(){this.setState({editMode:zr.View,content:this.props.content})}},{key:"editMode",value:function(e){this.setState({editMode:e})}},{key:"saveChanges",value:function(){var e=this;this.setState({requestPending:!0,editMode:zr.Preview},function(){qr.a.ajax({type:"post",url:"".concat(e.props.baseUri,"/").concat(e.props.content.pageId,"/text/").concat(e.props.content.slotNo),data:{heading:e.state.content.heading,text:e.state.content.text,link:e.state.content.link}}).done(function(){e.props.u(),e.setState({editMode:zr.View,requestPending:!1})}).fail(function(t){console.error(t),e.setState({editMode:zr.Edit,requestPending:!1})})})}},{key:"render",value:function(){var e;return this.props.admin&&(e=u.a.createElement(Tr,{mode:this.state.editMode,editMode:this.editMode.bind(this),saveChanges:this.saveChanges.bind(this),cancelEditMode:this.cancelEditMode.bind(this),requestPending:this.state.requestPending})),u.a.createElement(l.Fragment,null,e,u.a.createElement(Nr,{mode:this.state.editMode,heading:this.state.content.heading,exists:!!this.state.content.text,editVal:this.editVal.bind(this,"heading"),editMode:this.editMode.bind(this),admin:this.props.admin}),u.a.createElement(Rr,{mode:this.state.editMode,text:this.state.content.text,editVal:this.editVal.bind(this)}),u.a.createElement(mr,{mode:this.state.editMode,link:this.state.content.link,admin:this.props.admin}))}}])&&Hr(n.prototype,r),i&&Hr(n,i),t}();function Vr(e){return(Vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Kr(e,t){return!t||"object"!==Vr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Yr(e){return(Yr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xr(e,t){return(Xr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Gr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Kr(this,Yr(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xr(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){return u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",null,u.a.createElement("i",{className:"fas fa-ban fa-5x text-center"}),u.a.createElement("h1",{className:"display-5 mb-4"},"Account Inactive"),u.a.createElement("p",{mb:"2"},"An administrator needs to activate your account."),u.a.createElement("p",null,"We'll send you an email once this has been done.")))}}])&&Qr(n.prototype,r),o&&Qr(n,o),t}();function Jr(e){return(Jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function eo(e,t){return!t||"object"!==Jr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function to(e){return(to=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function no(e,t){return(no=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_errorInactiveAccount")&&Object(s.render)(u.a.createElement(Gr,null),document.getElementById("react_errorInactiveAccount"));var ro=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),eo(this,to(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&no(e,t)}(t,l["Component"]),n=t,(r=[{key:"render",value:function(){return u.a.createElement("div",{className:"login-clean text-center"},u.a.createElement("form",null,u.a.createElement("i",{className:"far fa-envelope-open fa-5x text-center"}),u.a.createElement("h1",{className:"display-5 mb-4"},"Password Expired"),u.a.createElement("p",{mb:"2"},"We need you to change your password, please check your emails.")))}}])&&Zr(n.prototype,r),o&&Zr(n,o),t}();function oo(e){return(oo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function io(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ao(e,t){return!t||"object"!==oo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function lo(e){return(lo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function uo(e,t){return(uo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}document.getElementById("react_errorPasswordExpired")&&Object(s.render)(u.a.createElement(ro,null),document.getElementById("react_errorPasswordExpired"));var so=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ao(this,lo(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&uo(e,t)}(t,l["Component"]),n=t,(r=[{key:"getClass",value:function(){switch(this.props.type){case"danger":return"alert-danger";case"success":return"alert-success";default:return"alert-primary"}}},{key:"render",value:function(){var e;return this.props.dismiss&&(e=u.a.createElement("button",{type:"button",className:"close","data-dismiss":"alert","aria-label":"Close"},u.a.createElement("span",{"aria-hidden":"true"},"Ã"))),u.a.createElement("div",{role:"alert",className:"alert ".concat(this.getClass())},e,u.a.createElement("span",null,this.props.children))}}])&&io(n.prototype,r),o&&io(n,o),t}();function co(e){return(co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function fo(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function po(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ho(e,t,n){return t&&po(e.prototype,t),n&&po(e,n),e}function mo(e,t){return!t||"object"!==co(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function go(e){return(go=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vo(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&yo(e,t)}function yo(e,t){return(yo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var bo=function(e){function t(){return fo(this,t),mo(this,go(t).apply(this,arguments))}return vo(t,l["Component"]),ho(t,[{key:"render",value:function(){return this.props.page?u.a.createElement("div",{className:"col-12 pb-4"},u.a.createElement(wo,{admin:!0,page:this.props.page,baseUri:this.props.baseUri,u:this.props.u}),u.a.createElement(xo,{admin:!0,page:this.props.page,baseUri:this.props.baseUri,u:this.props.u}),u.a.createElement($,{btnClass:"btn btn-info float-right disabled"},"View Page History Â ",u.a.createElement("i",{className:"far fa-history"})),u.a.createElement("h1",{className:"mb-1"},this.props.page?this.props.page.name:""),u.a.createElement(_o,{page:this.props.page}),u.a.createElement(Eo,{public:this.props.page.public})):null}}]),t}(),_o=function(e){function t(){return fo(this,t),mo(this,go(t).apply(this,arguments))}return vo(t,l["Component"]),ho(t,[{key:"render",value:function(){var e=this.props.page.updated;return this.props.page.isAuthenticated?u.a.createElement("small",null,"Updated by: ",e.by," on ",e.at):null}}]),t}(),wo=function(e){function t(){return fo(this,t),mo(this,go(t).apply(this,arguments))}return vo(t,l["Component"]),ho(t,[{key:"deletePage",value:function(){a.a.ajax({type:"delete",data:this.props.page.id,url:"".concat(this.props.baseUri,"/").concat(this.props.page.id)}).done(function(e){location.replace(e)}).fail(function(e){console.log(e)})}},{key:"render",value:function(){return this.props.page.isAuthenticated?u.a.createElement(V,{btnClass:"btn btn-danger float-right",question:"delete page",explanation:"This action cannot be undone, all information will be lost",actionText:"YES Delete Page!",confirmPhrase:this.props.page.name,cb:this.deletePage.bind(this)},"Delete Page ",u.a.createElement("i",{class:"fas fa-trash"})):null}}]),t}(),xo=function(e){function t(){return fo(this,t),mo(this,go(t).apply(this,arguments))}return vo(t,l["Component"]),ho(t,[{key:"toggleVisibility",value:function(){var e=this;a.a.ajax({type:"post",url:"".concat(this.props.baseUri,"/").concat(this.props.page.id,"/visibility")}).done(function(){e.props.u()}).fail(function(e){console.log(e)})}},{key:"render",value:function(){return this.props.page.isAuthenticated?(e=this.props.page.public?u.a.createElement(l.Fragment,null,"Hide Page Â ",u.a.createElement("i",{className:"fas fa-eye-slash"})):u.a.createElement(l.Fragment,null,"Show Page Â ",u.a.createElement("i",{className:"fas fa-eye"})),u.a.createElement($,{btnClass:"btn btn-warning float-right",cb:this.toggleVisibility.bind(this)},e)):null;var e}}]),t}(),Eo=function(e){function t(){return fo(this,t),mo(this,go(t).apply(this,arguments))}return vo(t,l["Component"]),ho(t,[{key:"render",value:function(){return this.props.public?null:u.a.createElement(so,{type:"danger"},"This page is hidden! Only authenticated users can see this page.")}}]),t}();function To(e){return(To="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function So(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Co(e,t){return!t||"object"!==To(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ko(e){return(ko=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oo(e,t){return(Oo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Po=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Co(this,ko(t).call(this,e))).state={data:null,pageId:null},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oo(e,t)}(t,l["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;if(!document.getElementById("react_template_1"))throw"Failed to attach component. Attribute 'data-pageid' was not found";this.setState({pageId:document.getElementById("react_template_1").getAttribute("data-pageid")},function(){e.getData()})}},{key:"getData",value:function(){var e=this;a.a.ajax({type:"get",url:"".concat("/api/page","/").concat(this.state.pageId)}).done(function(t){e.setState({data:t})}).fail(function(e){console.error(e)})}},{key:"render",value:function(){return u.a.createElement(u.a.Fragment,null,u.a.createElement("div",{className:"row"},u.a.createElement(bo,{page:this.state.data,baseUri:"/api/page",u:this.getData.bind(this)}),u.a.createElement("div",{className:"col-12  pb-4"},u.a.createElement("div",{className:"row"},u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement($r,{u:this.getData.bind(this),baseUri:"/api/page",admin:this.state.data&&!!this.state.data.isAuthenticated,content:this.state.data?this.state.data.text[0]:null})),u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement($r,{u:this.getData.bind(this),baseUri:"/api/page",admin:this.state.data&&!!this.state.data.isAuthenticated,content:this.state.data?this.state.data.text[1]:null})),u.a.createElement("div",{className:"col-lg-4 col-md-6 col-sm-12"},u.a.createElement($r,{u:this.getData.bind(this),baseUri:"/api/page",admin:this.state.data&&!!this.state.data.isAuthenticated,content:this.state.data?this.state.data.text[2]:null})))),u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement("h3",null,"Drop us an Email"),u.a.createElement("form",null,u.a.createElement(S,{htmlFor:"name",label:"Your Name:",required:!0},u.a.createElement(C,{id:"name",type:"text",name:"name",autocomplete:"name",required:!0})),u.a.createElement(S,{htmlFor:"org",label:"Organization:"},u.a.createElement(C,{id:"org",type:"text",name:"org",autocomplete:"organization"})),u.a.createElement(S,{htmlFor:"phone",label:"Contact Phone Number:"},u.a.createElement(C,{id:"phone",type:"text",name:"phone",autocomplete:"phone"})),u.a.createElement(S,{htmlFor:"email",label:"Email:",required:!0},u.a.createElement(C,{id:"email",type:"email",name:"email",autocomplete:"email",required:!0})),u.a.createElement(S,{htmlFor:"subject",label:"Subject:",required:!0},u.a.createElement(C,{id:"subject",type:"text",name:"subject",autocomplete:"off"})),u.a.createElement(S,{htmlFor:"message",label:"Message:",required:!0},u.a.createElement(O,{id:"message",maxLength:"500",required:!0})),u.a.createElement(B,{type:"submit",pending:!1},"Send Email Â ",u.a.createElement("i",{className:"fas fa-envelope"})))),u.a.createElement("div",{className:"col-lg-6 col-md-12"},u.a.createElement("h3",null,"Where to Find Us"),u.a.createElement("iframe",{width:"100%",frameborder:"0",style:{border:0,height:"50vh"},src:"https://www.google.com/maps/embed/v1/place?key=AIzaSyAfo1AATDgkVuNqry2jt7oYnONdyrfc2cM\r &q=Deep+Cove+School+Hostel&center=-45.322628,167.232328&zoom=9&maptype=satellite",allowfullscreen:""}))))}}])&&So(n.prototype,r),o&&So(n,o),t}();document.getElementById("react_template_1")&&Object(s.render)(u.a.createElement(Po,null),document.getElementById("react_template_1"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvalF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzTmF0aXZlLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNJRTEwLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFBhcmVudE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRSb290LmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZmluZENvbW1vbk9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzT2Zmc2V0Q29udGFpbmVyLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0U2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0Qm9yZGVyc1NpemUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRXaW5kb3dTaXplcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldENsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pbmNsdWRlU2Nyb2xsLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0Qm91bmRhcmllcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzRml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2dldFJlZmVyZW5jZU9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRPdXRlclNpemVzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRQb3BwZXJPZmZzZXRzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZmluZC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL3J1bk1vZGlmaWVycy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2ZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWxzL2lzTW9kaWZpZXJFbmFibGVkLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvc2V0dXBFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21ldGhvZHMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21ldGhvZHMvZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvcmVtb3ZlRXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9zZXRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9pc01vZGlmaWVyUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tZXRob2RzL3BsYWNlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9jbG9ja3dpc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvZmxpcC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tZXRob2RzL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL3NoaWZ0LmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9rZWVwVG9nZXRoZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tb2RpZmllcnMvYXJyb3cuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9pbm5lci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL21vZGlmaWVycy9hcHBseVN0eWxlLmpzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMvc2V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvbWV0aG9kcy91cGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9tZXRob2RzL2VuYWJsZUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovLy8uLi8uLi9qcy9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vanMvc3JjL2FsZXJ0LmpzIiwid2VicGFjazovLy8uLi8uLi9qcy9zcmMvYnV0dG9uLmpzIiwid2VicGFjazovLy8uLi8uLi9qcy9zcmMvY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2pzL3NyYy9jb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2pzL3NyYy9kcm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vanMvc3JjL21vZGFsLmpzIiwid2VicGFjazovLy8uLi8uLi9qcy9zcmMvdG9vbHMvc2FuaXRpemVyLmpzIiwid2VicGFjazovLy8uLi8uLi9qcy9zcmMvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vanMvc3JjL3BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2pzL3NyYy9zY3JvbGxzcHkuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2pzL3NyYy90YWIuanMiLCJ3ZWJwYWNrOi8vLy4uLy4uL2pzL3NyYy90b2FzdC5qcyIsIndlYnBhY2s6Ly8vLi4vLi4vanMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvc3RhdGljTWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvd2luZG93TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9kZWNvcmF0b3JzL2N1c3RvbUV2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvZGVjb3JhdG9ycy9pc0NhcHR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC9kZWNvcmF0b3JzL2dldEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L2RlY29yYXRvcnMvdHJhY2tSZW1vdmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvdXRpbHMvZ2V0UG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRvb2x0aXAvZGlzdC91dGlscy9nZXRUaXBDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10b29sdGlwL2Rpc3QvdXRpbHMvYXJpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L3V0aWxzL25vZGVMaXN0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdG9vbHRpcC9kaXN0L3N0eWxlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9zYXNzL2luZGV4LnNjc3M/YjRkMyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Gb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0FkbWluUG9ydGFsL0FjY291bnRTZXR0aW5ncy9DaGFuZ2VQYXNzd29yZC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvQWNjb3VudFNldHRpbmdzL1NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BZG1pblBvcnRhbC9BY2NvdW50U2V0dGluZ3MvTm90aWZpY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvQWNjb3VudFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BdXRoZW50aWNhdGlvbi9Mb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQXV0aGVudGljYXRpb24vUmVxdWVzdFBhc3N3b3JkUmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0F1dGhlbnRpY2F0aW9uL1Jlc2V0UGFzc3dvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0F1dGhlbnRpY2F0aW9uL1JlZ2lzdGVyLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BZG1pblBvcnRhbC9NYW5hZ2VVc2Vycy9FbWFpbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvTWFuYWdlVXNlcnMvUGhvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0FkbWluUG9ydGFsL01hbmFnZVVzZXJzL1N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvTWFuYWdlVXNlcnMvVGltZXN0YW1wcy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ29tcG9uZW50cy9QYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvTWFuYWdlVXNlcnMvQWNjb3VudEJ0bnMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0FkbWluUG9ydGFsL01hbmFnZVVzZXJzL0FjY291bnRDYXJkLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BZG1pblBvcnRhbC9NYW5hZ2VVc2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvUGFnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0FkbWluUG9ydGFsL1N5c3RlbVNldHRpbmdzL0NvbnRhY3RJbmZvcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvU3lzdGVtU2V0dGluZ3MvRm9vdGVyUXVpY2tMaW5rcy9BZGRQYWdlTGluay5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvU3lzdGVtU2V0dGluZ3MvRm9vdGVyUXVpY2tMaW5rcy9QYWdlTGluay5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQWRtaW5Qb3J0YWwvU3lzdGVtU2V0dGluZ3MvRm9vdGVyUXVpY2tMaW5rcy9TZWN0aW9uLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BZG1pblBvcnRhbC9TeXN0ZW1TZXR0aW5ncy9Gb290ZXJRdWlja0xpbmtzLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9BZG1pblBvcnRhbC9TeXN0ZW1TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ01TLUJsb2Nrcy9UZXh0L1RleHRCbG9ja0FjdGlvbi9DTVNCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NNUy1CbG9ja3MvVGV4dC9UZXh0QmxvY2tBY3Rpb24vQ01TTGluay5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ01TLUJsb2Nrcy9UZXh0L1RleHRCbG9ja0FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ01TLUJsb2Nrcy9UZXh0L0VkaXRCdXR0b25zLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9DTVMtQmxvY2tzL1RleHQvSGVhZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvQ01TLUJsb2Nrcy9UZXh0L0NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vUmVzb3VyY2VzL2pzL1JlYWN0L0NNUy1CbG9ja3MvVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9SZXNvdXJjZXMvanMvUmVhY3QvRXJyb3JzL0luYWN0aXZlLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9FcnJvcnMvUGFzc3dvcmRFeHBpcmVkLmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9Db21wb25lbnRzL0FsZXJ0LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9DTVMtQmxvY2tzL1BhZ2VNYXN0LmpzIiwid2VicGFjazovLy8uL1Jlc291cmNlcy9qcy9SZWFjdC9QYWdlVGVtcGxhdGVzLzEuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJodG1sIiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRvU2VsZWN0b3IiLCJqb2luIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJMQVJHRV9BUlJBWV9TSVpFIiwiQ09SRV9FUlJPUl9URVhUIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJcXCIsIiciLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZVBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsInRoaXNBcmciLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImVhY2hGdW5jIiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCLDgCIsIsOBIiwiw4IiLCLDgyIsIsOEIiwiw4UiLCLDoCIsIsOhIiwiw6IiLCLDoyIsIsOkIiwiw6UiLCLDhyIsIsOnIiwiw5AiLCLDsCIsIsOIIiwiw4kiLCLDiiIsIsOLIiwiw6giLCLDqSIsIsOqIiwiw6siLCLDjCIsIsONIiwiw44iLCLDjyIsIsOsIiwiw60iLCLDriIsIsOvIiwiw5EiLCLDsSIsIsOSIiwiw5MiLCLDlCIsIsOVIiwiw5YiLCLDmCIsIsOyIiwiw7MiLCLDtCIsIsO1Iiwiw7YiLCLDuCIsIsOZIiwiw5oiLCLDmyIsIsOcIiwiw7kiLCLDuiIsIsO7Iiwiw7wiLCLDnSIsIsO9Iiwiw78iLCLDhiIsIsOmIiwiw54iLCLDviIsIsOfIiwixIAiLCLEgiIsIsSEIiwixIEiLCLEgyIsIsSFIiwixIYiLCLEiCIsIsSKIiwixIwiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsSOIiwixJAiLCLEjyIsIsSRIiwixJIiLCLElCIsIsSWIiwixJgiLCLEmiIsIsSTIiwixJUiLCLElyIsIsSZIiwixJsiLCLEnCIsIsSeIiwixKAiLCLEoiIsIsSdIiwixJ8iLCLEoSIsIsSjIiwixKQiLCLEpiIsIsSlIiwixKciLCLEqCIsIsSqIiwixKwiLCLEriIsIsSwIiwixKkiLCLEqyIsIsStIiwixK8iLCLEsSIsIsS0IiwixLUiLCLEtiIsIsS3IiwixLgiLCLEuSIsIsS7IiwixL0iLCLEvyIsIsWBIiwixLoiLCLEvCIsIsS+IiwixYAiLCLFgiIsIsWDIiwixYUiLCLFhyIsIsWKIiwixYQiLCLFhiIsIsWIIiwixYsiLCLFjCIsIsWOIiwixZAiLCLFjSIsIsWPIiwixZEiLCLFlCIsIsWWIiwixZgiLCLFlSIsIsWXIiwixZkiLCLFmiIsIsWcIiwixZ4iLCLFoCIsIsWbIiwixZ0iLCLFnyIsIsWhIiwixaIiLCLFpCIsIsWmIiwixaMiLCLFpSIsIsWnIiwixagiLCLFqiIsIsWsIiwixa4iLCLFsCIsIsWyIiwixakiLCLFqyIsIsWtIiwixa8iLCLFsSIsIsWzIiwixbQiLCLFtSIsIsW2IiwixbciLCLFuCIsIsW5IiwixbsiLCLFvSIsIsW6IiwixbwiLCLFviIsIsSyIiwixLMiLCLFkiIsIsWTIiwixYkiLCLFvyIsImVzY2FwZUh0bWxDaGFyIiwiJiIsIjwiLCJcIiIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwibWFwVG9BcnJheSIsInNpemUiLCJmb3JFYWNoIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsInJlcGxhY2VIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJzZXRUb0FycmF5Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJydW5JbkNvbnRleHQiLCJkZWZhdWx0cyIsInBpY2siLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY3R4Tm93IiwiY3R4U2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiU3RhY2siLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5pdENsb25lQXJyYXkiLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJzeW1ib2wiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJiYXNlU29ydEJ5IiwiY3JpdGVyaWEiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJxdW90ZSIsInN1YlN0cmluZyIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiaW5kS2V5IiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjYW5jZWwiLCJmbHVzaCIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdGUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnRCeSIsImludm9rZSIsIm9taXQiLCJiYXNlUGljayIsInBpY2tCeSIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0Iiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwiZWFjaFJpZ2h0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJpc1JpZ2h0IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiZyIsInNjb3BlIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiZGVmYXVsdCIsIkdMT0JBTCIsIkhJREUiLCJSRUJVSUxEIiwiU0hPVyIsIl9jbGFzcyIsIl9jbGFzczIiLCJfdGVtcCIsIl9leHRlbmRzIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3Byb3BUeXBlczIiLCJfcmVhY3REb20yIiwiX2NsYXNzbmFtZXMyIiwiX3N0YXRpY01ldGhvZHMyIiwiX3dpbmRvd0xpc3RlbmVyMiIsIl9jdXN0b21FdmVudDIiLCJfaXNDYXB0dXJlMiIsIl9nZXRFZmZlY3QyIiwiX3RyYWNrUmVtb3ZhbDIiLCJfZ2V0UG9zaXRpb24yIiwiX2dldFRpcENvbnRlbnQyIiwiX2FyaWEiLCJfbm9kZUxpc3RUb0FycmF5MiIsIl9zdHlsZTIiLCJSZWFjdFRvb2x0aXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfdGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJwbGFjZSIsImRlc2lyZWRQbGFjZSIsImVmZmVjdCIsImV4dHJhQ2xhc3MiLCJkZWxheUhpZGUiLCJkZWxheVNob3ciLCJldmVudE9mZiIsImN1cnJlbnRFdmVudCIsImFyaWFQcm9wcyIsInBhcnNlQXJpYSIsImlzRW1wdHlUaXAiLCJvcmlnaW5Ub29sdGlwIiwiaXNNdWx0aWxpbmUiLCJtb3VudCIsImRlbGF5U2hvd0xvb3AiLCJkZWxheUhpZGVMb29wIiwiZGVsYXlSZXNob3ciLCJpbnRlcnZhbFVwZGF0ZUNvbnRlbnQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsIkNvbXBvbmVudCIsIm1ldGhvZEFycmF5IiwiX3RoaXMyIiwiX3Byb3BzIiwiaW5zZWN1cmUiLCJyZXNpemVIaWRlIiwic2V0U3R5bGVIZWFkZXIiLCJiaW5kTGlzdGVuZXIiLCJiaW5kV2luZG93RXZlbnRzIiwibmV3QXJpYVByb3BzIiwic2V0U3RhdGUiLCJjbGVhclRpbWVyIiwidW5iaW5kTGlzdGVuZXIiLCJyZW1vdmVTY3JvbGxMaXN0ZW5lciIsInVuYmluZFdpbmRvd0V2ZW50cyIsInRvb2x0aXBSZWYiLCJ0YXJnZXRBcnJheSIsIl90aGlzMyIsIl9wcm9wczIiLCJnbG9iYWxFdmVudE9mZiIsImlzQ2FwdHVyZSIsImdldFRhcmdldEFycmF5IiwiaXNDYXB0dXJlTW9kZSIsImdldEVmZmVjdCIsInVuYmluZEJhc2ljTGlzdGVuZXIiLCJpc0N1c3RvbUV2ZW50IiwiY3VzdG9tQmluZExpc3RlbmVyIiwic2hvd1Rvb2x0aXAiLCJ1cGRhdGVUb29sdGlwIiwiaGlkZVRvb2x0aXAiLCJiaW5kUmVtb3ZhbFRyYWNrZXIiLCJfdGhpczQiLCJfcHJvcHMzIiwiY3VzdG9tVW5iaW5kTGlzdGVuZXIiLCJ1bmJpbmRSZW1vdmFsVHJhY2tlciIsIl9wcm9wczQiLCJnZXRDb250ZW50IiwiaXNHbG9iYWxDYWxsIiwiZWxlIiwiX3Byb3BzNSIsIm11bHRpbGluZSIsInN3aXRjaFRvU29saWQiLCJGb2N1c0V2ZW50Iiwic2Nyb2xsSGlkZSIsImZpbmRET01Ob2RlIiwiaXNOZXdTdGF0ZSIsIm5ld1N0YXRlIiwicmVzaG93RGVsYXkiLCJkZWxheVVwZGF0ZSIsInVwZGF0ZVN0YXRlIiwiYWRkU2Nyb2xsTGlzdGVuZXIiLCJfZ2V0Q29udGVudCIsInVwZGF0ZVBvc2l0aW9uIiwiX3RoaXM1IiwiX3N0YXRlIiwiYWZ0ZXJTaG93IiwiZ2V0VG9vbHRpcENvbnRlbnQiLCJkZWxheVRpbWUiLCJldmVudFRhcmdldCIsIm1vdXNlT25Ub29sVGlwIiwiaXNJbnZpc2libGUiLCJoYXNUYXJnZXQiLCJfdGhpczYiLCJfc3RhdGUyIiwiYWZ0ZXJIaWRlIiwicmVzZXRTdGF0ZSIsImlzVmlzaWJsZSIsImxpc3RlbkZvclRvb2x0aXBFeGl0IiwicmVtb3ZlTGlzdGVuZXJGb3JUb29sdGlwRXhpdCIsIl90aGlzNyIsIl9zdGF0ZTMiLCJxdWVyeVNlbGVjdG9yIiwibmMiLCJfdGhpczgiLCJfc3RhdGU0IiwidG9vbHRpcENsYXNzIiwicGxhY2UtdG9wIiwicGxhY2UtYm90dG9tIiwicGxhY2UtbGVmdCIsInBsYWNlLXJpZ2h0IiwidHlwZS1kYXJrIiwidHlwZS1zdWNjZXNzIiwidHlwZS13YXJuaW5nIiwidHlwZS1lcnJvciIsInR5cGUtaW5mbyIsInR5cGUtbGlnaHQiLCJhbGxvd19ob3ZlciIsImFsbG93X2NsaWNrIiwiY2xpY2thYmxlIiwiV3JhcHBlciIsInN1cHBvcnRlZFdyYXBwZXJzIiwiZGVmYXVsdFByb3BzIiwiX3JlZiIsImRhdGEtaWQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIl9yZWYyIiwicHJvcFR5cGVzIiwiYW55Iiwid2F0Y2hXaW5kb3ciLCJkaXNwbGF5TmFtZSIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsIm5hdGl2ZUhpbnRzIiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwibmF2aWdhdG9yIiwiaXNJRTEwIiwiaGludCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzY2hlZHVsZWQiLCJvYnNlcnZlIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0VHlwZSIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJnZXRQYXJlbnROb2RlIiwiZ2V0U2Nyb2xsUGFyZW50IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwiZ2V0T2Zmc2V0UGFyZW50IiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJpc09mZnNldENvbnRhaW5lciIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInVwcGVyU2lkZSIsInNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJzaWRlQSIsImF4aXMiLCJzaWRlQiIsImlzSUUxMCQxIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJnZXRXaW5kb3dTaXplcyIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwiX28iLCJfaSIsImJvdHRvbSIsInNpemVzIiwiaG9yaXpTY3JvbGxiYXIiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwicnVuSXNJRTEwIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwiZiIsIl9lMiIsIl90MyIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEJvdW5kYXJpZXMiLCJib3VuZGFyaWVzIiwiYm91bmRhcmllc0VsZW1lbnQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJyZWxhdGl2ZU9mZnNldCIsImJvdW5kYXJpZXNOb2RlIiwiX3Q0IiwiaXNGaXhlZCIsIl9vMiIsIl9nZXRXaW5kb3dTaXplcyIsIl9lMyIsIl90NSIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVjdHMiLCJyZWZSZWN0Iiwic29ydGVkQXJlYXMiLCJmaWx0ZXJlZEFyZWFzIiwicG9wcGVyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJ5IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsInJlZmVyZW5jZU9mZnNldHMiLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwiaXNNb2RpZmllckVuYWJsZWQiLCJfcmVmMyIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwidG9DaGVjayIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiaXNCb2R5Iiwic2Nyb2xsUGFyZW50cyIsImV2ZW50c0VuYWJsZWQiLCJfZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwic2V0U3R5bGVzIiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZyIsIl9yZWY0IiwiaXNSZXF1aXJlZCIsInJlcXVlc3RlZCIsIl9pMiIsIl9lNSIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJkaXZpZGVyIiwic3BsaXRSZWdleCIsIm9wcyIsIm1lcmdlV2l0aFByZXZpb3VzIiwib3AiLCJzdHIiLCJfZTYiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJvbkNyZWF0ZSIsIm9uVXBkYXRlIiwiYmFzZVBsYWNlbWVudCIsInNoaWZ0dmFyaWF0aW9uIiwiX2Ukb2Zmc2V0czQiLCJfdDciLCJpc1ZlcnRpY2FsIiwic2hpZnRPZmZzZXRzIiwiX2RlZmluZVByb3BlcnR5IiwiX3JlZjUiLCJfZSRvZmZzZXRzMyIsInByZXZlbnRPdmVyZmxvdyIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJrZWVwVG9nZXRoZXIiLCJfZSRvZmZzZXRzMiIsIm9wU2lkZSIsImFycm93IiwiYXJyb3dFbGVtZW50Iiwic2lkZUNhcGl0YWxpemVkIiwiYWx0U2lkZSIsImFycm93RWxlbWVudFNpemUiLCJjZW50ZXIiLCJwb3BwZXJNYXJnaW5TaWRlIiwic2lkZVZhbHVlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb24iLCJmbGlwVmFyaWF0aW9ucyIsImZsaXBwZWQiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5IiwidSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwiX2U0IiwiX3Q2IiwieC1wbGFjZW1lbnQiLCJhcnJvd1N0eWxlcyIsImFwcGx5U3R5bGUiLCJvbkxvYWQiLCJQb3BwZXIiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsIm1vZGlmaWVyT3B0aW9ucyIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiZGVzdHJveSIsIlBvcHBlclV0aWxzIiwiVFJBTlNJVElPTl9FTkQiLCJVdGlsIiwiZ2V0VUlEIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImhyZWZBdHRyIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwicmVmbG93IiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiU2hhZG93Um9vdCIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiY2FsbGVkIiwiTkFNRSIsIkRBVEFfS0VZIiwiRVZFTlRfS0VZIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIkFsZXJ0IiwiX2VsZW1lbnQiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsImNsb3NlRXZlbnQiLCJfZGVzdHJveUVsZW1lbnQiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiJGVsZW1lbnQiLCJfaGFuZGxlRGlzbWlzcyIsImFsZXJ0SW5zdGFuY2UiLCJEQVRBX0FQSV9LRVkiLCJDbGFzc05hbWUiLCJTZWxlY3RvciIsIkZPQ1VTX0JMVVJfREFUQV9BUEkiLCJCdXR0b24iLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNsYXNzTGlzdCIsImhhc0F0dHJpYnV0ZSIsIkRlZmF1bHQiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ0b3VjaCIsIkRlZmF1bHRUeXBlIiwiRGlyZWN0aW9uIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiUE9JTlRFUkRPV04iLCJQT0lOVEVSVVAiLCJEUkFHX1NUQVJUIiwiTE9BRF9EQVRBX0FQSSIsIlBvaW50ZXJUeXBlIiwiVE9VQ0giLCJQRU4iLCJDYXJvdXNlbCIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsInRvdWNoU3RhcnRYIiwidG91Y2hEZWx0YVgiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl90b3VjaFN1cHBvcnRlZCIsIm1heFRvdWNoUG9pbnRzIiwiX3BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiY3ljbGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJkaXJlY3Rpb24iLCJfb2JqZWN0U3ByZWFkIiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiYWJzIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsInRhZ05hbWUiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4Iiwic2xpZGVFdmVudCIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImluZGljYXRvcnMiLCJuZXh0SW5kaWNhdG9yIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsInNsaWRFdmVudCIsIm5leHRFbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJfdHlwZW9mIiwicmlkZSIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIiRjYXJvdXNlbCIsIlNIT1dOIiwiSElEREVOIiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtIiwiX3NlbGVjdG9yIiwiX3BhcmVudCIsIl9nZXRQYXJlbnQiLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwic3RhcnRFdmVudCIsIl9nZXREaW1lbnNpb24iLCJzZXRUcmFuc2l0aW9uaW5nIiwic2Nyb2xsU2l6ZSIsInRyaWdnZXJBcnJheUxlbmd0aCIsImlzVHJhbnNpdGlvbmluZyIsIkRpbWVuc2lvbiIsIl9nZXRUYXJnZXRGcm9tRWxlbWVudCIsInRyaWdnZXJBcnJheSIsImlzT3BlbiIsIiR0aGlzIiwiJHRyaWdnZXIiLCIkdGFyZ2V0IiwidXNlckFnZW50IiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFIiwidmVyc2lvbiIsIm5vT2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY3JlYXRlQ2xhc3MiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImZpeGVkUG9zaXRpb24iLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImV4Y2x1ZGVTY3JvbGwiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJpc1BhZGRpbmdOdW1iZXIiLCJhcmVhIiwibWFyZ2luQm90dG9tIiwibWFyZ2luUmlnaHQiLCJtb2RpZmllck5hbWUiLCJnZXRXaW5kb3ciLCJpc0ZpcmVmb3giLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJfcmVxdWVzdGluZyIsInBvc2l0aW9uRml4ZWQiLCJfZGF0YSRvZmZzZXRzIiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJwb3BwZXJCb3JkZXJTaWRlIiwic2hvdWxkUm91bmQiLCJub1JvdW5kIiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlV0aWxzIiwiUkVHRVhQX0tFWURPV04iLCJBUlJPV19VUF9LRVlDT0RFIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJib3VuZGFyeSIsIkRyb3Bkb3duIiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsImlzQWN0aXZlIiwiX2NsZWFyTWVudXMiLCJzaG93RXZlbnQiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImhpZGVFdmVudCIsIl9nZXRQbGFjZW1lbnQiLCIkcGFyZW50RHJvcGRvd24iLCJfZ2V0T2Zmc2V0IiwicG9wcGVyQ29uZmlnIiwidG9nZ2xlcyIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiaXRlbXMiLCJiYWNrZHJvcCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJNb2RhbCIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwidHJhbnNpdGlvbiIsIl9oaWRlTW9kYWwiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIkVMRU1FTlRfTk9ERSIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImNhbGxiYWNrUmVtb3ZlIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJmaXhlZENvbnRlbnQiLCJzdGlja3lDb250ZW50IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiX3RoaXM5IiwiYWN0dWFsTWFyZ2luIiwiY2FsY3VsYXRlZE1hcmdpbiIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiX3RoaXMxMCIsInVyaUF0dHJzIiwiU0FGRV9VUkxfUEFUVEVSTiIsIkRBVEFfVVJMX1BBVFRFUk4iLCJzYW5pdGl6ZUh0bWwiLCJ1bnNhZmVIdG1sIiwid2hpdGVMaXN0Iiwic2FuaXRpemVGbiIsImNyZWF0ZWREb2N1bWVudCIsIndoaXRlbGlzdEtleXMiLCJfbG9vcCIsImVsTmFtZSIsImF0dHJpYnV0ZUxpc3QiLCJ3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJOYW1lIiwicmVnRXhwIiwiYXR0clJlZ2V4IiwiQ0xBU1NfUFJFRklYIiwiQlNDTFNfUFJFRklYX1JFR0VYIiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwidGl0bGUiLCJmYWxsYmFja1BsYWNlbWVudCIsInNhbml0aXplIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJiciIsImVtIiwiaHIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJpbWciLCJsaSIsIm9sIiwicHJlIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidWwiLCJIb3ZlclN0YXRlIiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIlRyaWdnZXIiLCJUb29sdGlwIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsImlzV2l0aENvbnRlbnQiLCJzaGFkb3dSb290IiwiaXNJblRoZURvbSIsInRpcElkIiwic2V0Q29udGVudCIsImF0dGFjaG1lbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9nZXRDb250YWluZXIiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwiX2ZpeFRyYW5zaXRpb24iLCJwcmV2SG92ZXJTdGF0ZSIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCJzZXRFbGVtZW50Q29udGVudCIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsImRhdGFBdHRyaWJ1dGVzIiwiJHRpcCIsInRhYkNsYXNzIiwicG9wcGVyRGF0YSIsInBvcHBlckluc3RhbmNlIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIlBvcG92ZXIiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIk9mZnNldE1ldGhvZCIsIlNjcm9sbFNweSIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiX2dldE9mZnNldEhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwiVGFiIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0IiwiYXV0b2hpZGUiLCJUb2FzdCIsIndpdGhvdXRUaW1lb3V0IiwiX2Nsb3NlIiwiayIsIkN0IiwiWGUiLCJnbiIsImlpIiwiU2Nyb2xsc3B5IiwiQ2kiLCJXaSIsIlppIiwicW4iLCJxIiwieiIsImFhIiwiYmEiLCJBIiwiQiIsImgiLCJmcmFtZXNUb1BvcCIsImNhIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInJlZnMiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkgiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkkiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJrZXlQcmVmaXgiLCJSIiwiVSIsIlMiLCJUIiwiPSIsIjoiLCJlYSIsImZhIiwiViIsImRhIiwiVyIsIlgiLCJDaGlsZHJlbiIsIm9ubHkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJyZW5kZXIiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwicHJvcElzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJ0ZXN0MyIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJrYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwicmV0dXJuIiwiTWEiLCJkaXNwYXRjaENvbmZpZyIsIk5hIiwiX3RhcmdldEluc3QiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYSIsIlZhIiwiV2EiLCJYYSIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiSW50ZXJmYWNlIiwiaWIiLCJldmVudFBvb2wiLCJqYiIsImRlc3RydWN0b3IiLCJoYiIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1RydXN0ZWQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwicGIiLCJxYiIsInJiIiwic2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ6YiIsImxvY2FsZSIsInhiIiwieWIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInRlbCIsIndlZWsiLCJNYiIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiT2IiLCJQYiIsIlJiIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiUWIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwia2MiLCJsYyIsIm1jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsImNoYW5nZSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJkZXRhY2hFdmVudCIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJRYyIsIlJjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlNjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsImZyb21FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiWmMiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImFsdGVybmF0ZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZWZmZWN0VGFnIiwiZmQiLCJoZCIsImNoaWxkIiwiZ2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiamQiLCJjbGlwYm9hcmREYXRhIiwia2QiLCJsZCIsIm1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIm5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIm9kIiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInJkIiwic2QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk5kIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiUmQiLCJTZCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwiZGVmYXVsdFNlbGVjdGVkIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZmUiLCJtYXRobWwiLCJzdmciLCJnZSIsImhlIiwiaWUiLCJqZSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJrZSIsImxlIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3dTcGFuIiwiZ3JpZENvbHVtblNwYW4iLCJsaW5lQ2xhbXAiLCJ0YWJTaXplIiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm1lIiwibmUiLCJvZSIsInBlIiwibWVudWl0ZW0iLCJlbWJlZCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwidHJhY2siLCJ3YnIiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsImF1dG9Gb2N1cyIsInhlIiwieWUiLCJ6ZSIsIkFlIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkJlIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJnZXRDaGlsZENvbnRleHQiLCJPZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJVZSIsImVsZW1lbnRUeXBlIiwicGVuZGluZ1Byb3BzIiwiY29udGV4dERlcGVuZGVuY2llcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25UaW1lIiwiVmUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwiY29udGV4dFR5cGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsImRlbGV0ZSIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsInFnIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwicmciLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJoZiIsIldlIiwiaHlkcmF0ZSIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwicGgiLCJXZWFrU2V0IiwicWgiLCJyaCIsInNoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsInVoIiwiaGkiLCJYaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJGaCIsImNvbXBvbmVudFN0YWNrIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJWaCIsIlpoIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZWYiLCJQZCIsIlloIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJmaW5pc2hlZFdvcmsiLCIkaCIsImFpIiwiY3JlYXRlRWxlbWVudE5TIiwiYmkiLCJjaSIsImRpIiwibWF4RHVyYXRpb24iLCJwaW5nQ2FjaGUiLCJlaSIsImZpIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJnaSIsImppIiwia2kiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidW5zdGFibGVfbm93IiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwidGltZW91dEhhbmRsZSIsIkJpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJPaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJQaSIsIl9pbnRlcm5hbFJvb3QiLCJRaSIsIlNpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiUmkiLCJUaSIsIk1pIiwic3RyaW5naWZ5IiwiZm9ybSIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsIlZpIiwiY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiVGUiLCJvdmVycmlkZVByb3BzIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIlhpIiwicHJpb3JpdHlMZXZlbCIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImF0dGFjaFRvIiwibmV4dFRpY2siLCJydW5JZlByZXNlbnQiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwidGFzayIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYXJnVHlwZSIsImRpc3BhdGNoR2xvYmFsRXZlbnQiLCJfY29uc3RhbnQyIiwicmVidWlsZCIsImdsb2JhbFJlYnVpbGQiLCJnbG9iYWxTaG93IiwiZ2xvYmFsSGlkZSIsIl9jb25zdGFudCIsImV2ZW50TmFtZSIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50Iiwib25XaW5kb3dSZXNpemUiLCJkYXRhRXZlbnQiLCJkYXRhRXZlbnRPZmYiLCJjdXN0b21MaXN0ZW5lcnMiLCJjdXN0b21MaXN0ZW5lciIsImNoZWNrU3RhdHVzIiwiZGF0YUlzQ2FwdHVyZSIsImN1cnJlbnRJdGVtIiwic2V0VW50YXJnZXRJdGVtcyIsImxpc3RlbmVyIiwiZ2V0TXV0YXRpb25PYnNlcnZlckNsYXNzIiwib2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtMSIsIm11dGF0aW9uIiwibTIiLCJyZW1vdmVkTm9kZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwicmVtb3ZhbFRyYWNrZXIiLCJkaXNjb25uZWN0IiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJfZ2V0RGltZW5zaW9ucyIsImdldERpbWVuc2lvbnMiLCJ0aXBXaWR0aCIsInRpcEhlaWdodCIsIl9nZXREaW1lbnNpb25zMiIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiX2dldEN1cnJlbnRPZmZzZXQiLCJnZXRDdXJyZW50T2Zmc2V0IiwibW91c2VYIiwibW91c2VZIiwiZGVmYXVsdE9mZnNldCIsImdldERlZmF1bHRQb3NpdGlvbiIsIl9jYWxjdWxhdGVPZmZzZXQiLCJjYWxjdWxhdGVPZmZzZXQiLCJleHRyYU9mZnNldF9YIiwiZXh0cmFPZmZzZXRfWSIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0IiwiZ2V0UGFyZW50IiwicGFyZW50VG9wIiwicGFyZW50TGVmdCIsImdldFRpcE9mZnNldExlZnQiLCJvZmZzZXRfWCIsImdldFRpcE9mZnNldFRvcCIsIm9mZnNldF9ZIiwib3V0c2lkZVJpZ2h0IiwiZ2V0VGlwT2Zmc2V0UmlnaHQiLCJvdXRzaWRlQm90dG9tIiwiZ2V0VGlwT2Zmc2V0Qm90dG9tIiwib3V0c2lkZSIsIm91dHNpZGVMZWZ0Iiwib3V0c2lkZVRvcCIsImluc2lkZSIsInBsYWNlc0xpc3QiLCJpbnNpZGVMaXN0IiwibmV3UGxhY2UiLCJfbm9kZSRnZXRCb3VuZGluZ0NsaWUiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJ0YXJnZXRUb3AiLCJ0YXJnZXRMZWZ0IiwiX2dldERpbWVuc2lvbnMzIiwiZGlzVG9Nb3VzZSIsImN1cnJlbnRQYXJlbnQiLCJfcmVhY3QiLCJhcmlhT2JqIiwibm9kZUxpc3QiLCJobXIiLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJnZXROb25jZSIsImFkZEF0dHJzIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIkF1dG9Db21wbGV0ZSIsIlR5cGUiLCJDaGVja2JveCIsIl9Db21wb25lbnQiLCJfZ2V0UHJvdG90eXBlT2YiLCJuZXh0UHJvcHMiLCJyZWFjdF9kZWZhdWx0IiwiZGlzdF9kZWZhdWx0Iiwib25DaGFuZ2UiLCJ0b2dnbGVDaGVja2JveCIsImRhdGEtdGlwIiwidG9vbHRpcCIsImxhYmVsIiwiRm9ybUdyb3VwIiwiX0NvbXBvbmVudDIiLCJyZXF1aXJlZCIsImh0bWxGb3IiLCJJbnB1dCIsIl9Db21wb25lbnQzIiwiYXV0b0NvbXBsZXRlIiwiaW5wdXRDbGFzcyIsInBsYWNlSG9sZGVyIiwiYXV0b2NvbXBsZXRlIiwiZ2V0QXV0b0NvbXBsZXRlIiwicmVhZG9ubHkiLCJyZWFkT25seSIsIm1pbkxlbmd0aCIsImhhbmRsZUNoYW5nZSIsIm9uUGFzdGUiLCJTZWxlY3QiLCJfQ29tcG9uZW50NCIsInNlbGVjdE9wdGlvbnMiLCJUZXh0QXJlYSIsIl9Db21wb25lbnQ1IiwiY2hhckxpbWl0IiwiZ2V0Q2hhckNvdW50Iiwicm93cyIsIk1vZGFsX2NsYXNzQ2FsbENoZWNrIiwiTW9kYWxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIk1vZGFsX2dldFByb3RvdHlwZU9mIiwiTW9kYWxfaW5oZXJpdHMiLCJtb2RhbEhlYWQiLCJkYXRhLWRpc21pc3MiLCJhcmlhLWxhYmVsIiwiYXJpYS1oaWRkZW4iLCJyb2xlIiwiZ2V0TW9kYWxTaXplIiwiQnV0dG9uX2NsYXNzQ2FsbENoZWNrIiwiQnV0dG9uX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCdXR0b25fZ2V0UHJvdG90eXBlT2YiLCJjb250ZW50UmVmIiwiUmVhY3QiLCJCdXR0b25faW5oZXJpdHMiLCJCdXR0b25fY3JlYXRlQ2xhc3MiLCJSZWFjdERPTSIsInRydW5jIiwiYnRuQ2xhc3MiLCJwZW5kaW5nIiwiaGFuZGxlQ2xpY2siLCJCdG5Hcm91cCIsIkNvbmZpcm1CdXR0b24iLCJjb25maXJtUGVuZGluZyIsImhhbHQiLCJjb25maXJtIiwiYmFzZUNsYXNzZXMiLCJDb25maXJtTW9kYWwiLCJjb25maXJtUGhyYXNlIiwidG9nZ2xlTW9kYWwiLCJtb2RhbCIsIkZvcm1Db250cm9sX0Zvcm1Hcm91cCIsIkZvcm1Db250cm9sX0lucHV0IiwidXBkYXRlQ29uZmlybVBocmFzZSIsInJlYWN0IiwiQnV0dG9uX0J1dHRvbiIsIk1vZGFsX01vZGFsIiwicXVlc3Rpb24iLCJleHBsYW5hdGlvbiIsIkJ1dHRvbl9Db25maXJtQnV0dG9uIiwiY29uZmlybWVkIiwiYWN0aW9uVGV4dCIsIkNoYW5nZVBhc3N3b3JkIiwiQ2hhbmdlUGFzc3dvcmRfY2xhc3NDYWxsQ2hlY2siLCJDaGFuZ2VQYXNzd29yZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQ2hhbmdlUGFzc3dvcmRfZ2V0UHJvdG90eXBlT2YiLCJyZXF1ZXN0UGVuZGluZyIsInJlcXVlc3RGYWlsZWQiLCJwYXNzd29yZHMiLCIxIiwiMiIsInBhc3N3ZCIsImNvbmRpdGlvbnMiLCJiYXNlVXJpIiwib25TdWJtaXQiLCJ1cGRhdGVBY2NvdW50UGFzc3dvcmQiLCJwYXNzd29yZENvbXBhcmVyIiwicGFzc3dvcmRDb25kaXRpb25zIiwiU2V0dGluZ3MiLCJTZXR0aW5nc19jbGFzc0NhbGxDaGVjayIsIlNldHRpbmdzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTZXR0aW5nc19nZXRQcm90b3R5cGVPZiIsImFjY291bnQiLCJwaG9uZU51bWJlciIsImZpZWxkIiwicGhvbmUiLCJ1cGRhdGVBY2NvdW50IiwidXBkYXRlVmFsIiwiTm90aWZpY2F0aW9ucyIsIkNvbnNvbGUiLCJSZXNwb25zZVRleHQiLCJhdmFsaWFibGVDaGFubmVscyIsImNoYW5uZWxzIiwiY2hhbm5lbE1lbWJlcnNoaXBzIiwiRm9ybUNvbnRyb2xfQ2hlY2tib3giLCJkZXNjcmlwdGlvbiIsInRvZ2dsZUNoYW5uZWwiLCJBY2NvdW50U2V0dGluZ3MiLCJBY2NvdW50U2V0dGluZ3NfY2xhc3NDYWxsQ2hlY2siLCJBY2NvdW50U2V0dGluZ3NfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkFjY291bnRTZXR0aW5nc19nZXRQcm90b3R5cGVPZiIsImF2YWlsYWJsZUNoYW5uZWxzIiwibm90aWZpY2F0aW9uQ2hhbm5lbHMiLCJTZXR0aW5nc19TZXR0aW5ncyIsIkNoYW5nZVBhc3N3b3JkX0NoYW5nZVBhc3N3b3JkIiwiTm90aWZpY2F0aW9uc19Ob3RpZmljYXRpb25zIiwiZ2V0Q2hhbm5lbE1lbWJlcnNoaXBzIiwiQWNjb3VudFNldHRpbmdzX0FjY291bnRTZXR0aW5ncyIsIkxvZ2luIiwiTG9naW5fY2xhc3NDYWxsQ2hlY2siLCJMb2dpbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTG9naW5fZ2V0UHJvdG90eXBlT2YiLCJsb2dpbkZhaWxlZCIsImxvZ2luUGVuZGluZyIsImF0dGVtcHRMb2dpbiIsIkxvZ2luX0xvZ2luIiwiUmVxdWVzdFBhc3N3b3JkUmVzZXQiLCJSZXF1ZXN0UGFzc3dvcmRSZXNldF9jbGFzc0NhbGxDaGVjayIsIlJlcXVlc3RQYXNzd29yZFJlc2V0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZXF1ZXN0UGFzc3dvcmRSZXNldF9nZXRQcm90b3R5cGVPZiIsImVtYWlsU2VudCIsImJ0bl9zdWJtaXQiLCJhdHRlbXB0UmVxdWVzdCIsIlJlcXVlc3RQYXNzd29yZFJlc2V0X1JlcXVlc3RQYXNzd29yZFJlc2V0IiwiUmVzZXRQYXNzd29yZCIsIlJlc2V0UGFzc3dvcmRfY2xhc3NDYWxsQ2hlY2siLCJSZXNldFBhc3N3b3JkX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZXNldFBhc3N3b3JkX2dldFByb3RvdHlwZU9mIiwiUmVzZXRQYXNzd29yZF9SZXNldFBhc3N3b3JkIiwiUmVnaXN0ZXIiLCJSZWdpc3Rlcl9jbGFzc0NhbGxDaGVjayIsIlJlZ2lzdGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWdpc3Rlcl9nZXRQcm90b3R5cGVPZiIsImhlbHBlckxhYmVsIiwiYXR0ZW1wdFJlZ2lzdHJhdGlvbiIsIlJlZ2lzdGVyX1JlZ2lzdGVyIiwiRW1haWwiLCJjb250cm9sIiwiYWNjb3VudElkIiwiUGhvbmUiLCJTdGF0dXMiLCJGb3JtQ29udHJvbF9TZWxlY3QiLCJUaW1lc3RhbXBzIiwidGltZXN0YW1wcyIsInNpZ251cCIsImxhc3RMb2dpbiIsIlBhbmVsIiwiY2FyZEhlYWQiLCJjYXJkRm9vdCIsImlzRXh0ZXJuYWxVcmwiLCJob3N0bmFtZSIsIk1vZGUiLCJEZWxldGVVc2VyIiwiQWNjb3VudEJ0bnNfY2xhc3NDYWxsQ2hlY2siLCJBY2NvdW50QnRuc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQWNjb3VudEJ0bnNfZ2V0UHJvdG90eXBlT2YiLCJBY2NvdW50QnRuc19pbmhlcml0cyIsIkFjY291bnRCdG5zX2NyZWF0ZUNsYXNzIiwiRWRpdEJ1dHRvbnMiLCJzZXRNb2RlQ2IiLCJjYW5jZWxDYiIsInVwZGF0ZUNiIiwiVmlldyIsIkVkaXQiLCJBY2NvdW50Q2FyZCIsIkFjY291bnRDYXJkX2NsYXNzQ2FsbENoZWNrIiwiQWNjb3VudENhcmRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkFjY291bnRDYXJkX2dldFByb3RvdHlwZU9mIiwiYWRkcmVzcyIsIlBhbmVsX1BhbmVsIiwiQWNjb3VudEJ0bnNfRWRpdEJ1dHRvbnMiLCJzZXRNb2RlIiwiRW1haWxfRW1haWwiLCJQaG9uZV9QaG9uZSIsIlN0YXR1c19TdGF0dXMiLCJUaW1lc3RhbXBzX1RpbWVzdGFtcHMiLCJBY2NvdW50QnRuc19SZXNldFBhc3N3b3JkIiwiQWNjb3VudEJ0bnNfRGVsZXRlVXNlciIsIlVzZXJzIiwiTWFuYWdlVXNlcnNfY2xhc3NDYWxsQ2hlY2siLCJNYW5hZ2VVc2Vyc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWFuYWdlVXNlcnNfZ2V0UHJvdG90eXBlT2YiLCJhY2NvdW50cyIsIkFjY291bnRDYXJkX0FjY291bnRDYXJkIiwiTWFuYWdlVXNlcnNfVXNlcnMiLCJQYWdlcyIsIlBhZ2VzX2NsYXNzQ2FsbENoZWNrIiwiUGFnZXNfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlBhZ2VzX2dldFByb3RvdHlwZU9mIiwicGFnZXMiLCJsb2ciLCJQYWdlc19QYWdlcyIsIkNvbnRhY3RJbmZvcm1hdGlvbiIsIkNvbnRhY3RJbmZvcm1hdGlvbl9jbGFzc0NhbGxDaGVjayIsIkNvbnRhY3RJbmZvcm1hdGlvbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQ29udGFjdEluZm9ybWF0aW9uX2dldFByb3RvdHlwZU9mIiwiY29udGFjdCIsImdlbmVyYWwiLCJib29raW5ncyIsInVybHMiLCJmYWNlYm9vayIsImdvb2dsZVBsYXkiLCJnb29nbGVNYXBzIiwibWlzc2lvblN0YXRlbWVudCIsImVtYWlsR2VuZXJhbCIsImVtYWlsQm9va2luZ3MiLCJ1cmxGYWNlYm9vayIsInVybEdvb2dsZVBsYXkiLCJ1cmxHb29nbGVNYXBzIiwic3VibWl0Rm9ybSIsIkNvbnRhY3RJbmZvcm1hdGlvbl9HZW5lcmFsRW1haWwiLCJDb250YWN0SW5mb3JtYXRpb25fQm9va2luZ0VtYWlsIiwiQ29udGFjdEluZm9ybWF0aW9uX1Bob25lIiwiQ29udGFjdEluZm9ybWF0aW9uX01pc3Npb25TdGF0bWVudCIsIkNvbnRhY3RJbmZvcm1hdGlvbl9VcmxGYWNlYm9vayIsIkNvbnRhY3RJbmZvcm1hdGlvbl9VcmxHb29nbGVQbGF5IiwiQ29udGFjdEluZm9ybWF0aW9uX1VybEdvb2dsZU1hcCIsIkdlbmVyYWxFbWFpbCIsIkNvbnRhY3RJbmZvcm1hdGlvbl9pbmhlcml0cyIsIkNvbnRhY3RJbmZvcm1hdGlvbl9jcmVhdGVDbGFzcyIsIkJvb2tpbmdFbWFpbCIsIk1pc3Npb25TdGF0bWVudCIsIkZvcm1Db250cm9sX1RleHRBcmVhIiwiVXJsRmFjZWJvb2siLCJfQ29tcG9uZW50NiIsIlVybEdvb2dsZVBsYXkiLCJfQ29tcG9uZW50NyIsIlVybEdvb2dsZU1hcCIsIl9Db21wb25lbnQ4IiwiUHJlcGFyZUdvb2dsZU1hcHNVcmwiLCJoYW5kbGVJbnB1dCIsIlNlbGVjdFBhZ2UiLCJzZWN0aW9uSWQiLCJwYWdlTGlua3MiLCJwYWdlIiwiYWRkTGluayIsImRhdGEtdG9nZ2xlIiwiYXJpYS1leHBhbmRlZCIsIlBhZ2VSb3ciLCJwYWdlSWQiLCJQYWdlTGlua19QYWdlTGluayIsInJlbW92ZUxpbmsiLCJQYWdlTGluayIsInNlY3Rpb24iLCJTZWN0aW9uIiwiU2VjdGlvbl9jbGFzc0NhbGxDaGVjayIsIlNlY3Rpb25fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlNlY3Rpb25fZ2V0UHJvdG90eXBlT2YiLCJTZWN0aW9uX2luaGVyaXRzIiwiY3VycmVudFBhZ2VzIiwiUGFnZUxpbmtfUGFnZVJvdyIsIkJ1dHRvbl9CdG5Hcm91cCIsImNhbmNlbENoYW5nZSIsInNhdmVDaGFuZ2UiLCJBZGRQYWdlTGlua19TZWxlY3RQYWdlIiwiYXZhbGlhYmxlUGFnZXMiLCJGb290ZXJRdWlja0xpbmtzIiwiU2VjdGlvbl9TZWN0aW9uIiwic2VjdGlvbnMiLCJhdmFsaWFibGUiLCJTeXN0ZW1TZXR0aW5nc19jbGFzc0NhbGxDaGVjayIsIlN5c3RlbVNldHRpbmdzX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTeXN0ZW1TZXR0aW5nc19nZXRQcm90b3R5cGVPZiIsImFjdGl2ZVRhYiIsImFjdGl2ZVBhZ2UiLCJDb250YWN0SW5mb3JtYXRpb25fQ29udGFjdEluZm9ybWF0aW9uIiwiRm9vdGVyUXVpY2tMaW5rc19Gb290ZXJRdWlja0xpbmtzIiwicXVpY2tMaW5rcyIsIlN5c3RlbVNldHRpbmdzX1BhZ2VUYWJzIiwiUGFnZVRhYnMiLCJTeXN0ZW1TZXR0aW5nc19pbmhlcml0cyIsIlN5c3RlbVNldHRpbmdzX2NyZWF0ZUNsYXNzIiwidGFicyIsInRhYnNBcnJheSIsInRhYk5hbWUiLCJ0YWIiLCJTeXN0ZW1TZXR0aW5nc19TZXR0aW5ncyIsIkNNU0J1dHRvbiIsImFsaWduIiwidXJsSWNvbiIsIkNNU0xpbmsiLCJhbGlnblRleHQiLCJUZXh0QmxvY2tBY3Rpb24iLCJpc0J1dHRvbiIsIkNNU0J1dHRvbl9DTVNCdXR0b24iLCJDTVNMaW5rX0NNU0xpbmsiLCJFZGl0QnV0dG9uIiwiYnRuQ2VudGVyIiwiZWRpdE1vZGUiLCJjYW5jZWxFZGl0TW9kZSIsInNhdmVDaGFuZ2VzIiwiSGVhZGluZyIsImhlYWRpbmciLCJidG5FZGl0TW9kZSIsImVkaXRWYWwiLCJhZG1pbiIsImV4aXN0cyIsIkNvbnRlbnQiLCJQcmV2aWV3IiwiVGV4dEJsb2NrIiwiVGV4dF9jbGFzc0NhbGxDaGVjayIsIlRleHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlRleHRfZ2V0UHJvdG90eXBlT2YiLCJzbG90Tm8iLCJlZGl0QnV0dG9uIiwiRWRpdEJ1dHRvbnNfRWRpdEJ1dHRvbiIsIkhlYWRpbmdfSGVhZGluZyIsIkNvbnRlbnRfQ29udGVudCIsIlRleHRCbG9ja0FjdGlvbl9UZXh0QmxvY2tBY3Rpb24iLCJJbmFjdGl2ZUFjY291bnQiLCJJbmFjdGl2ZV9JbmFjdGl2ZUFjY291bnQiLCJQYXNzd29yZEV4cGlyZWQiLCJQYXNzd29yZEV4cGlyZWRfUGFzc3dvcmRFeHBpcmVkIiwiZGlzbWlzcyIsIlBhZ2VNYXN0IiwiUGFnZU1hc3RfRGVsZXRlUGFnZSIsIlBhZ2VNYXN0X1RvZ2dsZVZpc2liaWxpdHkiLCJQYWdlTWFzdF9MYXN0VG91Y2hlZCIsIlBhZ2VNYXN0X1Zpc2liaWxpdHlCYW5uZXIiLCJwdWJsaWMiLCJMYXN0VG91Y2hlZCIsIlBhZ2VNYXN0X2NsYXNzQ2FsbENoZWNrIiwiUGFnZU1hc3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlBhZ2VNYXN0X2dldFByb3RvdHlwZU9mIiwiUGFnZU1hc3RfaW5oZXJpdHMiLCJQYWdlTWFzdF9jcmVhdGVDbGFzcyIsInVwZGF0ZWQiLCJpc0F1dGhlbnRpY2F0ZWQiLCJieSIsIkRlbGV0ZVBhZ2UiLCJCdXR0b25fQ29uZmlybU1vZGFsIiwiZGVsZXRlUGFnZSIsIlRvZ2dsZVZpc2liaWxpdHkiLCJ0b2dnbGVWaXNpYmlsaXR5IiwiVmlzaWJpbGl0eUJhbm5lciIsIkFsZXJ0X0FsZXJ0IiwiUmVhY3RUZW1wbGF0ZSIsIl8xX2NsYXNzQ2FsbENoZWNrIiwiXzFfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl8xX2dldFByb3RvdHlwZU9mIiwiUGFnZU1hc3RfUGFnZU1hc3QiLCJUZXh0X1RleHRCbG9jayIsImZyYW1lYm9yZGVyIiwiYWxsb3dmdWxsc2NyZWVuIiwiXzFfUmVhY3RUZW1wbGF0ZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFD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QUFBdzlCLEdBQUFWLEdBcHdCQSxDQUVBVyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FFQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFB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USxVQUFVSixNQUFNLFdBQVdHLFVBQVEsR0FDbERULEVBQUFybEksRUFBQXZHLGNBQUM0dkksRUFBRCxDQUFPcmxJLEdBQUcsVUFBVWpMLEtBQUssT0FBT3BELEtBQUssVUFBVTB3SSxhQUFhLFNBR2hFaEIsRUFBQXJsSSxFQUFBdkcsY0FBQzJ2SSxFQUFELENBQVdyRCxRQUFRLFVBQVVKLE1BQU0sV0FBV0csVUFBUSxHQUNsRFQsRUFBQXJsSSxFQUFBdkcsY0FBQ3M2SSxFQUFELENBQVUvdkksR0FBRyxVQUFVNmxELFVBQVUsTUFBTWk4RSxVQUFRLEtBR25EVCxFQUFBcmxJLEVBQUF2RyxjQUFDK3ZJLEVBQUQsQ0FBUXp3SSxLQUFLLFNBQVN5dkksU0FBUyxHQUEvQixlQUVJbkQsRUFBQXJsSSxFQUFBdkcsY0FBQSxLQUFHa04sVUFBVSx1QkFLekIwK0gsRUFBQXJsSSxFQUFBdkcsY0FBQSxPQUFLa04sVUFBVSxzQkFDWDArSCxFQUFBcmxJLEVBQUF2RyxjQUFBLDhCQUNBNHJJLEVBQUFybEksRUFBQXZHLGNBQUEsVUFBUXV1QixNQUFNLE9BQU91ekgsWUFBWSxJQUFJM2dJLE1BQU8sQ0FBRWlULE9BQVEsRUFBR2dDLE9BQVEsUUFBYTcyQixJQUFJLDRLQUNvQndpSixnQkFBZ0IsK0NBUzFJamtKLFNBQVN3TSxlQUFlLHFCQUN4QmdnRyxpQkFBT3NoQyxFQUFBcmxJLEVBQUF2RyxjQUFDZ2lKLEdBQUQsTUFBbUJsa0osU0FBU3dNLGVBQWUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMubGVuZ3RoID8gaXRlcmF0ZWVzIDogW2lkZW50aXR5XSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbikge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgNDBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgICgnc291cmNlVVJMJyBpbiBvcHRpb25zXG4gICAgICAgICAgPyBvcHRpb25zLnNvdXJjZVVSTFxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1FbmQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSAobG9kYXNoRnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgICAgbmFtZXMgPSByZWFsTmFtZXNba2V5XSB8fCAocmVhbE5hbWVzW2tleV0gPSBbXSk7XG5cbiAgICAgICAgbmFtZXMucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcblxuICBHTE9CQUw6IHtcbiAgICBISURFOiAnX19yZWFjdF90b29sdGlwX2hpZGVfZXZlbnQnLFxuICAgIFJFQlVJTEQ6ICdfX3JlYWN0X3Rvb2x0aXBfcmVidWlsZF9ldmVudCcsXG4gICAgU0hPVzogJ19fcmVhY3RfdG9vbHRpcF9zaG93X2V2ZW50J1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jbGFzcywgX2NsYXNzMiwgX3RlbXA7XG5cbi8qIERlY29yYXRlcnMgKi9cblxuXG4vKiBVdGlscyAqL1xuXG5cbi8qIENTUyAqL1xuXG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3N0YXRpY01ldGhvZHMgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvc3RhdGljTWV0aG9kcycpO1xuXG52YXIgX3N0YXRpY01ldGhvZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGljTWV0aG9kcyk7XG5cbnZhciBfd2luZG93TGlzdGVuZXIgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvd2luZG93TGlzdGVuZXInKTtcblxudmFyIF93aW5kb3dMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3dMaXN0ZW5lcik7XG5cbnZhciBfY3VzdG9tRXZlbnQgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvY3VzdG9tRXZlbnQnKTtcblxudmFyIF9jdXN0b21FdmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jdXN0b21FdmVudCk7XG5cbnZhciBfaXNDYXB0dXJlID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2lzQ2FwdHVyZScpO1xuXG52YXIgX2lzQ2FwdHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0NhcHR1cmUpO1xuXG52YXIgX2dldEVmZmVjdCA9IHJlcXVpcmUoJy4vZGVjb3JhdG9ycy9nZXRFZmZlY3QnKTtcblxudmFyIF9nZXRFZmZlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RWZmZWN0KTtcblxudmFyIF90cmFja1JlbW92YWwgPSByZXF1aXJlKCcuL2RlY29yYXRvcnMvdHJhY2tSZW1vdmFsJyk7XG5cbnZhciBfdHJhY2tSZW1vdmFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYWNrUmVtb3ZhbCk7XG5cbnZhciBfZ2V0UG9zaXRpb24gPSByZXF1aXJlKCcuL3V0aWxzL2dldFBvc2l0aW9uJyk7XG5cbnZhciBfZ2V0UG9zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UG9zaXRpb24pO1xuXG52YXIgX2dldFRpcENvbnRlbnQgPSByZXF1aXJlKCcuL3V0aWxzL2dldFRpcENvbnRlbnQnKTtcblxudmFyIF9nZXRUaXBDb250ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFRpcENvbnRlbnQpO1xuXG52YXIgX2FyaWEgPSByZXF1aXJlKCcuL3V0aWxzL2FyaWEnKTtcblxudmFyIF9ub2RlTGlzdFRvQXJyYXkgPSByZXF1aXJlKCcuL3V0aWxzL25vZGVMaXN0VG9BcnJheScpO1xuXG52YXIgX25vZGVMaXN0VG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ub2RlTGlzdFRvQXJyYXkpO1xuXG52YXIgX3N0eWxlID0gcmVxdWlyZSgnLi9zdHlsZScpO1xuXG52YXIgX3N0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3RUb29sdGlwID0gKDAsIF9zdGF0aWNNZXRob2RzMi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX3dpbmRvd0xpc3RlbmVyMi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX2N1c3RvbUV2ZW50Mi5kZWZhdWx0KShfY2xhc3MgPSAoMCwgX2lzQ2FwdHVyZTIuZGVmYXVsdCkoX2NsYXNzID0gKDAsIF9nZXRFZmZlY3QyLmRlZmF1bHQpKF9jbGFzcyA9ICgwLCBfdHJhY2tSZW1vdmFsMi5kZWZhdWx0KShfY2xhc3MgPSAoX3RlbXAgPSBfY2xhc3MyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlYWN0VG9vbHRpcCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVhY3RUb29sdGlwKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0VG9vbHRpcCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVhY3RUb29sdGlwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVhY3RUb29sdGlwKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBwbGFjZTogcHJvcHMucGxhY2UgfHwgJ3RvcCcsIC8vIERpcmVjdGlvbiBvZiB0b29sdGlwXG4gICAgICBkZXNpcmVkUGxhY2U6IHByb3BzLnBsYWNlIHx8ICd0b3AnLFxuICAgICAgdHlwZTogJ2RhcmsnLCAvLyBDb2xvciB0aGVtZSBvZiB0b29sdGlwXG4gICAgICBlZmZlY3Q6ICdmbG9hdCcsIC8vIGZsb2F0IG9yIGZpeGVkXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIGJvcmRlcjogZmFsc2UsXG4gICAgICBvZmZzZXQ6IHt9LFxuICAgICAgZXh0cmFDbGFzczogJycsXG4gICAgICBodG1sOiBmYWxzZSxcbiAgICAgIGRlbGF5SGlkZTogMCxcbiAgICAgIGRlbGF5U2hvdzogMCxcbiAgICAgIGV2ZW50OiBwcm9wcy5ldmVudCB8fCBudWxsLFxuICAgICAgZXZlbnRPZmY6IHByb3BzLmV2ZW50T2ZmIHx8IG51bGwsXG4gICAgICBjdXJyZW50RXZlbnQ6IG51bGwsIC8vIEN1cnJlbnQgbW91c2UgZXZlbnRcbiAgICAgIGN1cnJlbnRUYXJnZXQ6IG51bGwsIC8vIEN1cnJlbnQgdGFyZ2V0IG9mIG1vdXNlIGV2ZW50XG4gICAgICBhcmlhUHJvcHM6ICgwLCBfYXJpYS5wYXJzZUFyaWEpKHByb3BzKSwgLy8gYXJpYS0gYW5kIHJvbGUgYXR0cmlidXRlc1xuICAgICAgaXNFbXB0eVRpcDogZmFsc2UsXG4gICAgICBkaXNhYmxlOiBmYWxzZSxcbiAgICAgIG9yaWdpblRvb2x0aXA6IG51bGwsXG4gICAgICBpc011bHRpbGluZTogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuYmluZChbJ3Nob3dUb29sdGlwJywgJ3VwZGF0ZVRvb2x0aXAnLCAnaGlkZVRvb2x0aXAnLCAnZ2V0VG9vbHRpcENvbnRlbnQnLCAnZ2xvYmFsUmVidWlsZCcsICdnbG9iYWxTaG93JywgJ2dsb2JhbEhpZGUnLCAnb25XaW5kb3dSZXNpemUnLCAnbW91c2VPblRvb2xUaXAnXSk7XG5cbiAgICBfdGhpcy5tb3VudCA9IHRydWU7XG4gICAgX3RoaXMuZGVsYXlTaG93TG9vcCA9IG51bGw7XG4gICAgX3RoaXMuZGVsYXlIaWRlTG9vcCA9IG51bGw7XG4gICAgX3RoaXMuZGVsYXlSZXNob3cgPSBudWxsO1xuICAgIF90aGlzLmludGVydmFsVXBkYXRlQ29udGVudCA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciB1bmlmeSB0aGUgYmluZCBhbmQgdW5iaW5kIGxpc3RlbmVyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJlYWN0VG9vbHRpcCwgW3tcbiAgICBrZXk6ICdiaW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZChtZXRob2RBcnJheSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIG1ldGhvZEFycmF5LmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICBfdGhpczJbbWV0aG9kXSA9IF90aGlzMlttZXRob2RdLmJpbmQoX3RoaXMyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbnNlY3VyZSA9IF9wcm9wcy5pbnNlY3VyZSxcbiAgICAgICAgICByZXNpemVIaWRlID0gX3Byb3BzLnJlc2l6ZUhpZGU7XG5cbiAgICAgIGlmIChpbnNlY3VyZSkge1xuICAgICAgICB0aGlzLnNldFN0eWxlSGVhZGVyKCk7IC8vIFNldCB0aGUgc3R5bGUgdG8gdGhlIDxsaW5rPlxuICAgICAgfVxuICAgICAgdGhpcy5iaW5kTGlzdGVuZXIoKTsgLy8gQmluZCBsaXN0ZW5lciBmb3IgdG9vbHRpcFxuICAgICAgdGhpcy5iaW5kV2luZG93RXZlbnRzKHJlc2l6ZUhpZGUpOyAvLyBCaW5kIGdsb2JhbCBldmVudCBmb3Igc3RhdGljIG1ldGhvZFxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XG4gICAgICB2YXIgYXJpYVByb3BzID0gdGhpcy5zdGF0ZS5hcmlhUHJvcHM7XG5cbiAgICAgIHZhciBuZXdBcmlhUHJvcHMgPSAoMCwgX2FyaWEucGFyc2VBcmlhKShwcm9wcyk7XG5cbiAgICAgIHZhciBpc0NoYW5nZWQgPSBPYmplY3Qua2V5cyhuZXdBcmlhUHJvcHMpLnNvbWUoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBuZXdBcmlhUHJvcHNbcHJvcHNdICE9PSBhcmlhUHJvcHNbcHJvcHNdO1xuICAgICAgfSk7XG4gICAgICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhcmlhUHJvcHM6IG5ld0FyaWFQcm9wcyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudCA9IGZhbHNlO1xuXG4gICAgICB0aGlzLmNsZWFyVGltZXIoKTtcblxuICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcigpO1xuICAgICAgdGhpcy5yZW1vdmVTY3JvbGxMaXN0ZW5lcigpO1xuICAgICAgdGhpcy51bmJpbmRXaW5kb3dFdmVudHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gaWYgdGhlIG1vdXNlIGlzIG9uIHRoZSB0b29sdGlwLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIC0gbW91c2UgaXMgb24gdGhlIHRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbW91c2VPblRvb2xUaXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VzZU9uVG9vbFRpcCgpIHtcbiAgICAgIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuXG5cbiAgICAgIGlmIChzaG93ICYmIHRoaXMudG9vbHRpcFJlZikge1xuICAgICAgICAvKiBvbGQgSUUgb3IgRmlyZWZveCB3b3JrIGFyb3VuZCAqL1xuICAgICAgICBpZiAoIXRoaXMudG9vbHRpcFJlZi5tYXRjaGVzKSB7XG4gICAgICAgICAgLyogb2xkIElFIHdvcmsgYXJvdW5kICovXG4gICAgICAgICAgaWYgKHRoaXMudG9vbHRpcFJlZi5tc01hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwUmVmLm1hdGNoZXMgPSB0aGlzLnRvb2x0aXBSZWYubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qIG9sZCBGaXJlZm94IHdvcmsgYXJvdW5kICovXG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBSZWYubWF0Y2hlcyA9IHRoaXMudG9vbHRpcFJlZi5tb3pNYXRjaGVzU2VsZWN0b3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2x0aXBSZWYubWF0Y2hlcygnOmhvdmVyJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBpY2sgb3V0IGNvcnJlc3BvbmRlZCB0YXJnZXQgZWxlbWVudHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGFyZ2V0QXJyYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYXJnZXRBcnJheShpZCkge1xuICAgICAgdmFyIHRhcmdldEFycmF5ID0gdm9pZCAwO1xuICAgICAgaWYgKCFpZCkge1xuICAgICAgICB0YXJnZXRBcnJheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcF06bm90KFtkYXRhLWZvcl0pJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXNjYXBlZCA9IGlkLnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJykucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICAgICAgICB0YXJnZXRBcnJheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRpcF1bZGF0YS1mb3I9XCInICsgZXNjYXBlZCArICdcIl0nKTtcbiAgICAgIH1cbiAgICAgIC8vIHRhcmdldEFycmF5IGlzIGEgTm9kZUxpc3QsIGNvbnZlcnQgaXQgdG8gYSByZWFsIGFycmF5XG4gICAgICByZXR1cm4gKDAsIF9ub2RlTGlzdFRvQXJyYXkyLmRlZmF1bHQpKHRhcmdldEFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGxpc3RlbmVyIHRvIHRoZSB0YXJnZXQgZWxlbWVudHNcbiAgICAgKiBUaGVzZSBsaXN0ZW5lcnMgdXNlZCB0byB0cmlnZ2VyIHNob3dpbmcgb3IgaGlkaW5nIHRoZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2JpbmRMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRMaXN0ZW5lcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaWQgPSBfcHJvcHMyLmlkLFxuICAgICAgICAgIGdsb2JhbEV2ZW50T2ZmID0gX3Byb3BzMi5nbG9iYWxFdmVudE9mZixcbiAgICAgICAgICBpc0NhcHR1cmUgPSBfcHJvcHMyLmlzQ2FwdHVyZTtcblxuICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGhpcy5nZXRUYXJnZXRBcnJheShpZCk7XG5cbiAgICAgIHRhcmdldEFycmF5LmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICB2YXIgaXNDYXB0dXJlTW9kZSA9IF90aGlzMy5pc0NhcHR1cmUodGFyZ2V0KTtcbiAgICAgICAgdmFyIGVmZmVjdCA9IF90aGlzMy5nZXRFZmZlY3QodGFyZ2V0KTtcbiAgICAgICAgaWYgKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJykgPT09IG51bGwpIHtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdjdXJyZW50SXRlbScsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzMy51bmJpbmRCYXNpY0xpc3RlbmVyKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKF90aGlzMy5pc0N1c3RvbUV2ZW50KHRhcmdldCkpIHtcbiAgICAgICAgICBfdGhpczMuY3VzdG9tQmluZExpc3RlbmVyKHRhcmdldCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBfdGhpczMuc2hvd1Rvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgICAgICBpZiAoZWZmZWN0ID09PSAnZmxvYXQnKSB7XG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzMy51cGRhdGVUb29sdGlwLCBpc0NhcHR1cmVNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIF90aGlzMy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gR2xvYmFsIGV2ZW50IHRvIGhpZGUgdG9vbHRpcFxuICAgICAgaWYgKGdsb2JhbEV2ZW50T2ZmKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGdsb2JhbEV2ZW50T2ZmLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZ2xvYmFsRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXAsIGlzQ2FwdHVyZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyYWNrIHJlbW92YWwgb2YgdGFyZ2V0QXJyYXkgZWxlbWVudHMgZnJvbSBET01cbiAgICAgIHRoaXMuYmluZFJlbW92YWxUcmFja2VyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIGxpc3RlbmVycyBvbiB0YXJnZXQgZWxlbWVudHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5iaW5kTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRMaXN0ZW5lcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaWQgPSBfcHJvcHMzLmlkLFxuICAgICAgICAgIGdsb2JhbEV2ZW50T2ZmID0gX3Byb3BzMy5nbG9iYWxFdmVudE9mZjtcblxuICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGhpcy5nZXRUYXJnZXRBcnJheShpZCk7XG4gICAgICB0YXJnZXRBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgX3RoaXM0LnVuYmluZEJhc2ljTGlzdGVuZXIodGFyZ2V0KTtcbiAgICAgICAgaWYgKF90aGlzNC5pc0N1c3RvbUV2ZW50KHRhcmdldCkpIF90aGlzNC5jdXN0b21VbmJpbmRMaXN0ZW5lcih0YXJnZXQpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChnbG9iYWxFdmVudE9mZikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZ2xvYmFsRXZlbnRPZmYsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgdGhpcy51bmJpbmRSZW1vdmFsVHJhY2tlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIGJlZm9yZSBiaW5kIGxpc3RlbmVyIGFuZCB1bW1vdW50IHRoZSBjb21wb250XG4gICAgICogaXQgaXMgbmVjZXNzYXJ5IHRvIGludmxva2UgdGhpcyBldmVuIHdoZW4gYmluZGluZyBjdXN0b20gZXZlbnRcbiAgICAgKiBzbyB0aGF0IHRoZSB0b29sdGlwIGNhbiBzd2l0Y2ggYmV0d2VlbiBjdXN0b20gYW5kIGRlZmF1bHQgbGlzdGVuZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5iaW5kQmFzaWNMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEJhc2ljTGlzdGVuZXIodGFyZ2V0KSB7XG4gICAgICB2YXIgaXNDYXB0dXJlTW9kZSA9IHRoaXMuaXNDYXB0dXJlKHRhcmdldCk7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMuc2hvd1Rvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuaGlkZVRvb2x0aXAsIGlzQ2FwdHVyZU1vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRvb2x0aXBDb250ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG9vbHRpcENvbnRlbnQoKSB7XG4gICAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZ2V0Q29udGVudCA9IF9wcm9wczQuZ2V0Q29udGVudCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczQuY2hpbGRyZW47XG5cbiAgICAgIC8vIEdlbmVyYXRlIHRvb2x0aXAgY29udGVudFxuXG4gICAgICB2YXIgY29udGVudCA9IHZvaWQgMDtcbiAgICAgIGlmIChnZXRDb250ZW50KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGdldENvbnRlbnQpKSB7XG4gICAgICAgICAgY29udGVudCA9IGdldENvbnRlbnRbMF0gJiYgZ2V0Q29udGVudFswXSh0aGlzLnN0YXRlLm9yaWdpblRvb2x0aXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50KHRoaXMuc3RhdGUub3JpZ2luVG9vbHRpcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfZ2V0VGlwQ29udGVudDIuZGVmYXVsdCkodGhpcy5zdGF0ZS5vcmlnaW5Ub29sdGlwLCBjaGlsZHJlbiwgY29udGVudCwgdGhpcy5zdGF0ZS5pc011bHRpbGluZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNFbXB0eVRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgcGxhY2Vob2xkZXIgPT09ICdzdHJpbmcnICYmIHBsYWNlaG9sZGVyID09PSAnJyB8fCBwbGFjZWhvbGRlciA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIG1vdXNlIGVudGVyLCBzaG93IHRoZSB0b29sdGlwXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Nob3dUb29sdGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd1Rvb2x0aXAoZSwgaXNHbG9iYWxDYWxsKSB7XG4gICAgICBpZiAoaXNHbG9iYWxDYWxsKSB7XG4gICAgICAgIC8vIERvbid0IHRyaWdnZXIgb3RoZXIgZWxlbWVudHMgYmVsb25ncyB0byBvdGhlciBSZWFjdFRvb2x0aXBcbiAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGhpcy5nZXRUYXJnZXRBcnJheSh0aGlzLnByb3BzLmlkKTtcbiAgICAgICAgdmFyIGlzTXlFbGVtZW50ID0gdGFyZ2V0QXJyYXkuc29tZShmdW5jdGlvbiAoZWxlKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZSA9PT0gZS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc015RWxlbWVudCkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gR2V0IHRoZSB0b29sdGlwIGNvbnRlbnRcbiAgICAgIC8vIGNhbGN1bGF0ZSBpbiB0aGlzIHBocmFzZSBzbyB0aGF0IHRpcCB3aWR0aCBoZWlnaHQgY2FuIGJlIGRldGVjdGVkXG4gICAgICB2YXIgX3Byb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgbXVsdGlsaW5lID0gX3Byb3BzNS5tdWx0aWxpbmUsXG4gICAgICAgICAgZ2V0Q29udGVudCA9IF9wcm9wczUuZ2V0Q29udGVudDtcblxuICAgICAgdmFyIG9yaWdpblRvb2x0aXAgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcCcpO1xuICAgICAgdmFyIGlzTXVsdGlsaW5lID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1tdWx0aWxpbmUnKSB8fCBtdWx0aWxpbmUgfHwgZmFsc2U7XG5cbiAgICAgIC8vIElmIGl0IGlzIGZvY3VzIGV2ZW50IG9yIGNhbGxlZCBieSBSZWFjdFRvb2x0aXAuc2hvdywgc3dpdGNoIHRvIGBzb2xpZGAgZWZmZWN0XG4gICAgICB2YXIgc3dpdGNoVG9Tb2xpZCA9IGUgaW5zdGFuY2VvZiB3aW5kb3cuRm9jdXNFdmVudCB8fCBpc0dsb2JhbENhbGw7XG5cbiAgICAgIC8vIGlmIGl0IG5lZWRzIHRvIHNraXAgYWRkaW5nIGhpZGUgbGlzdGVuZXIgdG8gc2Nyb2xsXG4gICAgICB2YXIgc2Nyb2xsSGlkZSA9IHRydWU7XG4gICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGwtaGlkZScpKSB7XG4gICAgICAgIHNjcm9sbEhpZGUgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNjcm9sbC1oaWRlJykgPT09ICd0cnVlJztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zY3JvbGxIaWRlICE9IG51bGwpIHtcbiAgICAgICAgc2Nyb2xsSGlkZSA9IHRoaXMucHJvcHMuc2Nyb2xsSGlkZTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBjb3JyZWN0IHBsYWNlIGlzIHNldFxuICAgICAgdmFyIGRlc2lyZWRQbGFjZSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxhY2UnKSB8fCB0aGlzLnByb3BzLnBsYWNlIHx8ICd0b3AnO1xuICAgICAgdmFyIGVmZmVjdCA9IHN3aXRjaFRvU29saWQgJiYgJ3NvbGlkJyB8fCB0aGlzLmdldEVmZmVjdChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgdmFyIG9mZnNldCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb2Zmc2V0JykgfHwgdGhpcy5wcm9wcy5vZmZzZXQgfHwge307XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIF9nZXRQb3NpdGlvbjIuZGVmYXVsdCkoZSwgZS5jdXJyZW50VGFyZ2V0LCBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyksIGRlc2lyZWRQbGFjZSwgZGVzaXJlZFBsYWNlLCBlZmZlY3QsIG9mZnNldCk7XG4gICAgICB2YXIgcGxhY2UgPSByZXN1bHQuaXNOZXdTdGF0ZSA/IHJlc3VsdC5uZXdTdGF0ZS5wbGFjZSA6IGRlc2lyZWRQbGFjZTtcblxuICAgICAgLy8gVG8gcHJldmVudCBwcmV2aW91c2x5IGNyZWF0ZWQgdGltZXJzIGZyb20gdHJpZ2dlcmluZ1xuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgIHZhciByZXNob3dEZWxheSA9IHRoaXMuc3RhdGUuc2hvdyA/IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVsYXktdXBkYXRlJykgfHwgdGhpcy5wcm9wcy5kZWxheVVwZGF0ZSA6IDA7XG5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgdmFyIHVwZGF0ZVN0YXRlID0gZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoe1xuICAgICAgICAgIG9yaWdpblRvb2x0aXA6IG9yaWdpblRvb2x0aXAsXG4gICAgICAgICAgaXNNdWx0aWxpbmU6IGlzTXVsdGlsaW5lLFxuICAgICAgICAgIGRlc2lyZWRQbGFjZTogZGVzaXJlZFBsYWNlLFxuICAgICAgICAgIHBsYWNlOiBwbGFjZSxcbiAgICAgICAgICB0eXBlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKSB8fCBzZWxmLnByb3BzLnR5cGUgfHwgJ2RhcmsnLFxuICAgICAgICAgIGVmZmVjdDogZWZmZWN0LFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIGh0bWw6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHRtbCcpID8gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1odG1sJykgPT09ICd0cnVlJyA6IHNlbGYucHJvcHMuaHRtbCB8fCBmYWxzZSxcbiAgICAgICAgICBkZWxheVNob3c6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVsYXktc2hvdycpIHx8IHNlbGYucHJvcHMuZGVsYXlTaG93IHx8IDAsXG4gICAgICAgICAgZGVsYXlIaWRlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRlbGF5LWhpZGUnKSB8fCBzZWxmLnByb3BzLmRlbGF5SGlkZSB8fCAwLFxuICAgICAgICAgIGRlbGF5VXBkYXRlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWRlbGF5LXVwZGF0ZScpIHx8IHNlbGYucHJvcHMuZGVsYXlVcGRhdGUgfHwgMCxcbiAgICAgICAgICBib3JkZXI6IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYm9yZGVyJykgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWJvcmRlcicpID09PSAndHJ1ZScgOiBzZWxmLnByb3BzLmJvcmRlciB8fCBmYWxzZSxcbiAgICAgICAgICBleHRyYUNsYXNzOiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNsYXNzJykgfHwgc2VsZi5wcm9wcy5jbGFzcyB8fCBzZWxmLnByb3BzLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgICAgICBkaXNhYmxlOiB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcC1kaXNhYmxlJykgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpcC1kaXNhYmxlJykgPT09ICd0cnVlJyA6IHNlbGYucHJvcHMuZGlzYWJsZSB8fCBmYWxzZSxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0OiB0YXJnZXRcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChzY3JvbGxIaWRlKSBzZWxmLmFkZFNjcm9sbExpc3RlbmVyKHNlbGYuc3RhdGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgc2VsZi51cGRhdGVUb29sdGlwKGUpO1xuXG4gICAgICAgICAgaWYgKGdldENvbnRlbnQgJiYgQXJyYXkuaXNBcnJheShnZXRDb250ZW50KSkge1xuICAgICAgICAgICAgc2VsZi5pbnRlcnZhbFVwZGF0ZUNvbnRlbnQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLm1vdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9nZXRDb250ZW50ID0gc2VsZi5wcm9wcy5nZXRDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gKDAsIF9nZXRUaXBDb250ZW50Mi5kZWZhdWx0KShvcmlnaW5Ub29sdGlwLCAnJywgX2dldENvbnRlbnRbMF0oKSwgaXNNdWx0aWxpbmUpO1xuICAgICAgICAgICAgICAgIHZhciBpc0VtcHR5VGlwID0gc2VsZi5pc0VtcHR5VGlwKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIGlzRW1wdHlUaXA6IGlzRW1wdHlUaXBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGdldENvbnRlbnRbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBkZWxheSBjYWxsIGltbWVkaWF0ZWx5LCBkb24ndCBhbGxvdyBldmVudHMgdG8gZ2V0IGluIGZpcnN0LlxuICAgICAgaWYgKHJlc2hvd0RlbGF5KSB7XG4gICAgICAgIHRoaXMuZGVsYXlSZXNob3cgPSBzZXRUaW1lb3V0KHVwZGF0ZVN0YXRlLCByZXNob3dEZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gbW91c2UgaG92ZXIsIHVwZGF0ZXRvb2x0aXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlVG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVRvb2x0aXAoZSkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGRlbGF5U2hvdyA9IF9zdGF0ZS5kZWxheVNob3csXG4gICAgICAgICAgZGlzYWJsZSA9IF9zdGF0ZS5kaXNhYmxlO1xuICAgICAgdmFyIGFmdGVyU2hvdyA9IHRoaXMucHJvcHMuYWZ0ZXJTaG93O1xuXG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICB2YXIgZGVsYXlUaW1lID0gcGFyc2VJbnQoZGVsYXlTaG93LCAxMCk7XG4gICAgICB2YXIgZXZlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQgfHwgZS50YXJnZXQ7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBtb3VzZSBpcyBhY3R1YWxseSBvdmVyIHRoZSB0b29sdGlwLCBpZiBzbyBkb24ndCBoaWRlIHRoZSB0b29sdGlwXG4gICAgICBpZiAodGhpcy5tb3VzZU9uVG9vbFRpcCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNFbXB0eVRpcChwbGFjZWhvbGRlcikgfHwgZGlzYWJsZSkgcmV0dXJuOyAvLyBpZiB0aGUgdG9vbHRpcCBpcyBlbXB0eSwgZGlzYWJsZSB0aGUgdG9vbHRpcFxuICAgICAgdmFyIHVwZGF0ZVN0YXRlID0gZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBsYWNlaG9sZGVyKSAmJiBwbGFjZWhvbGRlci5sZW5ndGggPiAwIHx8IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgdmFyIGlzSW52aXNpYmxlID0gIV90aGlzNS5zdGF0ZS5zaG93O1xuICAgICAgICAgIF90aGlzNS5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50RXZlbnQ6IGUsXG4gICAgICAgICAgICBjdXJyZW50VGFyZ2V0OiBldmVudFRhcmdldCxcbiAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczUudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGlmIChpc0ludmlzaWJsZSAmJiBhZnRlclNob3cpIGFmdGVyU2hvdyhlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlTaG93TG9vcCk7XG4gICAgICBpZiAoZGVsYXlTaG93KSB7XG4gICAgICAgIHRoaXMuZGVsYXlTaG93TG9vcCA9IHNldFRpbWVvdXQodXBkYXRlU3RhdGUsIGRlbGF5VGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgKiBJZiB3ZSdyZSBtb3VzaW5nIG92ZXIgdGhlIHRvb2x0aXAgcmVtb3ZlIGl0IHdoZW4gd2UgbGVhdmUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpc3RlbkZvclRvb2x0aXBFeGl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuRm9yVG9vbHRpcEV4aXQoKSB7XG4gICAgICB2YXIgc2hvdyA9IHRoaXMuc3RhdGUuc2hvdztcblxuXG4gICAgICBpZiAoc2hvdyAmJiB0aGlzLnRvb2x0aXBSZWYpIHtcbiAgICAgICAgdGhpcy50b29sdGlwUmVmLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVMaXN0ZW5lckZvclRvb2x0aXBFeGl0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJGb3JUb29sdGlwRXhpdCgpIHtcbiAgICAgIHZhciBzaG93ID0gdGhpcy5zdGF0ZS5zaG93O1xuXG5cbiAgICAgIGlmIChzaG93ICYmIHRoaXMudG9vbHRpcFJlZikge1xuICAgICAgICB0aGlzLnRvb2x0aXBSZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMuaGlkZVRvb2x0aXApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gbW91c2UgbGVhdmUsIGhpZGUgdG9vbHRpcFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoaWRlVG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVUb29sdGlwKGUsIGhhc1RhcmdldCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBkZWxheUhpZGUgPSBfc3RhdGUyLmRlbGF5SGlkZSxcbiAgICAgICAgICBkaXNhYmxlID0gX3N0YXRlMi5kaXNhYmxlO1xuICAgICAgdmFyIGFmdGVySGlkZSA9IHRoaXMucHJvcHMuYWZ0ZXJIaWRlO1xuXG4gICAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLmdldFRvb2x0aXBDb250ZW50KCk7XG4gICAgICBpZiAoIXRoaXMubW91bnQpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpIHx8IGRpc2FibGUpIHJldHVybjsgLy8gaWYgdGhlIHRvb2x0aXAgaXMgZW1wdHksIGRpc2FibGUgdGhlIHRvb2x0aXBcbiAgICAgIGlmIChoYXNUYXJnZXQpIHtcbiAgICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBvdGhlciBlbGVtZW50cyBiZWxvbmdzIHRvIG90aGVyIFJlYWN0VG9vbHRpcFxuICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0aGlzLmdldFRhcmdldEFycmF5KHRoaXMucHJvcHMuaWQpO1xuICAgICAgICB2YXIgaXNNeUVsZW1lbnQgPSB0YXJnZXRBcnJheS5zb21lKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlID09PSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzTXlFbGVtZW50IHx8ICF0aGlzLnN0YXRlLnNob3cpIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc2V0U3RhdGUgPSBmdW5jdGlvbiByZXNldFN0YXRlKCkge1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0gX3RoaXM2LnN0YXRlLnNob3c7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBtb3VzZSBpcyBhY3R1YWxseSBvdmVyIHRoZSB0b29sdGlwLCBpZiBzbyBkb24ndCBoaWRlIHRoZSB0b29sdGlwXG4gICAgICAgIGlmIChfdGhpczYubW91c2VPblRvb2xUaXAoKSkge1xuICAgICAgICAgIF90aGlzNi5saXN0ZW5Gb3JUb29sdGlwRXhpdCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczYucmVtb3ZlTGlzdGVuZXJGb3JUb29sdGlwRXhpdCgpO1xuXG4gICAgICAgIF90aGlzNi5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNi5yZW1vdmVTY3JvbGxMaXN0ZW5lcigpO1xuICAgICAgICAgIGlmIChpc1Zpc2libGUgJiYgYWZ0ZXJIaWRlKSBhZnRlckhpZGUoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XG4gICAgICBpZiAoZGVsYXlIaWRlKSB7XG4gICAgICAgIHRoaXMuZGVsYXlIaWRlTG9vcCA9IHNldFRpbWVvdXQocmVzZXRTdGF0ZSwgcGFyc2VJbnQoZGVsYXlIaWRlLCAxMCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBzY3JvbGwgZXZlbnRsaXN0ZW5lciB3aGVuIHRvb2x0aXAgc2hvd1xuICAgICAqIGF1dG9tYXRpY2FsbHkgaGlkZSB0aGUgdG9vbHRpcCB3aGVuIHNjcm9sbGluZ1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRTY3JvbGxMaXN0ZW5lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNjcm9sbExpc3RlbmVyKGN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHZhciBpc0NhcHR1cmVNb2RlID0gdGhpcy5pc0NhcHR1cmUoY3VycmVudFRhcmdldCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oaWRlVG9vbHRpcCwgaXNDYXB0dXJlTW9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlU2Nyb2xsTGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTY3JvbGxMaXN0ZW5lcigpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhpZGVUb29sdGlwKTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGlvbiB0aGUgcG9zaXRpb25cblxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgX3N0YXRlMyA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgY3VycmVudEV2ZW50ID0gX3N0YXRlMy5jdXJyZW50RXZlbnQsXG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IF9zdGF0ZTMuY3VycmVudFRhcmdldCxcbiAgICAgICAgICBwbGFjZSA9IF9zdGF0ZTMucGxhY2UsXG4gICAgICAgICAgZGVzaXJlZFBsYWNlID0gX3N0YXRlMy5kZXNpcmVkUGxhY2UsXG4gICAgICAgICAgZWZmZWN0ID0gX3N0YXRlMy5lZmZlY3QsXG4gICAgICAgICAgb2Zmc2V0ID0gX3N0YXRlMy5vZmZzZXQ7XG5cbiAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBfZ2V0UG9zaXRpb24yLmRlZmF1bHQpKGN1cnJlbnRFdmVudCwgY3VycmVudFRhcmdldCwgbm9kZSwgcGxhY2UsIGRlc2lyZWRQbGFjZSwgZWZmZWN0LCBvZmZzZXQpO1xuXG4gICAgICBpZiAocmVzdWx0LmlzTmV3U3RhdGUpIHtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHJldmVyc2UgcGxhY2VtZW50XG4gICAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHJlc3VsdC5uZXdTdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNy51cGRhdGVQb3NpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIFNldCB0b29sdGlwIHBvc2l0aW9uXG4gICAgICBub2RlLnN0eWxlLmxlZnQgPSByZXN1bHQucG9zaXRpb24ubGVmdCArICdweCc7XG4gICAgICBub2RlLnN0eWxlLnRvcCA9IHJlc3VsdC5wb3NpdGlvbi50b3AgKyAncHgnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBzdHlsZSB0YWcgaW4gaGVhZGVyXG4gICAgICogaW4gdGhpcyB3YXkgd2UgY2FuIGluc2VydCBkZWZhdWx0IGNzc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTdHlsZUhlYWRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0eWxlSGVhZGVyKCkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgaWYgKCFoZWFkLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlW2lkPVwicmVhY3QtdG9vbHRpcFwiXScpKSB7XG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICB0YWcuaWQgPSAncmVhY3QtdG9vbHRpcCc7XG4gICAgICAgIHRhZy5pbm5lckhUTUwgPSBfc3R5bGUyLmRlZmF1bHQ7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnICYmIF9fd2VicGFja19ub25jZV9fKSB7XG4gICAgICAgICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBfX3dlYnBhY2tfbm9uY2VfXyk7XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgICAgICBoZWFkLmluc2VydEJlZm9yZSh0YWcsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ0xlYXIgYWxsIGtpbmRzIG9mIHRpbWVvdXQgb2YgaW50ZXJ2YWxcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xlYXJUaW1lcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVNob3dMb29wKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5SGlkZUxvb3ApO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVsYXlSZXNob3cpO1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsVXBkYXRlQ29udGVudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBfc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBleHRyYUNsYXNzID0gX3N0YXRlNC5leHRyYUNsYXNzLFxuICAgICAgICAgIGh0bWwgPSBfc3RhdGU0Lmh0bWwsXG4gICAgICAgICAgYXJpYVByb3BzID0gX3N0YXRlNC5hcmlhUHJvcHMsXG4gICAgICAgICAgZGlzYWJsZSA9IF9zdGF0ZTQuZGlzYWJsZTtcblxuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gdGhpcy5nZXRUb29sdGlwQ29udGVudCgpO1xuICAgICAgdmFyIGlzRW1wdHlUaXAgPSB0aGlzLmlzRW1wdHlUaXAocGxhY2Vob2xkZXIpO1xuICAgICAgdmFyIHRvb2x0aXBDbGFzcyA9ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoJ19fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAnLCB7ICdzaG93JzogdGhpcy5zdGF0ZS5zaG93ICYmICFkaXNhYmxlICYmICFpc0VtcHR5VGlwIH0sIHsgJ2JvcmRlcic6IHRoaXMuc3RhdGUuYm9yZGVyIH0sIHsgJ3BsYWNlLXRvcCc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICd0b3AnIH0sIHsgJ3BsYWNlLWJvdHRvbSc6IHRoaXMuc3RhdGUucGxhY2UgPT09ICdib3R0b20nIH0sIHsgJ3BsYWNlLWxlZnQnOiB0aGlzLnN0YXRlLnBsYWNlID09PSAnbGVmdCcgfSwgeyAncGxhY2UtcmlnaHQnOiB0aGlzLnN0YXRlLnBsYWNlID09PSAncmlnaHQnIH0sIHsgJ3R5cGUtZGFyayc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ2RhcmsnIH0sIHsgJ3R5cGUtc3VjY2Vzcyc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ3N1Y2Nlc3MnIH0sIHsgJ3R5cGUtd2FybmluZyc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ3dhcm5pbmcnIH0sIHsgJ3R5cGUtZXJyb3InOiB0aGlzLnN0YXRlLnR5cGUgPT09ICdlcnJvcicgfSwgeyAndHlwZS1pbmZvJzogdGhpcy5zdGF0ZS50eXBlID09PSAnaW5mbycgfSwgeyAndHlwZS1saWdodCc6IHRoaXMuc3RhdGUudHlwZSA9PT0gJ2xpZ2h0JyB9LCB7ICdhbGxvd19ob3Zlcic6IHRoaXMucHJvcHMuZGVsYXlVcGRhdGUgfSwgeyAnYWxsb3dfY2xpY2snOiB0aGlzLnByb3BzLmNsaWNrYWJsZSB9KTtcblxuICAgICAgdmFyIFdyYXBwZXIgPSB0aGlzLnByb3BzLndyYXBwZXI7XG4gICAgICBpZiAoUmVhY3RUb29sdGlwLnN1cHBvcnRlZFdyYXBwZXJzLmluZGV4T2YoV3JhcHBlcikgPCAwKSB7XG4gICAgICAgIFdyYXBwZXIgPSBSZWFjdFRvb2x0aXAuZGVmYXVsdFByb3BzLndyYXBwZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChodG1sKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVyLCBfZXh0ZW5kcyh7IGNsYXNzTmFtZTogdG9vbHRpcENsYXNzICsgJyAnICsgZXh0cmFDbGFzcyxcbiAgICAgICAgICBpZDogdGhpcy5wcm9wcy5pZCxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM4LnRvb2x0aXBSZWYgPSBfcmVmO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgYXJpYVByb3BzLCB7XG4gICAgICAgICAgJ2RhdGEtaWQnOiAndG9vbHRpcCcsXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBwbGFjZWhvbGRlciB9IH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBXcmFwcGVyLFxuICAgICAgICAgIF9leHRlbmRzKHsgY2xhc3NOYW1lOiB0b29sdGlwQ2xhc3MgKyAnICcgKyBleHRyYUNsYXNzLFxuICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWRcbiAgICAgICAgICB9LCBhcmlhUHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczgudG9vbHRpcFJlZiA9IF9yZWYyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdkYXRhLWlkJzogJ3Rvb2x0aXAnIH0pLFxuICAgICAgICAgIHBsYWNlaG9sZGVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlYWN0VG9vbHRpcDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCksIF9jbGFzczIucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIHBsYWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgdHlwZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGVmZmVjdDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIG9mZnNldDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIG11bHRpbGluZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBib3JkZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgaW5zZWN1cmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgY2xhc3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBpZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGh0bWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZGVsYXlIaWRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgZGVsYXlVcGRhdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBkZWxheVNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBldmVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV2ZW50T2ZmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgd2F0Y2hXaW5kb3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgaXNDYXB0dXJlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGdsb2JhbEV2ZW50T2ZmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZ2V0Q29udGVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGFmdGVyU2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhZnRlckhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGlzYWJsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzY3JvbGxIaWRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHJlc2l6ZUhpZGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgd3JhcHBlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsaWNrYWJsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59LCBfY2xhc3MyLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5zZWN1cmU6IHRydWUsXG4gIHJlc2l6ZUhpZGU6IHRydWUsXG4gIHdyYXBwZXI6ICdkaXYnLFxuICBjbGlja2FibGU6IGZhbHNlXG59LCBfY2xhc3MyLnN1cHBvcnRlZFdyYXBwZXJzID0gWydkaXYnLCAnc3BhbiddLCBfY2xhc3MyLmRpc3BsYXlOYW1lID0gJ1JlYWN0VG9vbHRpcCcsIF90ZW1wKSkgfHwgX2NsYXNzKSB8fCBfY2xhc3MpIHx8IF9jbGFzcykgfHwgX2NsYXNzKSB8fCBfY2xhc3MpIHx8IF9jbGFzcztcblxuLyogZXhwb3J0IGRlZmF1bHQgbm90IGZpdCBmb3Igc3RhbmRhbG9uZSwgaXQgd2lsbCBleHBvcnRzIHtkZWZhdWx0Oi4uLn0gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VG9vbHRpcDsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgaXNOYXRpdmUgZnJvbSAnLi9pc05hdGl2ZSc7XG5cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xubGV0IHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKGxldCBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICBsZXQgc2NoZWR1bGVkID0gZmFsc2U7XG4gIGxldCBpID0gMDtcbiAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAvLyBNdXRhdGlvbk9ic2VydmVyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBzY2hlZHVsaW5nIG1pY3JvdGFza3MsIHdoaWNoXG4gIC8vIGFyZSBzY2hlZHVsZWQgKmJlZm9yZSogdGhlIG5leHQgdGFzay4gVGhpcyBnaXZlcyB1cyBhIHdheSB0byBkZWJvdW5jZVxuICAvLyBhIGZ1bmN0aW9uIGJ1dCBlbnN1cmUgaXQncyBjYWxsZWQgKmJlZm9yZSogdGhlIG5leHQgcGFpbnQuXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICAgIGZuKCk7XG4gICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gIH0pO1xuXG4gIG9ic2VydmVyLm9ic2VydmUoZWxlbSwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgneC1pbmRleCcsIGkpO1xuICAgICAgaSA9IGkgKyAxOyAvLyBkb24ndCB1c2UgY29tcHVuZCAoKz0pIGJlY2F1c2UgaXQgZG9lc24ndCBnZXQgb3B0aW1pemVkIGluIFY4XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIGxldCBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG4vLyBJdCdzIGNvbW1vbiBmb3IgTXV0YXRpb25PYnNlcnZlciBwb2x5ZmlsbHMgdG8gYmUgc2VlbiBpbiB0aGUgd2lsZCwgaG93ZXZlclxuLy8gdGhlc2UgcmVseSBvbiBNdXRhdGlvbiBFdmVudHMgd2hpY2ggb25seSBvY2N1ciB3aGVuIGFuIGVsZW1lbnQgaXMgY29ubmVjdGVkXG4vLyB0byB0aGUgRE9NLiBUaGUgYWxnb3JpdGhtIHVzZWQgaW4gdGhpcyBtb2R1bGUgZG9lcyBub3QgdXNlIGEgY29ubmVjdGVkIGVsZW1lbnQsXG4vLyBhbmQgc28gd2UgbXVzdCBlbnN1cmUgdGhhdCBhICpuYXRpdmUqIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxuY29uc3Qgc3VwcG9ydHNOYXRpdmVNdXRhdGlvbk9ic2VydmVyID1cbiAgaXNCcm93c2VyICYmIGlzTmF0aXZlKHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbmV4cG9ydCBkZWZhdWx0IChzdXBwb3J0c05hdGl2ZU11dGF0aW9uT2JzZXJ2ZXJcbiAgPyBtaWNyb3Rhc2tEZWJvdW5jZVxuICA6IHRhc2tEZWJvdW5jZSk7XG4iLCJjb25zdCBuYXRpdmVIaW50cyA9IFtcbiAgJ25hdGl2ZSBjb2RlJyxcbiAgJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXScsIC8vIGZvciBtb2JpbGUgc2FmYXJpIGlPUyA5LjBcbl07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgZnVuY3Rpb24gaXMgaW1wbGVtZW50ZWQgbmF0aXZlbHkgKGFzIG9wcG9zZWQgdG8gYSBwb2x5ZmlsbCkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0Z1bmN0aW9uIHwgdW5kZWZpbmVkfSBmbiB0aGUgZnVuY3Rpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnQgZGVmYXVsdCBmbiA9PlxuICBuYXRpdmVIaW50cy5zb21lKGhpbnQgPT4gKGZuIHx8ICcnKS50b1N0cmluZygpLmluZGV4T2YoaGludCkgPiAtMSk7XG4iLCIvKipcbiAqIFRlbGxzIGlmIHlvdSBhcmUgcnVubmluZyBJbnRlcm5ldCBFeHBsb3JlciAxMFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUUxMFxuICovXG5sZXQgaXNJRTEwID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgaWYgKGlzSUUxMCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaXNJRTEwID0gbmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTVNJRSAxMCcpICE9PSAtMTtcbiAgfVxuICByZXR1cm4gaXNJRTEwO1xufVxuIiwiLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICBjb25zdCBnZXRUeXBlID0ge307XG4gIHJldHVybiAoXG4gICAgZnVuY3Rpb25Ub0NoZWNrICYmXG4gICAgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgKTtcbn1cbiIsIi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgY29uc3QgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG4iLCIvKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmIChcbiAgICAhZWxlbWVudCB8fFxuICAgIFsnSFRNTCcsICdCT0RZJywgJyNkb2N1bWVudCddLmluZGV4T2YoZWxlbWVudC5ub2RlTmFtZSkgIT09IC0xXG4gICkge1xuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICBjb25zdCB7IG92ZXJmbG93LCBvdmVyZmxvd1gsIG92ZXJmbG93WSB9ID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICBpZiAoLyhhdXRvfHNjcm9sbCkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgY29uc3Qgb2Zmc2V0UGFyZW50ID0gZWxlbWVudCAmJiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgY29uc3Qgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoXG4gICAgWydURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiZcbiAgICBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYydcbiAgKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cbiIsIi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwiaW1wb3J0IGlzT2Zmc2V0Q29udGFpbmVyIGZyb20gJy4vaXNPZmZzZXRDb250YWluZXInO1xuaW1wb3J0IGdldFJvb3QgZnJvbSAnLi9nZXRSb290JztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9nZXRPZmZzZXRQYXJlbnQnO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICBjb25zdCBvcmRlciA9XG4gICAgZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICZcbiAgICBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgY29uc3Qgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIGNvbnN0IGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIGNvbnN0IHsgY29tbW9uQW5jZXN0b3JDb250YWluZXIgfSA9IHJhbmdlO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcbiAgaWYgKFxuICAgIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiZcbiAgICAgIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lcikgfHxcbiAgICBzdGFydC5jb250YWlucyhlbmQpXG4gICkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgY29uc3QgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG4iLCJpbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4vZ2V0T2Zmc2V0UGFyZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICBjb25zdCB7IG5vZGVOYW1lIH0gPSBlbGVtZW50O1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50XG4gICk7XG59XG4iLCIvKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQsIHNpZGUgPSAndG9wJykge1xuICBjb25zdCB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICBjb25zdCBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIGNvbnN0IGh0bWwgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNvbnN0IHNjcm9sbGluZ0VsZW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuIiwiLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICBjb25zdCBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICBjb25zdCBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIChcbiAgICArc3R5bGVzW2Bib3JkZXIke3NpZGVBfVdpZHRoYF0uc3BsaXQoJ3B4JylbMF0gK1xuICAgICtzdHlsZXNbYGJvcmRlciR7c2lkZUJ9V2lkdGhgXS5zcGxpdCgncHgnKVswXVxuICApO1xufVxuIiwiaW1wb3J0IGlzSUUxMCBmcm9tICcuL2lzSUUxMCc7XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoXG4gICAgYm9keVtgb2Zmc2V0JHtheGlzfWBdLFxuICAgIGJvZHlbYHNjcm9sbCR7YXhpc31gXSxcbiAgICBodG1sW2BjbGllbnQke2F4aXN9YF0sXG4gICAgaHRtbFtgb2Zmc2V0JHtheGlzfWBdLFxuICAgIGh0bWxbYHNjcm9sbCR7YXhpc31gXSxcbiAgICBpc0lFMTAoKVxuICAgICAgPyBodG1sW2BvZmZzZXQke2F4aXN9YF0gK1xuICAgICAgICBjb21wdXRlZFN0eWxlW2BtYXJnaW4ke2F4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCd9YF0gK1xuICAgICAgICBjb21wdXRlZFN0eWxlW2BtYXJnaW4ke2F4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnfWBdXG4gICAgICA6IDBcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoKSB7XG4gIGNvbnN0IGJvZHkgPSB3aW5kb3cuZG9jdW1lbnQuYm9keTtcbiAgY29uc3QgaHRtbCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBpc0lFMTAoKSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gIH07XG59XG4iLCIvKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5vZmZzZXRzLFxuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodCxcbiAgfTtcbn1cbiIsImltcG9ydCBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkgZnJvbSAnLi9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuaW1wb3J0IGdldEJvcmRlcnNTaXplIGZyb20gJy4vZ2V0Qm9yZGVyc1NpemUnO1xuaW1wb3J0IGdldFdpbmRvd1NpemVzIGZyb20gJy4vZ2V0V2luZG93U2l6ZXMnO1xuaW1wb3J0IGdldFNjcm9sbCBmcm9tICcuL2dldFNjcm9sbCc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGlzSUUxMCBmcm9tICcuL2lzSUUxMCc7XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgbGV0IHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIGlmIChpc0lFMTAoKSkge1xuICAgIHRyeSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0gZWxzZSB7XG4gICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wLFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgY29uc3Qgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcygpIDoge307XG4gIGNvbnN0IHdpZHRoID1cbiAgICBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICBjb25zdCBoZWlnaHQgPVxuICAgIHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICBsZXQgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIGxldCB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgaW5jbHVkZVNjcm9sbCBmcm9tICcuL2luY2x1ZGVTY3JvbGwnO1xuaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBydW5Jc0lFMTAgZnJvbSAnLi9pc0lFMTAnO1xuaW1wb3J0IGdldENsaWVudFJlY3QgZnJvbSAnLi9nZXRDbGllbnRSZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgY29uc3QgaXNJRTEwID0gcnVuSXNJRTEwKCk7XG4gIGNvbnN0IGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICBjb25zdCBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICBjb25zdCBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIGNvbnN0IHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIGNvbnN0IGJvcmRlclRvcFdpZHRoID0gK3N0eWxlcy5ib3JkZXJUb3BXaWR0aC5zcGxpdCgncHgnKVswXTtcbiAgY29uc3QgYm9yZGVyTGVmdFdpZHRoID0gK3N0eWxlcy5ib3JkZXJMZWZ0V2lkdGguc3BsaXQoJ3B4JylbMF07XG5cbiAgbGV0IG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0LFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICBjb25zdCBtYXJnaW5Ub3AgPSArc3R5bGVzLm1hcmdpblRvcC5zcGxpdCgncHgnKVswXTtcbiAgICBjb25zdCBtYXJnaW5MZWZ0ID0gK3N0eWxlcy5tYXJnaW5MZWZ0LnNwbGl0KCdweCcpWzBdO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChcbiAgICBpc0lFMTBcbiAgICAgID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudClcbiAgICAgIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWSdcbiAgKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuIiwiaW1wb3J0IGdldFNjcm9sbCBmcm9tICcuL2dldFNjcm9sbCc7XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCwgc3VidHJhY3QgPSBmYWxzZSkge1xuICBjb25zdCBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIGNvbnN0IG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuIiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tICcuL2dldFNjcm9sbFBhcmVudCc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuaW1wb3J0IGZpbmRDb21tb25PZmZzZXRQYXJlbnQgZnJvbSAnLi9maW5kQ29tbW9uT2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUgZnJvbSAnLi9nZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUnO1xuaW1wb3J0IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0V2luZG93U2l6ZXMgZnJvbSAnLi9nZXRXaW5kb3dTaXplcyc7XG5pbXBvcnQgaXNGaXhlZCBmcm9tICcuL2lzRml4ZWQnO1xuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGFyaWVzKFxuICBwb3BwZXIsXG4gIHJlZmVyZW5jZSxcbiAgcGFkZGluZyxcbiAgYm91bmRhcmllc0VsZW1lbnRcbikge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICBsZXQgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIGNvbnN0IG9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgbGV0IGJvdW5kYXJpZXNOb2RlO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocG9wcGVyKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKFxuICAgICAgYm91bmRhcmllc05vZGUsXG4gICAgICBvZmZzZXRQYXJlbnRcbiAgICApO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBnZXRXaW5kb3dTaXplcygpO1xuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBib3VuZGFyaWVzLmxlZnQgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy50b3AgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy5yaWdodCAtPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBwYWRkaW5nO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuIiwiaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5pbXBvcnQgZ2V0U2Nyb2xsIGZyb20gJy4vZ2V0U2Nyb2xsJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4vZ2V0Q2xpZW50UmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIGNvbnN0IGh0bWwgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBjb25zdCByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgY29uc3Qgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICBjb25zdCBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoaHRtbCk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKTtcblxuICBjb25zdCBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuIiwiaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuL2dldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIGNvbnN0IG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG4iLCJpbXBvcnQgZ2V0Qm91bmRhcmllcyBmcm9tICcuLi91dGlscy9nZXRCb3VuZGFyaWVzJztcblxuZnVuY3Rpb24gZ2V0QXJlYSh7IHdpZHRoLCBoZWlnaHQgfSkge1xuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoXG4gIHBsYWNlbWVudCxcbiAgcmVmUmVjdCxcbiAgcG9wcGVyLFxuICByZWZlcmVuY2UsXG4gIGJvdW5kYXJpZXNFbGVtZW50LFxuICBwYWRkaW5nID0gMFxuKSB7XG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBwb3BwZXIsXG4gICAgcmVmZXJlbmNlLFxuICAgIHBhZGRpbmcsXG4gICAgYm91bmRhcmllc0VsZW1lbnRcbiAgKTtcblxuICBjb25zdCByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wLFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tLFxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKVxuICAgIC5tYXAoa2V5ID0+ICh7XG4gICAgICBrZXksXG4gICAgICAuLi5yZWN0c1trZXldLFxuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKSxcbiAgICB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5hcmVhIC0gYS5hcmVhKTtcblxuICBjb25zdCBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKFxuICAgICh7IHdpZHRoLCBoZWlnaHQgfSkgPT5cbiAgICAgIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodFxuICApO1xuXG4gIGNvbnN0IGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwXG4gICAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleVxuICAgIDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIGNvbnN0IHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyBgLSR7dmFyaWF0aW9ufWAgOiAnJyk7XG59XG4iLCJpbXBvcnQgZmluZENvbW1vbk9mZnNldFBhcmVudCBmcm9tICcuL2ZpbmRDb21tb25PZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSBmcm9tICcuL2dldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSc7XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICBjb25zdCBjb21tb25PZmZzZXRQYXJlbnQgPSBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCk7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20pO1xuICBjb25zdCB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCk7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHgsXG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICBjb25zdCBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIG1hdGNoZWQgPT4gaGFzaFttYXRjaGVkXSk7XG59XG4iLCJpbXBvcnQgZ2V0T3V0ZXJTaXplcyBmcm9tICcuL2dldE91dGVyU2l6ZXMnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4vZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICBjb25zdCBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgY29uc3QgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0LFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgY29uc3QgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIGNvbnN0IG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICBjb25zdCBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIGNvbnN0IHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPVxuICAgIHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICtcbiAgICByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLVxuICAgIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPVxuICAgICAgcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPVxuICAgICAgcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cbiIsIi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IGZpbmRJbmRleCBmcm9tICcuL2ZpbmRJbmRleCc7XG5pbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICBjb25zdCBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZFxuICAgID8gbW9kaWZpZXJzXG4gICAgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChtb2RpZmllciA9PiB7XG4gICAgaWYgKG1vZGlmaWVyLmZ1bmN0aW9uKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIGNvbnN0IGZuID0gbW9kaWZpZXIuZnVuY3Rpb24gfHwgbW9kaWZpZXIuZm47XG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSAnLi9maW5kJztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoY3VyID0+IGN1cltwcm9wXSA9PT0gdmFsdWUpO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgY29uc3QgbWF0Y2ggPSBmaW5kKGFyciwgb2JqID0+IG9ialtwcm9wXSA9PT0gdmFsdWUpO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuIiwiLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShcbiAgICAoeyBuYW1lLCBlbmFibGVkIH0pID0+IGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lXG4gICk7XG59XG4iLCIvKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICBjb25zdCBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICBjb25zdCB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY29uc3QgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgY29uc3QgdG9DaGVjayA9IHByZWZpeCA/IGAke3ByZWZpeH0ke3VwcGVyUHJvcH1gIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSAnLi9nZXRTY3JvbGxQYXJlbnQnO1xuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgY29uc3QgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIGNvbnN0IHRhcmdldCA9IGlzQm9keSA/IHdpbmRvdyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoXG4gICAgICBnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLFxuICAgICAgZXZlbnQsXG4gICAgICBjYWxsYmFjayxcbiAgICAgIHNjcm9sbFBhcmVudHNcbiAgICApO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhcbiAgcmVmZXJlbmNlLFxuICBvcHRpb25zLFxuICBzdGF0ZSxcbiAgdXBkYXRlQm91bmRcbikge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBjb25zdCBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhcbiAgICBzY3JvbGxFbGVtZW50LFxuICAgICdzY3JvbGwnLFxuICAgIHN0YXRlLnVwZGF0ZUJvdW5kLFxuICAgIHN0YXRlLnNjcm9sbFBhcmVudHNcbiAgKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiIsImltcG9ydCBpc01vZGlmaWVyRW5hYmxlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyRW5hYmxlZCc7XG5pbXBvcnQgZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIGZyb20gJy4uL3V0aWxzL2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSc7XG5cbi8qKlxuICogRGVzdHJveSB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlRXZlbnRMaXN0ZW5lcnMnO1xuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG4iLCIvKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cbiIsIi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbiIsImltcG9ydCBpc051bWVyaWMgZnJvbSAnLi9pc051bWVyaWMnO1xuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGxldCB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFxuICAgICAgWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT1cbiAgICAgICAgLTEgJiZcbiAgICAgIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pXG4gICAgKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSAnLi9maW5kJztcblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKFxuICBtb2RpZmllcnMsXG4gIHJlcXVlc3RpbmdOYW1lLFxuICByZXF1ZXN0ZWROYW1lXG4pIHtcbiAgY29uc3QgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCAoeyBuYW1lIH0pID0+IG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lKTtcblxuICBjb25zdCBpc1JlcXVpcmVkID1cbiAgICAhIXJlcXVlc3RpbmcgJiZcbiAgICBtb2RpZmllcnMuc29tZShtb2RpZmllciA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmXG4gICAgICAgIG1vZGlmaWVyLmVuYWJsZWQgJiZcbiAgICAgICAgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyXG4gICAgICApO1xuICAgIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIGNvbnN0IHJlcXVlc3RpbmcgPSBgXFxgJHtyZXF1ZXN0aW5nTmFtZX1cXGBgO1xuICAgIGNvbnN0IHJlcXVlc3RlZCA9IGBcXGAke3JlcXVlc3RlZE5hbWV9XFxgYDtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgJHtyZXF1ZXN0ZWR9IG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICR7cmVxdWVzdGluZ30gbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAke3JlcXVlc3Rpbmd9IWBcbiAgICApO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuIiwiLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tcmlnaHRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAgJ2F1dG8tc3RhcnQnLFxuICAnYXV0bycsXG4gICdhdXRvLWVuZCcsXG4gICd0b3Atc3RhcnQnLFxuICAndG9wJyxcbiAgJ3RvcC1lbmQnLFxuICAncmlnaHQtc3RhcnQnLFxuICAncmlnaHQnLFxuICAncmlnaHQtZW5kJyxcbiAgJ2JvdHRvbS1lbmQnLFxuICAnYm90dG9tJyxcbiAgJ2JvdHRvbS1zdGFydCcsXG4gICdsZWZ0LWVuZCcsXG4gICdsZWZ0JyxcbiAgJ2xlZnQtc3RhcnQnLFxuXTtcbiIsImltcG9ydCBwbGFjZW1lbnRzIGZyb20gJy4uL21ldGhvZHMvcGxhY2VtZW50cyc7XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxuY29uc3QgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50LCBjb3VudGVyID0gZmFsc2UpIHtcbiAgY29uc3QgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICBjb25zdCBhcnIgPSB2YWxpZFBsYWNlbWVudHNcbiAgICAuc2xpY2UoaW5kZXggKyAxKVxuICAgIC5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cbiIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tICcuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb24gZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb24nO1xuaW1wb3J0IGdldFBvcHBlck9mZnNldHMgZnJvbSAnLi4vdXRpbHMvZ2V0UG9wcGVyT2Zmc2V0cyc7XG5pbXBvcnQgcnVuTW9kaWZpZXJzIGZyb20gJy4uL3V0aWxzL3J1bk1vZGlmaWVycyc7XG5pbXBvcnQgZ2V0Qm91bmRhcmllcyBmcm9tICcuLi91dGlscy9nZXRCb3VuZGFyaWVzJztcbmltcG9ydCBpc01vZGlmaWVyRW5hYmxlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyRW5hYmxlZCc7XG5pbXBvcnQgY2xvY2t3aXNlIGZyb20gJy4uL3V0aWxzL2Nsb2Nrd2lzZSc7XG5cbmNvbnN0IEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZScsXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBjb25zdCBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhcbiAgICBkYXRhLmluc3RhbmNlLnBvcHBlcixcbiAgICBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSxcbiAgICBvcHRpb25zLnBhZGRpbmcsXG4gICAgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudFxuICApO1xuXG4gIGxldCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBsZXQgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBsZXQgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICBsZXQgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaCgoc3RlcCwgaW5kZXgpID0+IHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICBjb25zdCBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICBjb25zdCByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICBjb25zdCBvdmVybGFwc1JlZiA9XG4gICAgICAocGxhY2VtZW50ID09PSAnbGVmdCcgJiZcbiAgICAgICAgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAndG9wJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAnYm90dG9tJyAmJlxuICAgICAgICBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSkpO1xuXG4gICAgY29uc3Qgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIGNvbnN0IG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICBjb25zdCBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dzQm90dG9tID1cbiAgICAgIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIGNvbnN0IG92ZXJmbG93c0JvdW5kYXJpZXMgPVxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAocGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0KSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wKSB8fFxuICAgICAgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tKTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIGNvbnN0IGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICAgIGNvbnN0IGZsaXBwZWRWYXJpYXRpb24gPVxuICAgICAgISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmXG4gICAgICAoKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQpIHx8XG4gICAgICAgIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQpIHx8XG4gICAgICAgICghaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wKSB8fFxuICAgICAgICAoIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pKTtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSB7XG4gICAgICAgIC4uLmRhdGEub2Zmc2V0cy5wb3BwZXIsXG4gICAgICAgIC4uLmdldFBvcHBlck9mZnNldHMoXG4gICAgICAgICAgZGF0YS5pbnN0YW5jZS5wb3BwZXIsXG4gICAgICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgICBkYXRhLnBsYWNlbWVudFxuICAgICAgICApLFxuICAgICAgfTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBpc051bWVyaWMgZnJvbSAnLi4vdXRpbHMvaXNOdW1lcmljJztcbmltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGZpbmQgZnJvbSAnLi4vdXRpbHMvZmluZCc7XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgY29uc3Qgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICBjb25zdCB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgY29uc3QgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICBsZXQgZWxlbWVudDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgbGV0IHNpemU7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxcbiAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IHx8IDBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT2Zmc2V0KFxuICBvZmZzZXQsXG4gIHBvcHBlck9mZnNldHMsXG4gIHJlZmVyZW5jZU9mZnNldHMsXG4gIGJhc2VQbGFjZW1lbnRcbikge1xuICBjb25zdCBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgY29uc3QgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgY29uc3QgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnJhZyA9PiBmcmFnLnRyaW0oKSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIGNvbnN0IGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihcbiAgICBmaW5kKGZyYWdtZW50cywgZnJhZyA9PiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTEpXG4gICk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICBjb25zdCBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgbGV0IG9wcyA9IGRpdmlkZXIgIT09IC0xXG4gICAgPyBbXG4gICAgICAgIGZyYWdtZW50c1xuICAgICAgICAgIC5zbGljZSgwLCBkaXZpZGVyKVxuICAgICAgICAgIC5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLFxuICAgICAgICBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoXG4gICAgICAgICAgZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKVxuICAgICAgICApLFxuICAgICAgXVxuICAgIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcCgob3AsIGluZGV4KSA9PiB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodClcbiAgICAgID8gJ2hlaWdodCdcbiAgICAgIDogJ3dpZHRoJztcbiAgICBsZXQgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gKFxuICAgICAgb3BcbiAgICAgICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAgICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgICAgIC5tYXAoc3RyID0+IHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykpXG4gICAgKTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKChvcCwgaW5kZXgpID0+IHtcbiAgICBvcC5mb3JFYWNoKChmcmFnLCBpbmRleDIpID0+IHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9mZnNldChkYXRhLCB7IG9mZnNldCB9KSB7XG4gIGNvbnN0IHsgcGxhY2VtZW50LCBvZmZzZXRzOiB7IHBvcHBlciwgcmVmZXJlbmNlIH0gfSA9IGRhdGE7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICBsZXQgb2Zmc2V0cztcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgYXBwbHlTdHlsZSwgeyBhcHBseVN0eWxlT25Mb2FkIH0gZnJvbSAnLi9hcHBseVN0eWxlJztcbmltcG9ydCBjb21wdXRlU3R5bGUgZnJvbSAnLi9jb21wdXRlU3R5bGUnO1xuaW1wb3J0IGFycm93IGZyb20gJy4vYXJyb3cnO1xuaW1wb3J0IGZsaXAgZnJvbSAnLi9mbGlwJztcbmltcG9ydCBrZWVwVG9nZXRoZXIgZnJvbSAnLi9rZWVwVG9nZXRoZXInO1xuaW1wb3J0IG9mZnNldCBmcm9tICcuL29mZnNldCc7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gJy4vcHJldmVudE92ZXJmbG93JztcbmltcG9ydCBzaGlmdCBmcm9tICcuL3NoaWZ0JztcbmltcG9ydCBoaWRlIGZyb20gJy4vaGlkZSc7XG5pbXBvcnQgaW5uZXIgZnJvbSAnLi9pbm5lcic7XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdCxcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMCxcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBbiBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyIHRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGhhcyBhbHdheXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllciwgY2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCcsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2hvdGhlcnNcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFeHBlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBhc3N1cmUgaXQgdG8gcG9pbnQgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLCB5b3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlcixcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nLFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKS5cbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbixcbiAgICAgKiB0aGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYga2VlcFRvZ2V0aGVyIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lcixcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlLFxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCcsXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91IG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWQsXG4gIH0sXG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbnMgdXNlZCBieSBQb3BwZXIuanNcbiAqIHRoaXMgb2JqZWN0IGdldCBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsIGl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdywgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG4iLCJpbXBvcnQgbW9kaWZpZXJzIGZyb20gJy4uL21vZGlmaWVycy9pbmRleCc7XG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFzIDNyZCBhcmd1bWVudCBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoaXMgb2JqZWN0LCBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudFxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWRcbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6ICgpID0+IHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiAoKSA9PiB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanNcbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVycyxcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cbiIsIi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgY29uc3QgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgY29uc3Qgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgY29uc3QgeyByZWZlcmVuY2UsIHBvcHBlciB9ID0gZGF0YS5vZmZzZXRzO1xuICAgIGNvbnN0IGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICBjb25zdCBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIGNvbnN0IHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiB7IFtzaWRlXTogcmVmZXJlbmNlW3NpZGVdIH0sXG4gICAgICBlbmQ6IHtcbiAgICAgICAgW3NpZGVdOiByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSB7IC4uLnBvcHBlciwgLi4uc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSB9O1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gJy4uL3V0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0Qm91bmRhcmllcyBmcm9tICcuLi91dGlscy9nZXRCb3VuZGFyaWVzJztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgbGV0IGJvdW5kYXJpZXNFbGVtZW50ID1cbiAgICBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIGNvbnN0IGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKFxuICAgIGRhdGEuaW5zdGFuY2UucG9wcGVyLFxuICAgIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLFxuICAgIG9wdGlvbnMucGFkZGluZyxcbiAgICBib3VuZGFyaWVzRWxlbWVudFxuICApO1xuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIGNvbnN0IG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgbGV0IHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgY29uc3QgY2hlY2sgPSB7XG4gICAgcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKFxuICAgICAgICBwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJlxuICAgICAgICAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlXG4gICAgICApIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IFtwbGFjZW1lbnRdOiB2YWx1ZSB9O1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgY29uc3QgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIGxldCB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAoXG4gICAgICAgIHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmXG4gICAgICAgICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2VcbiAgICAgICkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKFxuICAgICAgICAgIHBvcHBlclttYWluU2lkZV0sXG4gICAgICAgICAgYm91bmRhcmllc1twbGFjZW1lbnRdIC1cbiAgICAgICAgICAgIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgW21haW5TaWRlXTogdmFsdWUgfTtcbiAgICB9LFxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2gocGxhY2VtZW50ID0+IHtcbiAgICBjb25zdCBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTFcbiAgICAgID8gJ3ByaW1hcnknXG4gICAgICA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IHsgLi4ucG9wcGVyLCAuLi5jaGVja1tzaWRlXShwbGFjZW1lbnQpIH07XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIvKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgY29uc3QgeyBwb3BwZXIsIHJlZmVyZW5jZSB9ID0gZGF0YS5vZmZzZXRzO1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCBmbG9vciA9IE1hdGguZmxvb3I7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICBjb25zdCBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgY29uc3Qgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICBjb25zdCBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9XG4gICAgICBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgZ2V0Q2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRDbGllbnRSZWN0JztcbmltcG9ydCBnZXRPdXRlclNpemVzIGZyb20gJy4uL3V0aWxzL2dldE91dGVyU2l6ZXMnO1xuaW1wb3J0IGlzTW9kaWZpZXJSZXF1aXJlZCBmcm9tICcuLi91dGlscy9pc01vZGlmaWVyUmVxdWlyZWQnO1xuaW1wb3J0IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSBmcm9tICcuLi91dGlscy9nZXRTdHlsZUNvbXB1dGVkUHJvcGVydHknO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGxldCBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgY29uc3QgeyBwb3BwZXIsIHJlZmVyZW5jZSB9ID0gZGF0YS5vZmZzZXRzO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICBjb25zdCBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIGNvbnN0IHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgY29uc3Qgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgY29uc3QgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1Y3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09XG4gICAgICBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPVxuICAgICAgcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICBjb25zdCBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgY29uc3QgcG9wcGVyTWFyZ2luU2lkZSA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShcbiAgICBkYXRhLmluc3RhbmNlLnBvcHBlcixcbiAgICBgbWFyZ2luJHtzaWRlQ2FwaXRhbGl6ZWR9YFxuICApLnJlcGxhY2UoJ3B4JywgJycpO1xuICBsZXQgc2lkZVZhbHVlID1cbiAgICBjZW50ZXIgLSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0ge307XG4gIGRhdGEub2Zmc2V0cy5hcnJvd1tzaWRlXSA9IE1hdGgucm91bmQoc2lkZVZhbHVlKTtcbiAgZGF0YS5vZmZzZXRzLmFycm93W2FsdFNpZGVdID0gJyc7IC8vIG1ha2Ugc3VyZSB0byB1bnNldCBhbnkgZXZlbnR1YWwgYWx0U2lkZSB2YWx1ZSBmcm9tIHRoZSBET00gbm9kZVxuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cbiIsImltcG9ydCBnZXRDbGllbnRSZWN0IGZyb20gJy4uL3V0aWxzL2dldENsaWVudFJlY3QnO1xuaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50JztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICBjb25zdCBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICBjb25zdCB7IHBvcHBlciwgcmVmZXJlbmNlIH0gPSBkYXRhLm9mZnNldHM7XG4gIGNvbnN0IGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICBjb25zdCBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9XG4gICAgcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC1cbiAgICAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgaXNNb2RpZmllclJlcXVpcmVkIGZyb20gJy4uL3V0aWxzL2lzTW9kaWZpZXJSZXF1aXJlZCc7XG5pbXBvcnQgZmluZCBmcm9tICcuLi91dGlscy9maW5kJztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGNvbnN0IHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICBjb25zdCBib3VuZCA9IGZpbmQoXG4gICAgZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsXG4gICAgbW9kaWZpZXIgPT4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdydcbiAgKS5ib3VuZGFyaWVzO1xuXG4gIGlmIChcbiAgICByZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fFxuICAgIHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8XG4gICAgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHxcbiAgICByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdFxuICApIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUgZnJvbSAnLi4vdXRpbHMvZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lJztcbmltcG9ydCBmaW5kIGZyb20gJy4uL3V0aWxzL2ZpbmQnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi91dGlscy9nZXRPZmZzZXRQYXJlbnQnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuLi91dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB7IHgsIHkgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgcG9wcGVyIH0gPSBkYXRhLm9mZnNldHM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG4gIGNvbnN0IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoXG4gICAgZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsXG4gICAgbW9kaWZpZXIgPT4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnXG4gICkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnXG4gICAgKTtcbiAgfVxuICBjb25zdCBncHVBY2NlbGVyYXRpb24gPVxuICAgIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvblxuICAgICAgOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICBjb25zdCBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uLFxuICB9O1xuXG4gIC8vIGZsb29yIHNpZGVzIHRvIGF2b2lkIGJsdXJyeSB0ZXh0XG4gIGNvbnN0IG9mZnNldHMgPSB7XG4gICAgbGVmdDogTWF0aC5mbG9vcihwb3BwZXIubGVmdCksXG4gICAgdG9wOiBNYXRoLmZsb29yKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogTWF0aC5mbG9vcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogTWF0aC5mbG9vcihwb3BwZXIucmlnaHQpLFxuICB9O1xuXG4gIGNvbnN0IHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICBjb25zdCBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICBjb25zdCBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICBsZXQgbGVmdCwgdG9wO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9IGB0cmFuc2xhdGUzZCgke2xlZnR9cHgsICR7dG9wfXB4LCAwKWA7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIGNvbnN0IGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICBjb25zdCBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBgJHtzaWRlQX0sICR7c2lkZUJ9YDtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudCxcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0geyAuLi5hdHRyaWJ1dGVzLCAuLi5kYXRhLmF0dHJpYnV0ZXMgfTtcbiAgZGF0YS5zdHlsZXMgPSB7IC4uLnN0eWxlcywgLi4uZGF0YS5zdHlsZXMgfTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IHsgLi4uZGF0YS5vZmZzZXRzLmFycm93LCAuLi5kYXRhLmFycm93U3R5bGVzIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgc2V0U3R5bGVzIGZyb20gJy4uL3V0aWxzL3NldFN0eWxlcyc7XG5pbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tICcuLi91dGlscy9zZXRBdHRyaWJ1dGVzJztcbmltcG9ydCBnZXRSZWZlcmVuY2VPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFJlZmVyZW5jZU9mZnNldHMnO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50JztcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQoXG4gIHJlZmVyZW5jZSxcbiAgcG9wcGVyLFxuICBvcHRpb25zLFxuICBtb2RpZmllck9wdGlvbnMsXG4gIHN0YXRlXG4pIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGNvbnN0IHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGNvbnN0IHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICAgIG9wdGlvbnMucGxhY2VtZW50LFxuICAgIHJlZmVyZW5jZU9mZnNldHMsXG4gICAgcG9wcGVyLFxuICAgIHJlZmVyZW5jZSxcbiAgICBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LFxuICAgIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZ1xuICApO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG4iLCIvKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiLy8gVXRpbHNcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vdXRpbHMvaXNGdW5jdGlvbic7XG5cbi8vIE1ldGhvZHNcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi9tZXRob2RzL3VwZGF0ZSc7XG5pbXBvcnQgZGVzdHJveSBmcm9tICcuL21ldGhvZHMvZGVzdHJveSc7XG5pbXBvcnQgZW5hYmxlRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi9tZXRob2RzL2VuYWJsZUV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi9tZXRob2RzL2Rpc2FibGVFdmVudExpc3RlbmVycyc7XG5pbXBvcnQgRGVmYXVsdHMgZnJvbSAnLi9tZXRob2RzL2RlZmF1bHRzJztcbmltcG9ydCBwbGFjZW1lbnRzIGZyb20gJy4vbWV0aG9kcy9wbGFjZW1lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wcGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLlBvcHBlci5EZWZhdWx0cywgLi4ub3B0aW9ucyB9O1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW10sXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHtcbiAgICAgIC4uLlBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsXG4gICAgICAuLi5vcHRpb25zLm1vZGlmaWVycyxcbiAgICB9KS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IHtcbiAgICAgICAgLy8gSWYgaXQncyBhIGJ1aWx0LWluIG1vZGlmaWVyLCB1c2UgaXQgYXMgYmFzZVxuICAgICAgICAuLi4oUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSksXG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBjdXN0b20gb3B0aW9ucywgb3ZlcnJpZGUgYW5kIG1lcmdlIHdpdGggZGVmYXVsdCBvbmVzXG4gICAgICAgIC4uLihvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pLFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycylcbiAgICAgIC5tYXAobmFtZSA9PiAoe1xuICAgICAgICBuYW1lLFxuICAgICAgICAuLi50aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdLFxuICAgICAgfSkpXG4gICAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLm9yZGVyIC0gYi5vcmRlcik7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChtb2RpZmllck9wdGlvbnMgPT4ge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChcbiAgICAgICAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICAgICAgICB0aGlzLnBvcHBlcixcbiAgICAgICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgbW9kaWZpZXJPcHRpb25zLFxuICAgICAgICAgIHRoaXMuc3RhdGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICBjb25zdCBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuICB1cGRhdGUoKSB7XG4gICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgfVxuICBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgfVxuICBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHNjaGVkdWxlVXBkYXRlID0gKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKTtcblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAqXG4gICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgKiBAbWVtYmVyIFV0aWxzXG4gICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICovXG4gIHN0YXRpYyBVdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5cbiAgc3RhdGljIHBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gIHN0YXRpYyBEZWZhdWx0cyA9IERlZmF1bHRzO1xufVxuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cbiIsImltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tICcuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudCc7XG5pbXBvcnQgZ2V0UmVmZXJlbmNlT2Zmc2V0cyBmcm9tICcuLi91dGlscy9nZXRSZWZlcmVuY2VPZmZzZXRzJztcbmltcG9ydCBnZXRQb3BwZXJPZmZzZXRzIGZyb20gJy4uL3V0aWxzL2dldFBvcHBlck9mZnNldHMnO1xuaW1wb3J0IHJ1bk1vZGlmaWVycyBmcm9tICcuLi91dGlscy9ydW5Nb2RpZmllcnMnO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fSxcbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHMoXG4gICAgdGhpcy5zdGF0ZSxcbiAgICB0aGlzLnBvcHBlcixcbiAgICB0aGlzLnJlZmVyZW5jZVxuICApO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSxcbiAgICB0aGlzLnBvcHBlcixcbiAgICB0aGlzLnJlZmVyZW5jZSxcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmdcbiAgKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyhcbiAgICB0aGlzLnBvcHBlcixcbiAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlLFxuICAgIGRhdGEucGxhY2VtZW50XG4gICk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cbiIsImltcG9ydCBzZXR1cEV2ZW50TGlzdGVuZXJzIGZyb20gJy4uL3V0aWxzL3NldHVwRXZlbnRMaXN0ZW5lcnMnO1xuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKFxuICAgICAgdGhpcy5yZWZlcmVuY2UsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICB0aGlzLnN0YXRlLFxuICAgICAgdGhpcy5zY2hlZHVsZVVwZGF0ZVxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogdXRpbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFRSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnXG5jb25zdCBNQVhfVUlEID0gMTAwMDAwMFxuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwXG5cbi8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcbmZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuICByZXR1cm4ge1xuICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICBkZWxlZ2F0ZVR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgIGhhbmRsZShldmVudCkge1xuICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xuICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcbiAgbGV0IGNhbGxlZCA9IGZhbHNlXG5cbiAgJCh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKCkgPT4ge1xuICAgIGNhbGxlZCA9IHRydWVcbiAgfSlcblxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzKVxuICAgIH1cbiAgfSwgZHVyYXRpb24pXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3JcbiAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFB1YmxpYyBVdGlsIEFwaVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBVdGlsID0ge1xuXG4gIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcblxuICBnZXRVSUQocHJlZml4KSB7XG4gICAgZG8ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCkgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG4gICAgcmV0dXJuIHByZWZpeFxuICB9LFxuXG4gIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGxldCBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICAgIGNvbnN0IGhyZWZBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBocmVmQXR0ciAmJiBocmVmQXR0ciAhPT0gJyMnID8gaHJlZkF0dHIudHJpbSgpIDogJydcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfSxcblxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG4gICAgbGV0IHRyYW5zaXRpb25EdXJhdGlvbiA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJylcbiAgICBsZXQgdHJhbnNpdGlvbkRlbGF5ID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZGVsYXknKVxuXG4gICAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICBjb25zdCBmbG9hdFRyYW5zaXRpb25EZWxheSA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KVxuXG4gICAgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXVxuICAgIHRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheS5zcGxpdCgnLCcpWzBdXG5cbiAgICByZXR1cm4gKHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUlxuICB9LFxuXG4gIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gIH0sXG5cbiAgdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkudHJpZ2dlcihUUkFOU0lUSU9OX0VORClcbiAgfSxcblxuICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcbiAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgIHJldHVybiBCb29sZWFuKFRSQU5TSVRJT05fRU5EKVxuICB9LFxuXG4gIGlzRWxlbWVudChvYmopIHtcbiAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlXG4gIH0sXG5cbiAgdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XVxuICAgICAgICBjb25zdCB2YWx1ZSAgICAgICAgID0gY29uZmlnW3Byb3BlcnR5XVxuICAgICAgICBjb25zdCB2YWx1ZVR5cGUgICAgID0gdmFsdWUgJiYgVXRpbC5pc0VsZW1lbnQodmFsdWUpXG4gICAgICAgICAgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpXG5cbiAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGAke2NvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKX06IGAgK1xuICAgICAgICAgICAgYE9wdGlvbiBcIiR7cHJvcGVydHl9XCIgcHJvdmlkZWQgdHlwZSBcIiR7dmFsdWVUeXBlfVwiIGAgK1xuICAgICAgICAgICAgYGJ1dCBleHBlY3RlZCB0eXBlIFwiJHtleHBlY3RlZFR5cGVzfVwiLmApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZmluZFNoYWRvd1Jvb3QoZWxlbWVudCkge1xuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnN0IHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKClcbiAgICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsXG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgICByZXR1cm4gZWxlbWVudFxuICAgIH1cblxuICAgIC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG4gICAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIFV0aWwuZmluZFNoYWRvd1Jvb3QoZWxlbWVudC5wYXJlbnROb2RlKVxuICB9XG59XG5cbnNldFRyYW5zaXRpb25FbmRTdXBwb3J0KClcblxuZXhwb3J0IGRlZmF1bHQgVXRpbFxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4zLjEpOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgID0gJ2FsZXJ0J1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgICA9ICc0LjMuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICAgPSAnYnMuYWxlcnQnXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgPSAnLmRhdGEtYXBpJ1xuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICA9ICQuZm5bTkFNRV1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIERJU01JU1MgOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgQ0xPU0UgICAgICAgICAgOiBgY2xvc2Uke0VWRU5UX0tFWX1gLFxuICBDTE9TRUQgICAgICAgICA6IGBjbG9zZWQke0VWRU5UX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSSA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBBTEVSVCA6ICdhbGVydCcsXG4gIEZBREUgIDogJ2ZhZGUnLFxuICBTSE9XICA6ICdzaG93J1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgQWxlcnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIGNsb3NlKGVsZW1lbnQpIHtcbiAgICBsZXQgcm9vdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHJvb3RFbGVtZW50ID0gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudClcbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KVxuXG4gICAgaWYgKGN1c3RvbUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG4gICAgbGV0IHBhcmVudCAgICAgPSBmYWxzZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgIH1cblxuICAgIGlmICghcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoYC4ke0NsYXNzTmFtZS5BTEVSVH1gKVswXVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnRcbiAgfVxuXG4gIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgY29uc3QgY2xvc2VFdmVudCA9ICQuRXZlbnQoRXZlbnQuQ0xPU0UpXG5cbiAgICAkKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudClcbiAgICByZXR1cm4gY2xvc2VFdmVudFxuICB9XG5cbiAgX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBpZiAoISQoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KVxuXG4gICAgJChlbGVtZW50KVxuICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCAoZXZlbnQpID0+IHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gIH1cblxuICBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICQoZWxlbWVudClcbiAgICAgIC5kZXRhY2goKVxuICAgICAgLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKVxuICAgICAgLnJlbW92ZSgpXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0ICRlbGVtZW50ID0gJCh0aGlzKVxuICAgICAgbGV0IGRhdGEgICAgICAgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKVxuICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB9XG5cbiAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcylcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KS5vbihcbiAgRXZlbnQuQ0xJQ0tfREFUQV9BUEksXG4gIFNlbGVjdG9yLkRJU01JU1MsXG4gIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzKG5ldyBBbGVydCgpKVxuKVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdICAgICAgICAgICAgID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEFsZXJ0XG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBBbGVydC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgID0gJ2J1dHRvbidcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICAgPSAnNC4zLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgID0gJ2JzLmJ1dHRvbidcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICA9ICcuZGF0YS1hcGknXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIEFDVElWRSA6ICdhY3RpdmUnLFxuICBCVVRUT04gOiAnYnRuJyxcbiAgRk9DVVMgIDogJ2ZvY3VzJ1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgREFUQV9UT0dHTEVfQ0FSUk9UIDogJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLFxuICBEQVRBX1RPR0dMRSAgICAgICAgOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsXG4gIElOUFVUICAgICAgICAgICAgICA6ICdpbnB1dDpub3QoW3R5cGU9XCJoaWRkZW5cIl0pJyxcbiAgQUNUSVZFICAgICAgICAgICAgIDogJy5hY3RpdmUnLFxuICBCVVRUT04gICAgICAgICAgICAgOiAnLmJ0bidcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIENMSUNLX0RBVEFfQVBJICAgICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBGT0NVU19CTFVSX0RBVEFfQVBJIDogYGZvY3VzJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgYmx1ciR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEJ1dHRvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGxldCB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlXG4gICAgbGV0IGFkZEFyaWFQcmVzc2VkID0gdHJ1ZVxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFxuICAgICAgU2VsZWN0b3IuREFUQV9UT0dHTEVcbiAgICApWzBdXG5cbiAgICBpZiAocm9vdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKVxuXG4gICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJlxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRSlcblxuICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8XG4gICAgICAgICAgICByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHxcbiAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fFxuICAgICAgICAgICAgcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgICAgICQoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dC5mb2N1cygpXG4gICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLFxuICAgICAgICAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpXG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcylcbiAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnID09PSAndG9nZ2xlJykge1xuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KVxuICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgbGV0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldFxuXG4gICAgaWYgKCEkKGJ1dHRvbikuaGFzQ2xhc3MoQ2xhc3NOYW1lLkJVVFRPTikpIHtcbiAgICAgIGJ1dHRvbiA9ICQoYnV0dG9uKS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilcbiAgICB9XG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYnV0dG9uKSwgJ3RvZ2dsZScpXG4gIH0pXG4gIC5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIChldmVudCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF1cbiAgICAkKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKVxuICB9KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBCdXR0b25cbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgICAgICAgICAgICAgICAgICAgPSAnY2Fyb3VzZWwnXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICAgICA9ICdicy5jYXJvdXNlbCdcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICA9ICcuZGF0YS1hcGknXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgICAgID0gJC5mbltOQU1FXVxuY29uc3QgQVJST1dfTEVGVF9LRVlDT0RFICAgICA9IDM3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG5jb25zdCBBUlJPV19SSUdIVF9LRVlDT0RFICAgID0gMzkgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG5jb25zdCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwIC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuY29uc3QgU1dJUEVfVEhSRVNIT0xEICAgICAgICA9IDQwXG5cbmNvbnN0IERlZmF1bHQgPSB7XG4gIGludGVydmFsIDogNTAwMCxcbiAga2V5Ym9hcmQgOiB0cnVlLFxuICBzbGlkZSAgICA6IGZhbHNlLFxuICBwYXVzZSAgICA6ICdob3ZlcicsXG4gIHdyYXAgICAgIDogdHJ1ZSxcbiAgdG91Y2ggICAgOiB0cnVlXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBpbnRlcnZhbCA6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAga2V5Ym9hcmQgOiAnYm9vbGVhbicsXG4gIHNsaWRlICAgIDogJyhib29sZWFufHN0cmluZyknLFxuICBwYXVzZSAgICA6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgd3JhcCAgICAgOiAnYm9vbGVhbicsXG4gIHRvdWNoICAgIDogJ2Jvb2xlYW4nXG59XG5cbmNvbnN0IERpcmVjdGlvbiA9IHtcbiAgTkVYVCAgICAgOiAnbmV4dCcsXG4gIFBSRVYgICAgIDogJ3ByZXYnLFxuICBMRUZUICAgICA6ICdsZWZ0JyxcbiAgUklHSFQgICAgOiAncmlnaHQnXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBTTElERSAgICAgICAgICA6IGBzbGlkZSR7RVZFTlRfS0VZfWAsXG4gIFNMSUQgICAgICAgICAgIDogYHNsaWQke0VWRU5UX0tFWX1gLFxuICBLRVlET1dOICAgICAgICA6IGBrZXlkb3duJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VFTlRFUiAgICAgOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFTEVBVkUgICAgIDogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gLFxuICBUT1VDSFNUQVJUICAgICA6IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVl9YCxcbiAgVE9VQ0hNT1ZFICAgICAgOiBgdG91Y2htb3ZlJHtFVkVOVF9LRVl9YCxcbiAgVE9VQ0hFTkQgICAgICAgOiBgdG91Y2hlbmQke0VWRU5UX0tFWX1gLFxuICBQT0lOVEVSRE9XTiAgICA6IGBwb2ludGVyZG93biR7RVZFTlRfS0VZfWAsXG4gIFBPSU5URVJVUCAgICAgIDogYHBvaW50ZXJ1cCR7RVZFTlRfS0VZfWAsXG4gIERSQUdfU1RBUlQgICAgIDogYGRyYWdzdGFydCR7RVZFTlRfS0VZfWAsXG4gIExPQURfREFUQV9BUEkgIDogYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSSA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBDQVJPVVNFTCAgICAgIDogJ2Nhcm91c2VsJyxcbiAgQUNUSVZFICAgICAgICA6ICdhY3RpdmUnLFxuICBTTElERSAgICAgICAgIDogJ3NsaWRlJyxcbiAgUklHSFQgICAgICAgICA6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgTEVGVCAgICAgICAgICA6ICdjYXJvdXNlbC1pdGVtLWxlZnQnLFxuICBORVhUICAgICAgICAgIDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG4gIFBSRVYgICAgICAgICAgOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgSVRFTSAgICAgICAgICA6ICdjYXJvdXNlbC1pdGVtJyxcbiAgUE9JTlRFUl9FVkVOVCA6ICdwb2ludGVyLWV2ZW50J1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgQUNUSVZFICAgICAgOiAnLmFjdGl2ZScsXG4gIEFDVElWRV9JVEVNIDogJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbScsXG4gIElURU0gICAgICAgIDogJy5jYXJvdXNlbC1pdGVtJyxcbiAgSVRFTV9JTUcgICAgOiAnLmNhcm91c2VsLWl0ZW0gaW1nJyxcbiAgTkVYVF9QUkVWICAgOiAnLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldicsXG4gIElORElDQVRPUlMgIDogJy5jYXJvdXNlbC1pbmRpY2F0b3JzJyxcbiAgREFUQV9TTElERSAgOiAnW2RhdGEtc2xpZGVdLCBbZGF0YS1zbGlkZS10b10nLFxuICBEQVRBX1JJREUgICA6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG59XG5cbmNvbnN0IFBvaW50ZXJUeXBlID0ge1xuICBUT1VDSCA6ICd0b3VjaCcsXG4gIFBFTiAgIDogJ3Blbidcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jbGFzcyBDYXJvdXNlbCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2l0ZW1zICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5faW50ZXJ2YWwgICAgICA9IG51bGxcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2lzUGF1c2VkICAgICAgPSBmYWxzZVxuICAgIHRoaXMuX2lzU2xpZGluZyAgICAgPSBmYWxzZVxuICAgIHRoaXMudG91Y2hUaW1lb3V0ICAgPSBudWxsXG4gICAgdGhpcy50b3VjaFN0YXJ0WCAgICA9IDBcbiAgICB0aGlzLnRvdWNoRGVsdGFYICAgID0gMFxuXG4gICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICAgID0gZWxlbWVudFxuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklORElDQVRPUlMpXG4gICAgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgICAgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMFxuICAgIHRoaXMuX3BvaW50ZXJFdmVudCAgICAgID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5NU1BvaW50ZXJFdmVudClcblxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgbmV4dCgpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpXG4gICAgfVxuICB9XG5cbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiZcbiAgICAgICgkKHRoaXMuX2VsZW1lbnQpLmlzKCc6dmlzaWJsZScpICYmICQodGhpcy5fZWxlbWVudCkuY3NzKCd2aXNpYmlsaXR5JykgIT09ICdoaWRkZW4nKSkge1xuICAgICAgdGhpcy5uZXh0KClcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVilcbiAgICB9XG4gIH1cblxuICBwYXVzZShldmVudCkge1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTkVYVF9QUkVWKSkge1xuICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpXG4gICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsXG4gIH1cblxuICBjeWNsZShldmVudCkge1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLFxuICAgICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICB0byhpbmRleCkge1xuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pXG5cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KVxuXG4gICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50LlNMSUQsICgpID0+IHRoaXMudG8oaW5kZXgpKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICB0aGlzLmN5Y2xlKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXhcbiAgICAgID8gRGlyZWN0aW9uLk5FWFRcbiAgICAgIDogRGlyZWN0aW9uLlBSRVZcblxuICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpXG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuXG4gICAgdGhpcy5faXRlbXMgICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5faW50ZXJ2YWwgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5faXNQYXVzZWQgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5faXNTbGlkaW5nICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCAgICAgPSBudWxsXG4gICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi5EZWZhdWx0LFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2hhbmRsZVN3aXBlKCkge1xuICAgIGNvbnN0IGFic0RlbHRheCA9IE1hdGguYWJzKHRoaXMudG91Y2hEZWx0YVgpXG5cbiAgICBpZiAoYWJzRGVsdGF4IDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWFxuXG4gICAgLy8gc3dpcGUgbGVmdFxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB0aGlzLnByZXYoKVxuICAgIH1cblxuICAgIC8vIHN3aXBlIHJpZ2h0XG4gICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgIHRoaXMubmV4dCgpXG4gICAgfVxuICB9XG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLm9uKEV2ZW50LktFWURPV04sIChldmVudCkgPT4gdGhpcy5fa2V5ZG93bihldmVudCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAub24oRXZlbnQuTU9VU0VFTlRFUiwgKGV2ZW50KSA9PiB0aGlzLnBhdXNlKGV2ZW50KSlcbiAgICAgICAgLm9uKEV2ZW50Lk1PVVNFTEVBVkUsIChldmVudCkgPT4gdGhpcy5jeWNsZShldmVudCkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b3VjaCkge1xuICAgICAgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpXG4gICAgfVxuICB9XG5cbiAgX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKCF0aGlzLl90b3VjaFN1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQgJiYgUG9pbnRlclR5cGVbZXZlbnQub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZS50b1VwcGVyQ2FzZSgpXSkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYXG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLnRvdWNoRGVsdGFYID0gMFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGVuZCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hhbmRsZVN3aXBlKClcbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcblxuICAgICAgICB0aGlzLnBhdXNlKClcbiAgICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dCgoZXZlbnQpID0+IHRoaXMuY3ljbGUoZXZlbnQpLCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgdGhpcy5fY29uZmlnLmludGVydmFsKVxuICAgICAgfVxuICAgIH1cblxuICAgICQodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLklURU1fSU1HKSkub24oRXZlbnQuRFJBR19TVEFSVCwgKGUpID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlBPSU5URVJET1dOLCAoZXZlbnQpID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuUE9JTlRFUlVQLCAoZXZlbnQpID0+IGVuZChldmVudCkpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuUE9JTlRFUl9FVkVOVClcbiAgICB9IGVsc2Uge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSFNUQVJULCAoZXZlbnQpID0+IHN0YXJ0KGV2ZW50KSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hNT1ZFLCAoZXZlbnQpID0+IG1vdmUoZXZlbnQpKVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSEVORCwgKGV2ZW50KSA9PiBlbmQoZXZlbnQpKVxuICAgIH1cbiAgfVxuXG4gIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLnByZXYoKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMubmV4dCgpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGVcbiAgICAgID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSlcbiAgICAgIDogW11cbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KVxuICB9XG5cbiAgX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICBjb25zdCBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUXG4gICAgY29uc3QgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVlxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ICAgICA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KVxuICAgIGNvbnN0IGxhc3RJdGVtSW5kZXggICA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDFcbiAgICBjb25zdCBpc0dvaW5nVG9XcmFwICAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXhcblxuICAgIGlmIChpc0dvaW5nVG9XcmFwICYmICF0aGlzLl9jb25maWcud3JhcCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRcbiAgICB9XG5cbiAgICBjb25zdCBkZWx0YSAgICAgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxXG4gICAgY29uc3QgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoXG5cbiAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMVxuICAgICAgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF1cbiAgfVxuXG4gIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KVxuICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pKVxuICAgIGNvbnN0IHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNMSURFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICB9KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpXG5cbiAgICByZXR1cm4gc2xpZGVFdmVudFxuICB9XG5cbiAgX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFtdLnNsaWNlLmNhbGwodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5BQ1RJVkUpKVxuICAgICAgJChpbmRpY2F0b3JzKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgY29uc3QgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW1xuICAgICAgICB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudClcbiAgICAgIF1cblxuICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcbiAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKVxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KVxuICAgIGNvbnN0IG5leHRFbGVtZW50ICAgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpXG4gICAgY29uc3QgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudClcbiAgICBjb25zdCBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKVxuXG4gICAgbGV0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lXG4gICAgbGV0IG9yZGVyQ2xhc3NOYW1lXG4gICAgbGV0IGV2ZW50RGlyZWN0aW9uTmFtZVxuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQpIHtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlRcbiAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFRcbiAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUXG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUXG4gICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWXG4gICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFRcbiAgICB9XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgJiYgJChuZXh0RWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSlcbiAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlXG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKClcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KVxuXG4gICAgY29uc3Qgc2xpZEV2ZW50ID0gJC5FdmVudChFdmVudC5TTElELCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICB9KVxuXG4gICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpXG5cbiAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KVxuXG4gICAgICAkKGFjdGl2ZUVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKVxuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgIGNvbnN0IG5leHRFbGVtZW50SW50ZXJ2YWwgPSBwYXJzZUludChuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApXG4gICAgICBpZiAobmV4dEVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgICB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWxcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gbmV4dEVsZW1lbnRJbnRlcnZhbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWxcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KVxuXG4gICAgICAkKGFjdGl2ZUVsZW1lbnQpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKCkgPT4ge1xuICAgICAgICAgICQobmV4dEVsZW1lbnQpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7ZGlyZWN0aW9uYWxDbGFzc05hbWV9ICR7b3JkZXJDbGFzc05hbWV9YClcbiAgICAgICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuXG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuQUNUSVZFfSAke29yZGVyQ2xhc3NOYW1lfSAke2RpcmVjdGlvbmFsQ2xhc3NOYW1lfWApXG5cbiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZVxuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KSwgMClcbiAgICAgICAgfSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2VcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgfVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgIGxldCBfY29uZmlnID0ge1xuICAgICAgICAuLi5EZWZhdWx0LFxuICAgICAgICAuLi4kKHRoaXMpLmRhdGEoKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgX2NvbmZpZyA9IHtcbiAgICAgICAgICAuLi5fY29uZmlnLFxuICAgICAgICAgIC4uLmNvbmZpZ1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRhLnRvKGNvbmZpZylcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHthY3Rpb259XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbYWN0aW9uXSgpXG4gICAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICAgIGRhdGEucGF1c2UoKVxuICAgICAgICBkYXRhLmN5Y2xlKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdXG5cbiAgICBpZiAoIXRhcmdldCB8fCAhJCh0YXJnZXQpLmhhc0NsYXNzKENsYXNzTmFtZS5DQVJPVVNFTCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIC4uLiQodGFyZ2V0KS5kYXRhKCksXG4gICAgICAuLi4kKHRoaXMpLmRhdGEoKVxuICAgIH1cbiAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGUtdG8nKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlXG4gICAgfVxuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZKS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQoZG9jdW1lbnQpXG4gIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpXG5cbiQod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCAoKSA9PiB7XG4gIGNvbnN0IGNhcm91c2VscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1JJREUpKVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgJGNhcm91c2VsID0gJChjYXJvdXNlbHNbaV0pXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSlcbiAgfVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IENhcm91c2VsXG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgICAgICAgICAgICAgICAgPSAnY29sbGFwc2UnXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5jb2xsYXBzZSdcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICA9ICcuZGF0YS1hcGknXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuXG5jb25zdCBEZWZhdWx0ID0ge1xuICB0b2dnbGUgOiB0cnVlLFxuICBwYXJlbnQgOiAnJ1xufVxuXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgdG9nZ2xlIDogJ2Jvb2xlYW4nLFxuICBwYXJlbnQgOiAnKHN0cmluZ3xlbGVtZW50KSdcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIFNIT1cgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIEhJREUgICAgICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU4gICAgICAgICA6IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSSA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBTSE9XICAgICAgIDogJ3Nob3cnLFxuICBDT0xMQVBTRSAgIDogJ2NvbGxhcHNlJyxcbiAgQ09MTEFQU0lORyA6ICdjb2xsYXBzaW5nJyxcbiAgQ09MTEFQU0VEICA6ICdjb2xsYXBzZWQnXG59XG5cbmNvbnN0IERpbWVuc2lvbiA9IHtcbiAgV0lEVEggIDogJ3dpZHRoJyxcbiAgSEVJR0hUIDogJ2hlaWdodCdcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIEFDVElWRVMgICAgIDogJy5zaG93LCAuY29sbGFwc2luZycsXG4gIERBVEFfVE9HR0xFIDogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgQ29sbGFwc2Uge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLl9jb25maWcgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSAgICA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIyR7ZWxlbWVudC5pZH1cIl0sYCArXG4gICAgICBgW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJHtlbGVtZW50LmlkfVwiXWBcbiAgICApKVxuXG4gICAgY29uc3QgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1RPR0dMRSkpXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW0gPSB0b2dnbGVMaXN0W2ldXG4gICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKVxuICAgICAgY29uc3QgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXG4gICAgICAgIC5maWx0ZXIoKGZvdW5kRWxlbSkgPT4gZm91bmRFbGVtID09PSBlbGVtZW50KVxuXG4gICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3JcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsXG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9XG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgIHRoaXMuaGlkZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpXG4gICAgfVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZXNcbiAgICBsZXQgYWN0aXZlc0RhdGFcblxuICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgIGFjdGl2ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkFDVElWRVMpKVxuICAgICAgICAuZmlsdGVyKChlbGVtKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09PSB0aGlzLl9jb25maWcucGFyZW50XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgICAgfSlcblxuICAgICAgaWYgKGFjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGFjdGl2ZXMgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgIGFjdGl2ZXNEYXRhID0gJChhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLmRhdGEoREFUQV9LRVkpXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XKVxuICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlcykge1xuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKVxuICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAkKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVksIG51bGwpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKClcblxuICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpXG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwXG5cbiAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgJCh0aGlzLl90cmlnZ2VyQXJyYXkpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG4gICAgfVxuXG4gICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKVxuICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSlcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1dOKVxuICAgIH1cblxuICAgIGNvbnN0IGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSlcbiAgICBjb25zdCBzY3JvbGxTaXplID0gYHNjcm9sbCR7Y2FwaXRhbGl6ZWREaW1lbnNpb259YFxuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXX1weGBcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fFxuICAgICAgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFKVxuICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dfXB4YFxuXG4gICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudClcblxuICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORylcbiAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBjb25zdCB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoXG4gICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXVxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKVxuXG4gICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnN0ICRlbGVtID0gJChbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSlcbiAgICAgICAgICBpZiAoISRlbGVtLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKVxuICAgICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORylcbiAgICAgICAgLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgICAgLnRyaWdnZXIoRXZlbnQuSElEREVOKVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gIH1cblxuICBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZ1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG5cbiAgICB0aGlzLl9jb25maWcgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fcGFyZW50ICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl90cmlnZ2VyQXJyYXkgICAgPSBudWxsXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbFxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cbiAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKSAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldERpbWVuc2lvbigpIHtcbiAgICBjb25zdCBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKVxuICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFRcbiAgfVxuXG4gIF9nZXRQYXJlbnQoKSB7XG4gICAgbGV0IHBhcmVudFxuXG4gICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50XG5cbiAgICAgIC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudClcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RvciA9XG4gICAgICBgW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCIke3RoaXMuX2NvbmZpZy5wYXJlbnR9XCJdYFxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAkKGNoaWxkcmVuKS5lYWNoKChpLCBlbGVtZW50KSA9PiB7XG4gICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoXG4gICAgICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSxcbiAgICAgICAgW2VsZW1lbnRdXG4gICAgICApXG4gICAgfSlcblxuICAgIHJldHVybiBwYXJlbnRcbiAgfVxuXG4gIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XG4gICAgY29uc3QgaXNPcGVuID0gJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAkKHRyaWdnZXJBcnJheSlcbiAgICAgICAgLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG4gICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsXG4gIH1cblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0ICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICBsZXQgZGF0YSAgICAgID0gJHRoaXMuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IF9jb25maWcgPSB7XG4gICAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAgIC4uLiR0aGlzLmRhdGEoKSxcbiAgICAgICAgLi4udHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge31cbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpXG4gICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBjb25zdCAkdHJpZ2dlciA9ICQodGhpcylcbiAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcylcbiAgY29uc3Qgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcblxuICAkKHNlbGVjdG9ycykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgJHRhcmdldCA9ICQodGhpcylcbiAgICBjb25zdCBkYXRhICAgID0gJHRhcmdldC5kYXRhKERBVEFfS0VZKVxuICAgIGNvbnN0IGNvbmZpZyAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKClcbiAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHRhcmdldCwgY29uZmlnKVxuICB9KVxufSlcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlXG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE0LjdcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXNldHMgdGhlIHBvcHBlcidzIHBvc2l0aW9uIHNvIHRoYXQgdGhlIGRvY3VtZW50IHNpemUgY2FuIGJlIGNhbGN1bGF0ZWQgZXhjbHVkaW5nXG4gIC8vIHRoZSBzaXplIG9mIHRoZSBwb3BwZXIgZWxlbWVudCBpdHNlbGZcbiAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuICB2YXIgcG9wcGVyU3R5bGVzID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIuc3R5bGU7IC8vIGFzc2lnbm1lbnQgdG8gaGVscCBtaW5pZmljYXRpb25cbiAgdmFyIHRvcCA9IHBvcHBlclN0eWxlcy50b3AsXG4gICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsXG4gICAgICB0cmFuc2Zvcm0gPSBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF07XG5cbiAgcG9wcGVyU3R5bGVzLnRvcCA9ICcnO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnO1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSAnJztcblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZVxuICAvLyByZXN0b3JlcyB0aGUgb3JpZ2luYWwgc3R5bGUgcHJvcGVydGllcyBhZnRlciB0aGUgb2Zmc2V0cyBoYXZlIGJlZW4gY29tcHV0ZWRcbiAgcG9wcGVyU3R5bGVzLnRvcCA9IHRvcDtcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0O1xuICBwb3BwZXJTdHlsZXNbdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0LWxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGBoZWlnaHRgLlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gWW91IGNhbiByZWFkIG1vcmUgb24gdGhpcyBhdCB0aGlzIFtpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEEgc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlci4gVGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgYWx3YXlzIGhhcyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLiBDYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNoIG90aGVyXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXNwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgaXQgcG9pbnRzIHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcy4gWW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVuY3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKVxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLlxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBga2VlcFRvZ2V0aGVyYCBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3VyIG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbiB1c2VkIGJ5IFBvcHBlci5qcy5cbiAqIFRoaXMgb2JqZWN0IGlzIHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3cuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoZSBgb3B0aW9uc2Agb2JqZWN0LCBhcyB0aGUgM3JkIGFyZ3VtZW50LiBGb3IgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnQuXG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB0byB0cnVlIGlmIHlvdSB3YW50IHBvcHBlciB0byBwb3NpdGlvbiBpdCBzZWxmIGluICdmaXhlZCcgbW9kZVxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZVxuICAgKi9cbiAgcG9zaXRpb25GaXhlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLiBUaGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXQgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMuXG4gICAqIEBwcm9wIHttb2RpZmllcnN9XG4gICAqL1xuICBtb2RpZmllcnM6IG1vZGlmaWVyc1xufTtcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25DcmVhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uVXBkYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vLyBVdGlsc1xuLy8gTWV0aG9kc1xudmFyIFBvcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlLlxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgICAgICAgPSAnZHJvcGRvd24nXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgICAgPSAnNC4zLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgICAgICAgPSAnYnMuZHJvcGRvd24nXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgICAgICA9ICQuZm5bTkFNRV1cbmNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICAgICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcbmNvbnN0IFNQQUNFX0tFWUNPREUgICAgICAgICAgICA9IDMyIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuY29uc3QgVEFCX0tFWUNPREUgICAgICAgICAgICAgID0gOSAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5jb25zdCBBUlJPV19VUF9LRVlDT0RFICAgICAgICAgPSAzOCAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXlcbmNvbnN0IEFSUk9XX0RPV05fS0VZQ09ERSAgICAgICA9IDQwIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG5jb25zdCBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzIC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuY29uc3QgUkVHRVhQX0tFWURPV04gICAgICAgICAgID0gbmV3IFJlZ0V4cChgJHtBUlJPV19VUF9LRVlDT0RFfXwke0FSUk9XX0RPV05fS0VZQ09ERX18JHtFU0NBUEVfS0VZQ09ERX1gKVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgICA6IGBoaWRlJHtFVkVOVF9LRVl9YCxcbiAgSElEREVOICAgICAgICAgICA6IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxuICBTSE9XICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0sgICAgICAgICAgICA6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlET1dOX0RBVEFfQVBJIDogYGtleWRvd24ke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBLRVlVUF9EQVRBX0FQSSAgIDogYGtleXVwJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIERJU0FCTEVEICAgICAgICA6ICdkaXNhYmxlZCcsXG4gIFNIT1cgICAgICAgICAgICA6ICdzaG93JyxcbiAgRFJPUFVQICAgICAgICAgIDogJ2Ryb3B1cCcsXG4gIERST1BSSUdIVCAgICAgICA6ICdkcm9wcmlnaHQnLFxuICBEUk9QTEVGVCAgICAgICAgOiAnZHJvcGxlZnQnLFxuICBNRU5VUklHSFQgICAgICAgOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXG4gIE1FTlVMRUZUICAgICAgICA6ICdkcm9wZG93bi1tZW51LWxlZnQnLFxuICBQT1NJVElPTl9TVEFUSUMgOiAncG9zaXRpb24tc3RhdGljJ1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgREFUQV9UT0dHTEUgICA6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gIEZPUk1fQ0hJTEQgICAgOiAnLmRyb3Bkb3duIGZvcm0nLFxuICBNRU5VICAgICAgICAgIDogJy5kcm9wZG93bi1tZW51JyxcbiAgTkFWQkFSX05BViAgICA6ICcubmF2YmFyLW5hdicsXG4gIFZJU0lCTEVfSVRFTVMgOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIFRPUCAgICAgICA6ICd0b3Atc3RhcnQnLFxuICBUT1BFTkQgICAgOiAndG9wLWVuZCcsXG4gIEJPVFRPTSAgICA6ICdib3R0b20tc3RhcnQnLFxuICBCT1RUT01FTkQgOiAnYm90dG9tLWVuZCcsXG4gIFJJR0hUICAgICA6ICdyaWdodC1zdGFydCcsXG4gIFJJR0hURU5EICA6ICdyaWdodC1lbmQnLFxuICBMRUZUICAgICAgOiAnbGVmdC1zdGFydCcsXG4gIExFRlRFTkQgICA6ICdsZWZ0LWVuZCdcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgb2Zmc2V0ICAgIDogMCxcbiAgZmxpcCAgICAgIDogdHJ1ZSxcbiAgYm91bmRhcnkgIDogJ3Njcm9sbFBhcmVudCcsXG4gIHJlZmVyZW5jZSA6ICd0b2dnbGUnLFxuICBkaXNwbGF5ICAgOiAnZHluYW1pYydcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldCAgICA6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICBmbGlwICAgICAgOiAnYm9vbGVhbicsXG4gIGJvdW5kYXJ5ICA6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlIDogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBkaXNwbGF5ICAgOiAnc3RyaW5nJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgRHJvcGRvd24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICB0aGlzLl9lbGVtZW50ICA9IGVsZW1lbnRcbiAgICB0aGlzLl9wb3BwZXIgICA9IG51bGxcbiAgICB0aGlzLl9jb25maWcgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fbWVudSAgICAgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpXG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ICAgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcbiAgICBjb25zdCBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cygpXG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfVxuICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldClcblxuICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIERpc2FibGUgdG90YWxseSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxuICAgIGlmICghdGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpXG4gICAgICB9XG5cbiAgICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudFxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudFxuICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAkKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlBPU0lUSU9OX1NUQVRJQylcbiAgICAgIH1cbiAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpXG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICQocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKVxuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkgfHwgJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfVxuICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldClcbiAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgJChwYXJlbnQpXG4gICAgICAudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAudHJpZ2dlcigkLkV2ZW50KEV2ZW50LlNIT1dOLCByZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpIHx8ICEkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9XG4gICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KVxuICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuXG4gICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAkKHBhcmVudClcbiAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSlcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX21lbnUgPSBudWxsXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKClcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIHRoaXMudG9nZ2xlKClcbiAgICB9KVxuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAuLi4kKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH1cblxuICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKFxuICAgICAgTkFNRSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGVcbiAgICApXG5cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21lbnVcbiAgfVxuXG4gIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgY29uc3QgJHBhcmVudERyb3Bkb3duID0gJCh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpXG4gICAgbGV0IHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NXG5cbiAgICAvLyBIYW5kbGUgZHJvcHVwXG4gICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BcbiAgICAgIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFRcbiAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlRcbiAgICB9IGVsc2UgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EXG4gICAgfVxuICAgIHJldHVybiBwbGFjZW1lbnRcbiAgfVxuXG4gIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDBcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0ge31cblxuICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2Zmc2V0LmZuID0gKGRhdGEpID0+IHtcbiAgICAgICAgZGF0YS5vZmZzZXRzID0ge1xuICAgICAgICAgIC4uLmRhdGEub2Zmc2V0cyxcbiAgICAgICAgICAuLi50aGlzLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgdGhpcy5fZWxlbWVudCkgfHwge31cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICBjb25zdCBwb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXG4gICAgICAgIGZsaXA6IHtcbiAgICAgICAgICBlbmFibGVkOiB0aGlzLl9jb25maWcuZmxpcFxuICAgICAgICB9LFxuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcbiAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICBwb3BwZXJDb25maWcubW9kaWZpZXJzLmFwcGx5U3R5bGUgPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvcHBlckNvbmZpZ1xuICB9XG5cbiAgLy8gU3RhdGljXG5cbiAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGxcblxuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZylcbiAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBfY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fFxuICAgICAgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSlcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSlcbiAgICAgIGNvbnN0IGNvbnRleHQgPSAkKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51XG4gICAgICBpZiAoISQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmXG4gICAgICAgICAgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmXG4gICAgICAgICAgJC5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KVxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKVxuICAgICAgfVxuXG4gICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG5cbiAgICAgICQoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgICQocGFyZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgIC50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgc3RhdGljIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpXG4gICAgICA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJlxuICAgICAgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHxcbiAgICAgICAgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCAgID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpXG4gICAgY29uc3QgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBpZiAoIWlzQWN0aXZlIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgIGNvbnN0IHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVxuICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKSlcblxuICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KVxuXG4gICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkgeyAvLyBVcFxuICAgICAgaW5kZXgtLVxuICAgIH1cblxuICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkgeyAvLyBEb3duXG4gICAgICBpbmRleCsrXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaW5kZXggPSAwXG4gICAgfVxuXG4gICAgaXRlbXNbaW5kZXhdLmZvY3VzKClcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQoZG9jdW1lbnQpXG4gIC5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcilcbiAgLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG4gIC5vbihgJHtFdmVudC5DTElDS19EQVRBX0FQSX0gJHtFdmVudC5LRVlVUF9EQVRBX0FQSX1gLCBEcm9wZG93bi5fY2xlYXJNZW51cylcbiAgLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGhpcyksICd0b2dnbGUnKVxuICB9KVxuICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICB9KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93blxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4zLjEpOiBtb2RhbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgPSAnbW9kYWwnXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgPSAnNC4zLjEnXG5jb25zdCBEQVRBX0tFWSAgICAgICAgICAgPSAnYnMubW9kYWwnXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cbmNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYmFja2Ryb3AgOiB0cnVlLFxuICBrZXlib2FyZCA6IHRydWUsXG4gIGZvY3VzICAgIDogdHJ1ZSxcbiAgc2hvdyAgICAgOiB0cnVlXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBiYWNrZHJvcCA6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAga2V5Ym9hcmQgOiAnYm9vbGVhbicsXG4gIGZvY3VzICAgIDogJ2Jvb2xlYW4nLFxuICBzaG93ICAgICA6ICdib29sZWFuJ1xufVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU4gICAgICAgICAgIDogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICBSRVNJWkUgICAgICAgICAgICA6IGByZXNpemUke0VWRU5UX0tFWX1gLFxuICBDTElDS19ESVNNSVNTICAgICA6IGBjbGljay5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgS0VZRE9XTl9ESVNNSVNTICAgOiBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VVUF9ESVNNSVNTICAgOiBgbW91c2V1cC5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgTU9VU0VET1dOX0RJU01JU1MgOiBgbW91c2Vkb3duLmRpc21pc3Mke0VWRU5UX0tFWX1gLFxuICBDTElDS19EQVRBX0FQSSAgICA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBTQ1JPTExBQkxFICAgICAgICAgOiAnbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnLFxuICBTQ1JPTExCQVJfTUVBU1VSRVIgOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICBCQUNLRFJPUCAgICAgICAgICAgOiAnbW9kYWwtYmFja2Ryb3AnLFxuICBPUEVOICAgICAgICAgICAgICAgOiAnbW9kYWwtb3BlbicsXG4gIEZBREUgICAgICAgICAgICAgICA6ICdmYWRlJyxcbiAgU0hPVyAgICAgICAgICAgICAgIDogJ3Nob3cnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBESUFMT0cgICAgICAgICA6ICcubW9kYWwtZGlhbG9nJyxcbiAgTU9EQUxfQk9EWSAgICAgOiAnLm1vZGFsLWJvZHknLFxuICBEQVRBX1RPR0dMRSAgICA6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gIERBVEFfRElTTUlTUyAgIDogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gIEZJWEVEX0NPTlRFTlQgIDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICBTVElDS1lfQ09OVEVOVCA6ICcuc3RpY2t5LXRvcCdcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE1vZGFsIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLl9kaWFsb2cgICAgICAgICAgICAgID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRJQUxPRylcbiAgICB0aGlzLl9iYWNrZHJvcCAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2lzU2hvd24gICAgICAgICAgICAgPSBmYWxzZVxuICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICAgPSBmYWxzZVxuICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyAgICAgPSBmYWxzZVxuICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoICAgICAgPSAwXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICB9XG5cbiAgc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICB9KVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKClcbiAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKVxuXG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KClcbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKFxuICAgICAgRXZlbnQuQ0xJQ0tfRElTTUlTUyxcbiAgICAgIFNlbGVjdG9yLkRBVEFfRElTTUlTUyxcbiAgICAgIChldmVudCkgPT4gdGhpcy5oaWRlKGV2ZW50KVxuICAgIClcblxuICAgICQodGhpcy5fZGlhbG9nKS5vbihFdmVudC5NT1VTRURPV05fRElTTUlTUywgKCkgPT4ge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuTU9VU0VVUF9ESVNNSVNTLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuX3Nob3dCYWNrZHJvcCgoKSA9PiB0aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSlcbiAgfVxuXG4gIGhpZGUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuXG4gICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG5cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZVxuICAgIH1cblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KClcbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpXG5cbiAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTilcblxuICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5DTElDS19ESVNNSVNTKVxuICAgICQodGhpcy5fZGlhbG9nKS5vZmYoRXZlbnQuTU9VU0VET1dOX0RJU01JU1MpXG5cblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKGV2ZW50KSA9PiB0aGlzLl9oaWRlTW9kYWwoZXZlbnQpKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlTW9kYWwoKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgW3dpbmRvdywgdGhpcy5fZWxlbWVudCwgdGhpcy5fZGlhbG9nXVxuICAgICAgLmZvckVhY2goKGh0bWxFbGVtZW50KSA9PiAkKGh0bWxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKSlcblxuICAgIC8qKlxuICAgICAqIGBkb2N1bWVudGAgaGFzIDIgZXZlbnRzIGBFdmVudC5GT0NVU0lOYCBhbmQgYEV2ZW50LkNMSUNLX0RBVEFfQVBJYFxuICAgICAqIERvIG5vdCBtb3ZlIGBkb2N1bWVudGAgaW4gYGh0bWxFbGVtZW50c2AgYXJyYXlcbiAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRXZlbnQuQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAqL1xuICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKVxuXG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuXG4gICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9lbGVtZW50ICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2RpYWxvZyAgICAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fYmFja2Ryb3AgICAgICAgICAgICA9IG51bGxcbiAgICB0aGlzLl9pc1Nob3duICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICAgPSBudWxsXG4gICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGxcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgICAgID0gbnVsbFxuICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoICAgICAgPSBudWxsXG4gIH1cblxuICBoYW5kbGVVcGRhdGUoKSB7XG4gICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcbiAgfVxuXG4gIC8vIFByaXZhdGVcblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgIC4uLkRlZmF1bHQsXG4gICAgICAuLi5jb25maWdcbiAgICB9XG4gICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcbiAgICByZXR1cm4gY29uZmlnXG4gIH1cblxuICBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKVxuXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHxcbiAgICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSlcblxuICAgIGlmICgkKHRoaXMuX2RpYWxvZykuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNDUk9MTEFCTEUpKSB7XG4gICAgICB0aGlzLl9kaWFsb2cucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5NT0RBTF9CT0RZKS5zY3JvbGxUb3AgPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMFxuICAgIH1cblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KVxuICAgIH1cblxuICAgICQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICB0aGlzLl9lbmZvcmNlRm9jdXMoKVxuICAgIH1cblxuICAgIGNvbnN0IHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0XG4gICAgfSlcblxuICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgICB9XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpXG4gICAgfVxuXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiAgPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2RpYWxvZylcblxuICAgICAgJCh0aGlzLl9kaWFsb2cpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2l0aW9uQ29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIF9lbmZvcmNlRm9jdXMoKSB7XG4gICAgJChkb2N1bWVudClcbiAgICAgIC5vZmYoRXZlbnQuRk9DVVNJTikgLy8gR3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oRXZlbnQuRk9DVVNJTiwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiZcbiAgICAgICAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV05fRElTTUlTUywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5LRVlET1dOX0RJU01JU1MpXG4gICAgfVxuICB9XG5cbiAgX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAkKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCAoZXZlbnQpID0+IHRoaXMuaGFuZGxlVXBkYXRlKGV2ZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpXG4gICAgfVxuICB9XG5cbiAgX2hpZGVNb2RhbCgpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJylcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZVxuICAgIHRoaXMuX3Nob3dCYWNrZHJvcCgoKSA9PiB7XG4gICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5PUEVOKVxuICAgICAgdGhpcy5fcmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGlzLl9yZXNldFNjcm9sbGJhcigpXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElEREVOKVxuICAgIH0pXG4gIH1cblxuICBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKVxuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgIGNvbnN0IGFuaW1hdGUgPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKVxuICAgICAgPyBDbGFzc05hbWUuRkFERSA6ICcnXG5cbiAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZSA9IENsYXNzTmFtZS5CQUNLRFJPUFxuXG4gICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc0xpc3QuYWRkKGFuaW1hdGUpXG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fYmFja2Ryb3ApXG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIWFuaW1hdGUpIHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKVxuXG4gICAgICAkKHRoaXMuX2JhY2tkcm9wKVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgIGNvbnN0IGNhbGxiYWNrUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLl9yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApXG4gICAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgLy8gdG9kbyAoZmF0KTogdGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IG9mIG1vZGFsLmpzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBfYWRqdXN0RGlhbG9nKCkge1xuICAgIGNvbnN0IGlzTW9kYWxPdmVyZmxvd2luZyA9XG4gICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblxuICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7dGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7dGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcnXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJ1xuICB9XG5cbiAgX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgIGNvbnN0IHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGhcbiAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKClcbiAgfVxuXG4gIF9zZXRTY3JvbGxiYXIoKSB7XG4gICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG4gICAgICBjb25zdCBmaXhlZENvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkpXG4gICAgICBjb25zdCBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKSlcblxuICAgICAgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgJChmaXhlZENvbnRlbnQpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdHVhbFBhZGRpbmcgPSBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodFxuICAgICAgICBjb25zdCBjYWxjdWxhdGVkUGFkZGluZyA9ICQoZWxlbWVudCkuY3NzKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgIC5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZylcbiAgICAgICAgICAuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYCR7cGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aH1weGApXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG4gICAgICAkKHN0aWNreUNvbnRlbnQpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdHVhbE1hcmdpbiA9IGVsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHRcbiAgICAgICAgY29uc3QgY2FsY3VsYXRlZE1hcmdpbiA9ICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKVxuICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbilcbiAgICAgICAgICAuY3NzKCdtYXJnaW4tcmlnaHQnLCBgJHtwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gdGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgKVxuICAgICAgfSlcblxuICAgICAgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuICAgICAgY29uc3QgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0XG4gICAgICBjb25zdCBjYWxjdWxhdGVkUGFkZGluZyA9ICQoZG9jdW1lbnQuYm9keSkuY3NzKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAgICQoZG9jdW1lbnQuYm9keSlcbiAgICAgICAgLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKVxuICAgICAgICAuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYCR7cGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aH1weGApXG4gICAgfVxuXG4gICAgJChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUuT1BFTilcbiAgfVxuXG4gIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgIGNvbnN0IGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5GSVhFRF9DT05URU5UKSlcbiAgICAkKGZpeGVkQ29udGVudCkuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgJChlbGVtZW50KS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0JylcbiAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJ1xuICAgIH0pXG5cbiAgICAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50XG4gICAgY29uc3QgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7U2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlR9YCkpXG4gICAgJChlbGVtZW50cykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IG1hcmdpbiA9ICQoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JylcbiAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuICAgIGNvbnN0IHBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnXG4gIH1cblxuICBfZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7IC8vIHRoeCBkLndhbHNoXG4gICAgY29uc3Qgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLlNDUk9MTEJBUl9NRUFTVVJFUlxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHtcbiAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgLi4uJCh0aGlzKS5kYXRhKCksXG4gICAgICAgIC4uLnR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9XG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpXG4gICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldClcbiAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5zaG93KSB7XG4gICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICBsZXQgdGFyZ2V0XG4gIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpXG5cbiAgaWYgKHNlbGVjdG9yKSB7XG4gICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgfVxuXG4gIGNvbnN0IGNvbmZpZyA9ICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZKVxuICAgID8gJ3RvZ2dsZScgOiB7XG4gICAgICAuLi4kKHRhcmdldCkuZGF0YSgpLFxuICAgICAgLi4uJCh0aGlzKS5kYXRhKClcbiAgICB9XG5cbiAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICB9XG5cbiAgY29uc3QgJHRhcmdldCA9ICQodGFyZ2V0KS5vbmUoRXZlbnQuU0hPVywgKHNob3dFdmVudCkgPT4ge1xuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgKCkgPT4ge1xuICAgICAgaWYgKCQodGhpcykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgdGhpcy5mb2N1cygpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcsIHRoaXMpXG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IE1vZGFsXG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogdG9vbHMvc2FuaXRpemVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCB1cmlBdHRycyA9IFtcbiAgJ2JhY2tncm91bmQnLFxuICAnY2l0ZScsXG4gICdocmVmJyxcbiAgJ2l0ZW10eXBlJyxcbiAgJ2xvbmdkZXNjJyxcbiAgJ3Bvc3RlcicsXG4gICdzcmMnLFxuICAneGxpbms6aHJlZidcbl1cblxuY29uc3QgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pXG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0V2hpdGVsaXN0ID0ge1xuICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICBhOiBbJ3RhcmdldCcsICdocmVmJywgJ3RpdGxlJywgJ3JlbCddLFxuICBhcmVhOiBbXSxcbiAgYjogW10sXG4gIGJyOiBbXSxcbiAgY29sOiBbXSxcbiAgY29kZTogW10sXG4gIGRpdjogW10sXG4gIGVtOiBbXSxcbiAgaHI6IFtdLFxuICBoMTogW10sXG4gIGgyOiBbXSxcbiAgaDM6IFtdLFxuICBoNDogW10sXG4gIGg1OiBbXSxcbiAgaDY6IFtdLFxuICBpOiBbXSxcbiAgaW1nOiBbJ3NyYycsICdhbHQnLCAndGl0bGUnLCAnd2lkdGgnLCAnaGVpZ2h0J10sXG4gIGxpOiBbXSxcbiAgb2w6IFtdLFxuICBwOiBbXSxcbiAgcHJlOiBbXSxcbiAgczogW10sXG4gIHNtYWxsOiBbXSxcbiAgc3BhbjogW10sXG4gIHN1YjogW10sXG4gIHN1cDogW10sXG4gIHN0cm9uZzogW10sXG4gIHU6IFtdLFxuICB1bDogW11cbn1cblxuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gKlxuICogU2hvdXRvdXQgdG8gQW5ndWxhciA3IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi83LjIuNC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICovXG5jb25zdCBTQUZFX1VSTF9QQVRURVJOID0gL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteJjovPyNdKig/OlsvPyNdfCQpKS9naVxuXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IG1hdGNoZXMgc2FmZSBkYXRhIFVSTHMuIE9ubHkgbWF0Y2hlcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvIHR5cGVzLlxuICpcbiAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgNyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNy4yLjQvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrL10rPSokL2lcblxuZnVuY3Rpb24gYWxsb3dlZEF0dHJpYnV0ZShhdHRyLCBhbGxvd2VkQXR0cmlidXRlTGlzdCkge1xuICBjb25zdCBhdHRyTmFtZSA9IGF0dHIubm9kZU5hbWUudG9Mb3dlckNhc2UoKVxuXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlTGlzdC5pbmRleE9mKGF0dHJOYW1lKSAhPT0gLTEpIHtcbiAgICBpZiAodXJpQXR0cnMuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihhdHRyLm5vZGVWYWx1ZS5tYXRjaChTQUZFX1VSTF9QQVRURVJOKSB8fCBhdHRyLm5vZGVWYWx1ZS5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSlcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgY29uc3QgcmVnRXhwID0gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKChhdHRyUmVnZXgpID0+IGF0dHJSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cClcblxuICAvLyBDaGVjayBpZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWxpZGF0ZXMgdGhlIGF0dHJpYnV0ZS5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSByZWdFeHAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGF0dHJOYW1lLm1hdGNoKHJlZ0V4cFtpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgd2hpdGVMaXN0LCBzYW5pdGl6ZUZuKSB7XG4gIGlmICh1bnNhZmVIdG1sLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bnNhZmVIdG1sXG4gIH1cblxuICBpZiAoc2FuaXRpemVGbiAmJiB0eXBlb2Ygc2FuaXRpemVGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzYW5pdGl6ZUZuKHVuc2FmZUh0bWwpXG4gIH1cblxuICBjb25zdCBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpXG4gIGNvbnN0IGNyZWF0ZWREb2N1bWVudCA9IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcodW5zYWZlSHRtbCwgJ3RleHQvaHRtbCcpXG4gIGNvbnN0IHdoaXRlbGlzdEtleXMgPSBPYmplY3Qua2V5cyh3aGl0ZUxpc3QpXG4gIGNvbnN0IGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChjcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgZWwgPSBlbGVtZW50c1tpXVxuICAgIGNvbnN0IGVsTmFtZSA9IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIGlmICh3aGl0ZWxpc3RLZXlzLmluZGV4T2YoZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKVxuXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZUxpc3QgPSBbXS5zbGljZS5jYWxsKGVsLmF0dHJpYnV0ZXMpXG4gICAgY29uc3Qgd2hpdGVsaXN0ZWRBdHRyaWJ1dGVzID0gW10uY29uY2F0KHdoaXRlTGlzdFsnKiddIHx8IFtdLCB3aGl0ZUxpc3RbZWxOYW1lXSB8fCBbXSlcblxuICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaCgoYXR0cikgPT4ge1xuICAgICAgaWYgKCFhbGxvd2VkQXR0cmlidXRlKGF0dHIsIHdoaXRlbGlzdGVkQXR0cmlidXRlcykpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIubm9kZU5hbWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVkRG9jdW1lbnQuYm9keS5pbm5lckhUTUxcbn1cbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0IHtcbiAgRGVmYXVsdFdoaXRlbGlzdCxcbiAgc2FuaXRpemVIdG1sXG59IGZyb20gJy4vdG9vbHMvc2FuaXRpemVyJ1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFBvcHBlciBmcm9tICdwb3BwZXIuanMnXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgICAgICAgICAgICAgICAgICA9ICd0b29sdGlwJ1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICAgID0gJ2JzLnRvb2x0aXAnXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICAgID0gJC5mbltOQU1FXVxuY29uc3QgQ0xBU1NfUFJFRklYICAgICAgICAgID0gJ2JzLXRvb2x0aXAnXG5jb25zdCBCU0NMU19QUkVGSVhfUkVHRVggICAgPSBuZXcgUmVnRXhwKGAoXnxcXFxccykke0NMQVNTX1BSRUZJWH1cXFxcUytgLCAnZycpXG5jb25zdCBESVNBTExPV0VEX0FUVFJJQlVURVMgPSBbJ3Nhbml0aXplJywgJ3doaXRlTGlzdCcsICdzYW5pdGl6ZUZuJ11cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGFuaW1hdGlvbiAgICAgICAgIDogJ2Jvb2xlYW4nLFxuICB0ZW1wbGF0ZSAgICAgICAgICA6ICdzdHJpbmcnLFxuICB0aXRsZSAgICAgICAgICAgICA6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgdHJpZ2dlciAgICAgICAgICAgOiAnc3RyaW5nJyxcbiAgZGVsYXkgICAgICAgICAgICAgOiAnKG51bWJlcnxvYmplY3QpJyxcbiAgaHRtbCAgICAgICAgICAgICAgOiAnYm9vbGVhbicsXG4gIHNlbGVjdG9yICAgICAgICAgIDogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICBwbGFjZW1lbnQgICAgICAgICA6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIG9mZnNldCAgICAgICAgICAgIDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIGNvbnRhaW5lciAgICAgICAgIDogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gIGZhbGxiYWNrUGxhY2VtZW50IDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgYm91bmRhcnkgICAgICAgICAgOiAnKHN0cmluZ3xlbGVtZW50KScsXG4gIHNhbml0aXplICAgICAgICAgIDogJ2Jvb2xlYW4nLFxuICBzYW5pdGl6ZUZuICAgICAgICA6ICcobnVsbHxmdW5jdGlvbiknLFxuICB3aGl0ZUxpc3QgICAgICAgICA6ICdvYmplY3QnXG59XG5cbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIEFVVE8gICA6ICdhdXRvJyxcbiAgVE9QICAgIDogJ3RvcCcsXG4gIFJJR0hUICA6ICdyaWdodCcsXG4gIEJPVFRPTSA6ICdib3R0b20nLFxuICBMRUZUICAgOiAnbGVmdCdcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYW5pbWF0aW9uICAgICAgICAgOiB0cnVlLFxuICB0ZW1wbGF0ZSAgICAgICAgICA6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgdHJpZ2dlciAgICAgICAgICAgOiAnaG92ZXIgZm9jdXMnLFxuICB0aXRsZSAgICAgICAgICAgICA6ICcnLFxuICBkZWxheSAgICAgICAgICAgICA6IDAsXG4gIGh0bWwgICAgICAgICAgICAgIDogZmFsc2UsXG4gIHNlbGVjdG9yICAgICAgICAgIDogZmFsc2UsXG4gIHBsYWNlbWVudCAgICAgICAgIDogJ3RvcCcsXG4gIG9mZnNldCAgICAgICAgICAgIDogMCxcbiAgY29udGFpbmVyICAgICAgICAgOiBmYWxzZSxcbiAgZmFsbGJhY2tQbGFjZW1lbnQgOiAnZmxpcCcsXG4gIGJvdW5kYXJ5ICAgICAgICAgIDogJ3Njcm9sbFBhcmVudCcsXG4gIHNhbml0aXplICAgICAgICAgIDogdHJ1ZSxcbiAgc2FuaXRpemVGbiAgICAgICAgOiBudWxsLFxuICB3aGl0ZUxpc3QgICAgICAgICA6IERlZmF1bHRXaGl0ZWxpc3Rcbn1cblxuY29uc3QgSG92ZXJTdGF0ZSA9IHtcbiAgU0hPVyA6ICdzaG93JyxcbiAgT1VUICA6ICdvdXQnXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBISURFICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICBISURERU4gICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gIFNIT1dOICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICBJTlNFUlRFRCAgIDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgQ0xJQ0sgICAgICA6IGBjbGljayR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTSU4gICAgOiBgZm9jdXNpbiR7RVZFTlRfS0VZfWAsXG4gIEZPQ1VTT1VUICAgOiBgZm9jdXNvdXQke0VWRU5UX0tFWX1gLFxuICBNT1VTRUVOVEVSIDogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxuICBNT1VTRUxFQVZFIDogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgRkFERSA6ICdmYWRlJyxcbiAgU0hPVyA6ICdzaG93J1xufVxuXG5jb25zdCBTZWxlY3RvciA9IHtcbiAgVE9PTFRJUCAgICAgICA6ICcudG9vbHRpcCcsXG4gIFRPT0xUSVBfSU5ORVIgOiAnLnRvb2x0aXAtaW5uZXInLFxuICBBUlJPVyAgICAgICAgIDogJy5hcnJvdydcbn1cblxuY29uc3QgVHJpZ2dlciA9IHtcbiAgSE9WRVIgIDogJ2hvdmVyJyxcbiAgRk9DVVMgIDogJ2ZvY3VzJyxcbiAgQ0xJQ0sgIDogJ2NsaWNrJyxcbiAgTUFOVUFMIDogJ21hbnVhbCdcbn1cblxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9vbHRpcCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgICAqL1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnLyknKVxuICAgIH1cblxuICAgIC8vIHByaXZhdGVcbiAgICB0aGlzLl9pc0VuYWJsZWQgICAgID0gdHJ1ZVxuICAgIHRoaXMuX3RpbWVvdXQgICAgICAgPSAwXG4gICAgdGhpcy5faG92ZXJTdGF0ZSAgICA9ICcnXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9XG4gICAgdGhpcy5fcG9wcGVyICAgICAgICA9IG51bGxcblxuICAgIC8vIFByb3RlY3RlZFxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLmNvbmZpZyAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMudGlwICAgICA9IG51bGxcblxuICAgIHRoaXMuX3NldExpc3RlbmVycygpXG4gIH1cblxuICAvLyBHZXR0ZXJzXG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRVxuICB9XG5cbiAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcbiAgICByZXR1cm4gREFUQV9LRVlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50XG4gIH1cblxuICBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHtcbiAgICByZXR1cm4gRVZFTlRfS0VZXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZVxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZFxuICB9XG5cbiAgdG9nZ2xlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29uc3QgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVlcbiAgICAgIGxldCBjb250ZXh0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpXG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgICB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpXG4gICAgICAgIClcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpXG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGlja1xuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpXG5cbiAgICAkLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKVxuXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSlcbiAgICAkKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJylcblxuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgJCh0aGlzLnRpcCkucmVtb3ZlKClcbiAgICB9XG5cbiAgICB0aGlzLl9pc0VuYWJsZWQgICAgID0gbnVsbFxuICAgIHRoaXMuX3RpbWVvdXQgICAgICAgPSBudWxsXG4gICAgdGhpcy5faG92ZXJTdGF0ZSAgICA9IG51bGxcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbFxuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KClcbiAgICB9XG5cbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuY29uZmlnICA9IG51bGxcbiAgICB0aGlzLnRpcCAgICAgPSBudWxsXG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICgkKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpXG4gICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgICBjb25zdCBzaGFkb3dSb290ID0gVXRpbC5maW5kU2hhZG93Um9vdCh0aGlzLmVsZW1lbnQpXG4gICAgICBjb25zdCBpc0luVGhlRG9tID0gJC5jb250YWlucyhcbiAgICAgICAgc2hhZG93Um9vdCAhPT0gbnVsbCA/IHNoYWRvd1Jvb3QgOiB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHRoaXMuZWxlbWVudFxuICAgICAgKVxuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCB0aXAgICA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgICBjb25zdCB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSlcblxuICAgICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZClcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgdGhpcy5zZXRDb250ZW50KClcblxuICAgICAgaWYgKHRoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBsYWNlbWVudCAgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpXG4gICAgICAgIDogdGhpcy5jb25maWcucGxhY2VtZW50XG5cbiAgICAgIGNvbnN0IGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudClcbiAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpXG5cbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2dldENvbnRhaW5lcigpXG4gICAgICAkKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKVxuXG4gICAgICBpZiAoISQuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHtcbiAgICAgICAgJCh0aXApLmFwcGVuZFRvKGNvbnRhaW5lcilcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRClcblxuICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcih0aGlzLmVsZW1lbnQsIHRpcCwge1xuICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgIG1vZGlmaWVyczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCksXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgYmVoYXZpb3I6IHRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgZWxlbWVudDogU2VsZWN0b3IuQVJST1dcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNyZWF0ZTogKGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZGF0YS5vcmlnaW5hbFBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25VcGRhdGU6IChkYXRhKSA9PiB0aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSlcbiAgICAgIH0pXG5cbiAgICAgICQodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgdGhpcy5fZml4VHJhbnNpdGlvbigpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldkhvdmVyU3RhdGUgPSB0aGlzLl9ob3ZlclN0YXRlXG4gICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgICAgID0gbnVsbFxuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pXG5cbiAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMudGlwKVxuXG4gICAgICAgICQodGhpcy50aXApXG4gICAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhpZGUoY2FsbGJhY2spIHtcbiAgICBjb25zdCB0aXAgICAgICAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgIGNvbnN0IGhpZGVFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKVxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2hvdmVyU3RhdGUgIT09IEhvdmVyU3RhdGUuU0hPVyAmJiB0aXAucGFyZW50Tm9kZSkge1xuICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKVxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTilcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgfVxuICAgIH1cblxuICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudClcblxuICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICQodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkZPQ1VTXSA9IGZhbHNlXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlXG5cbiAgICBpZiAoJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcClcblxuICAgICAgJCh0aXApXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKClcbiAgICB9XG5cbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gJydcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFByb3RlY3RlZFxuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKVxuICB9XG5cbiAgYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhgJHtDTEFTU19QUkVGSVh9LSR7YXR0YWNobWVudH1gKVxuICB9XG5cbiAgZ2V0VGlwRWxlbWVudCgpIHtcbiAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdXG4gICAgcmV0dXJuIHRoaXMudGlwXG4gIH1cblxuICBzZXRDb250ZW50KCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkKHRpcC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlRPT0xUSVBfSU5ORVIpKSwgdGhpcy5nZXRUaXRsZSgpKVxuICAgICQodGlwKS5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuRkFERX0gJHtDbGFzc05hbWUuU0hPV31gKVxuICB9XG5cbiAgc2V0RWxlbWVudENvbnRlbnQoJGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICBpZiAodGhpcy5jb25maWcuaHRtbCkge1xuICAgICAgICBpZiAoISQoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW1lbnQudGV4dCgkKGNvbnRlbnQpLnRleHQoKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLmh0bWwpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zYW5pdGl6ZSkge1xuICAgICAgICBjb250ZW50ID0gc2FuaXRpemVIdG1sKGNvbnRlbnQsIHRoaXMuY29uZmlnLndoaXRlTGlzdCwgdGhpcy5jb25maWcuc2FuaXRpemVGbilcbiAgICAgIH1cblxuICAgICAgJGVsZW1lbnQuaHRtbChjb250ZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAkZWxlbWVudC50ZXh0KGNvbnRlbnQpXG4gICAgfVxuICB9XG5cbiAgZ2V0VGl0bGUoKSB7XG4gICAgbGV0IHRpdGxlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpXG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KVxuICAgICAgICA6IHRoaXMuY29uZmlnLnRpdGxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2dldE9mZnNldCgpIHtcbiAgICBjb25zdCBvZmZzZXQgPSB7fVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5vZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9mZnNldC5mbiA9IChkYXRhKSA9PiB7XG4gICAgICAgIGRhdGEub2Zmc2V0cyA9IHtcbiAgICAgICAgICAuLi5kYXRhLm9mZnNldHMsXG4gICAgICAgICAgLi4udGhpcy5jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgdGhpcy5lbGVtZW50KSB8fCB7fVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0Lm9mZnNldCA9IHRoaXMuY29uZmlnLm9mZnNldFxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIF9nZXRDb250YWluZXIoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5XG4gICAgfVxuXG4gICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuY29uZmlnLmNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiAkKHRoaXMuY29uZmlnLmNvbnRhaW5lcilcbiAgICB9XG5cbiAgICByZXR1cm4gJChkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpXG4gIH1cblxuICBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gQXR0YWNobWVudE1hcFtwbGFjZW1lbnQudG9VcHBlckNhc2UoKV1cbiAgfVxuXG4gIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLmNvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJylcblxuICAgIHRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbihcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLFxuICAgICAgICAgIHRoaXMuY29uZmlnLnNlbGVjdG9yLFxuICAgICAgICAgIChldmVudCkgPT4gdGhpcy50b2dnbGUoZXZlbnQpXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVHJpZ2dlci5NQU5VQUwpIHtcbiAgICAgICAgY29uc3QgZXZlbnRJbiA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVJcbiAgICAgICAgICA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUlxuICAgICAgICAgIDogdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOXG4gICAgICAgIGNvbnN0IGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUlxuICAgICAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFXG4gICAgICAgICAgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUXG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgLm9uKFxuICAgICAgICAgICAgZXZlbnRJbixcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlbGVjdG9yLFxuICAgICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLl9lbnRlcihldmVudClcbiAgICAgICAgICApXG4gICAgICAgICAgLm9uKFxuICAgICAgICAgICAgZXZlbnRPdXQsXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZWxlY3RvcixcbiAgICAgICAgICAgIChldmVudCkgPT4gdGhpcy5fbGVhdmUoZXZlbnQpXG4gICAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAkKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub24oXG4gICAgICAnaGlkZS5icy5tb2RhbCcsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuXG4gICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZml4VGl0bGUoKVxuICAgIH1cbiAgfVxuXG4gIF9maXhUaXRsZSgpIHtcbiAgICBjb25zdCB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpXG5cbiAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCB0aXRsZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAnZGF0YS1vcmlnaW5hbC10aXRsZScsXG4gICAgICAgIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJydcbiAgICAgIClcblxuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJylcbiAgICB9XG4gIH1cblxuICBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb25zdCBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWVxuICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoXG4gICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKClcbiAgICAgIClcbiAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcbiAgICAgICAgZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJcbiAgICAgIF0gPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKCQoY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1dcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KVxuXG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPV1xuXG4gICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgY29udGV4dC5zaG93KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgY29udGV4dC5zaG93KClcbiAgICAgIH1cbiAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KVxuICB9XG5cbiAgX2xlYXZlKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgY29uc3QgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVlcbiAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSlcblxuICAgIGlmICghY29udGV4dCkge1xuICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpXG4gICAgICApXG4gICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dClcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbXG4gICAgICAgIGV2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUlxuICAgICAgXSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpXG5cbiAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVRcblxuICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgIGNvbnRleHQuaGlkZSgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKClcbiAgICAgIH1cbiAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKVxuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbnN0IGRhdGFBdHRyaWJ1dGVzID0gJCh0aGlzLmVsZW1lbnQpLmRhdGEoKVxuXG4gICAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpXG4gICAgICAuZm9yRWFjaCgoZGF0YUF0dHIpID0+IHtcbiAgICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5pbmRleE9mKGRhdGFBdHRyKSAhPT0gLTEpIHtcbiAgICAgICAgICBkZWxldGUgZGF0YUF0dHJpYnV0ZXNbZGF0YUF0dHJdXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICBjb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAuLi5kYXRhQXR0cmlidXRlcyxcbiAgICAgIC4uLnR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcbiAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhcbiAgICAgIE5BTUUsXG4gICAgICBjb25maWcsXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlXG4gICAgKVxuXG4gICAgaWYgKGNvbmZpZy5zYW5pdGl6ZSkge1xuICAgICAgY29uZmlnLnRlbXBsYXRlID0gc2FuaXRpemVIdG1sKGNvbmZpZy50ZW1wbGF0ZSwgY29uZmlnLndoaXRlTGlzdCwgY29uZmlnLnNhbml0aXplRm4pXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHt9XG5cbiAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5jb25maWdba2V5XVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgY29uc3QgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpXG4gICAgY29uc3QgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGgpIHtcbiAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpXG4gICAgfVxuICB9XG5cbiAgX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShwb3BwZXJEYXRhKSB7XG4gICAgY29uc3QgcG9wcGVySW5zdGFuY2UgPSBwb3BwZXJEYXRhLmluc3RhbmNlXG4gICAgdGhpcy50aXAgPSBwb3BwZXJJbnN0YW5jZS5wb3BwZXJcbiAgICB0aGlzLl9jbGVhblRpcENsYXNzKClcbiAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSlcbiAgfVxuXG4gIF9maXhUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgY29uc3QgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvblxuXG4gICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgICQodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSlcbiAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZVxuICAgIHRoaXMuaGlkZSgpXG4gICAgdGhpcy5zaG93KClcbiAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uXG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZ1xuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpXG4gICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJC5mbltOQU1FXSA9IFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXBcbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXBcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi90b29sdGlwJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgID0gJ3BvcG92ZXInXG5jb25zdCBWRVJTSU9OICAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5wb3BvdmVyJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuY29uc3QgQ0xBU1NfUFJFRklYICAgICAgICA9ICdicy1wb3BvdmVyJ1xuY29uc3QgQlNDTFNfUFJFRklYX1JFR0VYICA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7Q0xBU1NfUFJFRklYfVxcXFxTK2AsICdnJylcblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICBwbGFjZW1lbnQgOiAncmlnaHQnLFxuICB0cmlnZ2VyICAgOiAnY2xpY2snLFxuICBjb250ZW50ICAgOiAnJyxcbiAgdGVtcGxhdGUgIDogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pidcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIC4uLlRvb2x0aXAuRGVmYXVsdFR5cGUsXG4gIGNvbnRlbnQgOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBGQURFIDogJ2ZhZGUnLFxuICBTSE9XIDogJ3Nob3cnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBUSVRMRSAgIDogJy5wb3BvdmVyLWhlYWRlcicsXG4gIENPTlRFTlQgOiAnLnBvcG92ZXItYm9keSdcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIEhJREUgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgU0hPVyAgICAgICA6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV04gICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIElOU0VSVEVEICAgOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWX1gLFxuICBDTElDSyAgICAgIDogYGNsaWNrJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNJTiAgICA6IGBmb2N1c2luJHtFVkVOVF9LRVl9YCxcbiAgRk9DVVNPVVQgICA6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFRU5URVIgOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWAsXG4gIE1PVVNFTEVBVkUgOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWBcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBUb29sdGlwIHtcbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgREFUQV9LRVkoKSB7XG4gICAgcmV0dXJuIERBVEFfS0VZXG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudFxuICB9XG5cbiAgc3RhdGljIGdldCBFVkVOVF9LRVkoKSB7XG4gICAgcmV0dXJuIEVWRU5UX0tFWVxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgfVxuXG4gIC8vIE92ZXJyaWRlc1xuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KClcbiAgfVxuXG4gIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoYCR7Q0xBU1NfUFJFRklYfS0ke2F0dGFjaG1lbnR9YClcbiAgfVxuXG4gIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXVxuICAgIHJldHVybiB0aGlzLnRpcFxuICB9XG5cbiAgc2V0Q29udGVudCgpIHtcbiAgICBjb25zdCAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSlcblxuICAgIC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSlcbiAgICBsZXQgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKVxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpXG4gICAgfVxuICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLkNPTlRFTlQpLCBjb250ZW50KVxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuRkFERX0gJHtDbGFzc05hbWUuU0hPV31gKVxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fFxuICAgICAgdGhpcy5jb25maWcuY29udGVudFxuICB9XG5cbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgY29uc3QgJHRpcCA9ICQodGhpcy5nZXRUaXBFbGVtZW50KCkpXG4gICAgY29uc3QgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZylcbiAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlXG4kLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlclxuIiwiLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4zLjEpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgID0gJ3Njcm9sbHNweSdcbmNvbnN0IFZFUlNJT04gICAgICAgICAgICA9ICc0LjMuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy5zY3JvbGxzcHknXG5jb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuY29uc3QgREFUQV9BUElfS0VZICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgb2Zmc2V0IDogMTAsXG4gIG1ldGhvZCA6ICdhdXRvJyxcbiAgdGFyZ2V0IDogJydcbn1cblxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIG9mZnNldCA6ICdudW1iZXInLFxuICBtZXRob2QgOiAnc3RyaW5nJyxcbiAgdGFyZ2V0IDogJyhzdHJpbmd8ZWxlbWVudCknXG59XG5cbmNvbnN0IEV2ZW50ID0ge1xuICBBQ1RJVkFURSAgICAgIDogYGFjdGl2YXRlJHtFVkVOVF9LRVl9YCxcbiAgU0NST0xMICAgICAgICA6IGBzY3JvbGwke0VWRU5UX0tFWX1gLFxuICBMT0FEX0RBVEFfQVBJIDogYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG59XG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgRFJPUERPV05fSVRFTSA6ICdkcm9wZG93bi1pdGVtJyxcbiAgRFJPUERPV05fTUVOVSA6ICdkcm9wZG93bi1tZW51JyxcbiAgQUNUSVZFICAgICAgICA6ICdhY3RpdmUnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBEQVRBX1NQWSAgICAgICAgOiAnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxcbiAgQUNUSVZFICAgICAgICAgIDogJy5hY3RpdmUnLFxuICBOQVZfTElTVF9HUk9VUCAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICBOQVZfTElOS1MgICAgICAgOiAnLm5hdi1saW5rJyxcbiAgTkFWX0lURU1TICAgICAgIDogJy5uYXYtaXRlbScsXG4gIExJU1RfSVRFTVMgICAgICA6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgRFJPUERPV04gICAgICAgIDogJy5kcm9wZG93bicsXG4gIERST1BET1dOX0lURU1TICA6ICcuZHJvcGRvd24taXRlbScsXG4gIERST1BET1dOX1RPR0dMRSA6ICcuZHJvcGRvd24tdG9nZ2xlJ1xufVxuXG5jb25zdCBPZmZzZXRNZXRob2QgPSB7XG4gIE9GRlNFVCAgIDogJ29mZnNldCcsXG4gIFBPU0lUSU9OIDogJ3Bvc2l0aW9uJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgU2Nyb2xsU3B5IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgdGhpcy5fZWxlbWVudCAgICAgICA9IGVsZW1lbnRcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gZWxlbWVudC50YWdOYW1lID09PSAnQk9EWScgPyB3aW5kb3cgOiBlbGVtZW50XG4gICAgdGhpcy5fY29uZmlnICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgdGhpcy5fc2VsZWN0b3IgICAgICA9IGAke3RoaXMuX2NvbmZpZy50YXJnZXR9ICR7U2VsZWN0b3IuTkFWX0xJTktTfSxgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5MSVNUX0lURU1TfSxgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5EUk9QRE9XTl9JVEVNU31gXG4gICAgdGhpcy5fb2Zmc2V0cyAgICAgICA9IFtdXG4gICAgdGhpcy5fdGFyZ2V0cyAgICAgICA9IFtdXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgID0gMFxuXG4gICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIChldmVudCkgPT4gdGhpcy5fcHJvY2VzcyhldmVudCkpXG5cbiAgICB0aGlzLnJlZnJlc2goKVxuICAgIHRoaXMuX3Byb2Nlc3MoKVxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0XG4gIH1cblxuICAvLyBQdWJsaWNcblxuICByZWZyZXNoKCkge1xuICAgIGNvbnN0IGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvd1xuICAgICAgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OXG5cbiAgICBjb25zdCBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bydcbiAgICAgID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2RcblxuICAgIGNvbnN0IG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTlxuICAgICAgPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDBcblxuICAgIHRoaXMuX29mZnNldHMgPSBbXVxuICAgIHRoaXMuX3RhcmdldHMgPSBbXVxuXG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIGNvbnN0IHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKVxuXG4gICAgdGFyZ2V0c1xuICAgICAgLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBsZXQgdGFyZ2V0XG4gICAgICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpXG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3RvcilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgJCh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLFxuICAgICAgICAgICAgICB0YXJnZXRTZWxlY3RvclxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0pXG4gICAgICAuc29ydCgoYSwgYikgPT4gYVswXSAtIGJbMF0pXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSlcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pXG4gICAgICB9KVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKVxuXG4gICAgdGhpcy5fZWxlbWVudCAgICAgICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMuX2NvbmZpZyAgICAgICAgPSBudWxsXG4gICAgdGhpcy5fc2VsZWN0b3IgICAgICA9IG51bGxcbiAgICB0aGlzLl9vZmZzZXRzICAgICAgID0gbnVsbFxuICAgIHRoaXMuX3RhcmdldHMgICAgICAgPSBudWxsXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgID0gbnVsbFxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLnR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgbGV0IGlkID0gJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSlcbiAgICAgICAgJChjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKVxuICAgICAgfVxuICAgICAgY29uZmlnLnRhcmdldCA9IGAjJHtpZH1gXG4gICAgfVxuXG4gICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSlcblxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvd1xuICAgICAgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3BcbiAgfVxuXG4gIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KFxuICAgICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gICAgKVxuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93XG4gICAgICA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gIH1cblxuICBfcHJvY2VzcygpIHtcbiAgICBjb25zdCBzY3JvbGxUb3AgICAgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXRcbiAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKVxuICAgIGNvbnN0IG1heFNjcm9sbCAgICA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgK1xuICAgICAgc2Nyb2xsSGVpZ2h0IC1cbiAgICAgIHRoaXMuX2dldE9mZnNldEhlaWdodCgpXG5cbiAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgIHRoaXMucmVmcmVzaCgpXG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXVxuXG4gICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICB0aGlzLl9jbGVhcigpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBvZmZzZXRMZW5ndGggPSB0aGlzLl9vZmZzZXRzLmxlbmd0aFxuICAgIGZvciAobGV0IGkgPSBvZmZzZXRMZW5ndGg7IGktLTspIHtcbiAgICAgIGNvbnN0IGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmXG4gICAgICAgICAgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiZcbiAgICAgICAgICAodHlwZW9mIHRoaXMuX29mZnNldHNbaSArIDFdID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgICBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSlcblxuICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FjdGl2YXRlKHRhcmdldCkge1xuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5fY2xlYXIoKVxuXG4gICAgY29uc3QgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcCgoc2VsZWN0b3IpID0+IGAke3NlbGVjdG9yfVtkYXRhLXRhcmdldD1cIiR7dGFyZ2V0fVwiXSwke3NlbGVjdG9yfVtocmVmPVwiJHt0YXJnZXR9XCJdYClcblxuICAgIGNvbnN0ICRsaW5rID0gJChbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcmllcy5qb2luKCcsJykpKSlcblxuICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcbiAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihgJHtTZWxlY3Rvci5OQVZfTElOS1N9LCAke1NlbGVjdG9yLkxJU1RfSVRFTVN9YCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3Rvci5OQVZfSVRFTVMpLmNoaWxkcmVuKFNlbGVjdG9yLk5BVl9MSU5LUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9XG5cbiAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgIH0pXG4gIH1cblxuICBfY2xlYXIoKSB7XG4gICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSlcbiAgICAgIC5maWx0ZXIoKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKVxuICAgICAgLmZvckVhY2goKG5vZGUpID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuQUNUSVZFKSlcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnXG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksICgpID0+IHtcbiAgY29uc3Qgc2Nyb2xsU3B5cyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1NQWSkpXG4gIGNvbnN0IHNjcm9sbFNweXNMZW5ndGggPSBzY3JvbGxTcHlzLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7XG4gICAgY29uc3QgJHNweSA9ICQoc2Nyb2xsU3B5c1tpXSlcbiAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICB9XG59KVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2VcbiQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcbiQuZm5bTkFNRV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2Vcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsU3B5XG4iLCIvKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjMuMSk6IHRhYi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FICAgICAgICAgICAgICAgPSAndGFiJ1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgID0gJ2JzLnRhYidcbmNvbnN0IEVWRU5UX0tFWSAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgPSAnLmRhdGEtYXBpJ1xuY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXVxuXG5jb25zdCBFdmVudCA9IHtcbiAgSElERSAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gIFNIT1cgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICBTSE9XTiAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gIENMSUNLX0RBVEFfQVBJIDogYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxufVxuXG5jb25zdCBDbGFzc05hbWUgPSB7XG4gIERST1BET1dOX01FTlUgOiAnZHJvcGRvd24tbWVudScsXG4gIEFDVElWRSAgICAgICAgOiAnYWN0aXZlJyxcbiAgRElTQUJMRUQgICAgICA6ICdkaXNhYmxlZCcsXG4gIEZBREUgICAgICAgICAgOiAnZmFkZScsXG4gIFNIT1cgICAgICAgICAgOiAnc2hvdydcbn1cblxuY29uc3QgU2VsZWN0b3IgPSB7XG4gIERST1BET1dOICAgICAgICAgICAgICA6ICcuZHJvcGRvd24nLFxuICBOQVZfTElTVF9HUk9VUCAgICAgICAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICBBQ1RJVkUgICAgICAgICAgICAgICAgOiAnLmFjdGl2ZScsXG4gIEFDVElWRV9VTCAgICAgICAgICAgICA6ICc+IGxpID4gLmFjdGl2ZScsXG4gIERBVEFfVE9HR0xFICAgICAgICAgICA6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuICBEUk9QRE9XTl9UT0dHTEUgICAgICAgOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG4gIERST1BET1dOX0FDVElWRV9DSElMRCA6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUYWIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnRcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJlxuICAgICAgICB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkgfHxcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0XG4gICAgbGV0IHByZXZpb3VzXG4gICAgY29uc3QgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApWzBdXG4gICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgY29uc3QgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkVcbiAgICAgIHByZXZpb3VzID0gJC5tYWtlQXJyYXkoJChsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKVxuICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXVxuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH0pXG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgfSlcblxuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgJChwcmV2aW91cykudHJpZ2dlcihoaWRlRXZlbnQpXG4gICAgfVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHxcbiAgICAgICAgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZhdGUoXG4gICAgICB0aGlzLl9lbGVtZW50LFxuICAgICAgbGlzdEVsZW1lbnRcbiAgICApXG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSlcblxuICAgICAgY29uc3Qgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pXG5cbiAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudClcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gIH1cblxuICAvLyBQcml2YXRlXG5cbiAgX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9IGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnIHx8IGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ09MJylcbiAgICAgID8gJChjb250YWluZXIpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX1VMKVxuICAgICAgOiAkKGNvbnRhaW5lcikuY2hpbGRyZW4oU2VsZWN0b3IuQUNUSVZFKVxuXG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF1cbiAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiAoYWN0aXZlICYmICQoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB0aGlzLl90cmFuc2l0aW9uQ29tcGxldGUoXG4gICAgICBlbGVtZW50LFxuICAgICAgYWN0aXZlLFxuICAgICAgY2FsbGJhY2tcbiAgICApXG5cbiAgICBpZiAoYWN0aXZlICYmIGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmUpXG5cbiAgICAgICQoYWN0aXZlKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAkKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgY29uc3QgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoXG4gICAgICAgIFNlbGVjdG9yLkRST1BET1dOX0FDVElWRV9DSElMRFxuICAgICAgKVswXVxuXG4gICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAkKGRyb3Bkb3duQ2hpbGQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmUuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpXG4gICAgfVxuXG4gICAgVXRpbC5yZWZsb3coZWxlbWVudClcblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuU0hPVylcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmICQoZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fTUVOVSkpIHtcbiAgICAgIGNvbnN0IGRyb3Bkb3duRWxlbWVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTilbMF1cblxuICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICBjb25zdCBkcm9wZG93blRvZ2dsZUxpc3QgPSBbXS5zbGljZS5jYWxsKGRyb3Bkb3duRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkpXG5cbiAgICAgICAgJChkcm9wZG93blRvZ2dsZUxpc3QpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyBTdGF0aWNcblxuICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKVxuICAgICAgbGV0IGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKVxuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBUYWIodGhpcylcbiAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYClcbiAgICAgICAgfVxuICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kKGRvY3VtZW50KVxuICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAnc2hvdycpXG4gIH0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQuZm5bTkFNRV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRhYlxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJcbiIsIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogdG9hc3QuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSAgICAgICAgICAgICAgID0gJ3RvYXN0J1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgID0gJzQuMy4xJ1xuY29uc3QgREFUQV9LRVkgICAgICAgICAgID0gJ2JzLnRvYXN0J1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cblxuY29uc3QgRXZlbnQgPSB7XG4gIENMSUNLX0RJU01JU1MgOiBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZfWAsXG4gIEhJREUgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gIEhJRERFTiAgICAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgU0hPVyAgICAgICAgICA6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgU0hPV04gICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWBcbn1cblxuY29uc3QgQ2xhc3NOYW1lID0ge1xuICBGQURFICAgIDogJ2ZhZGUnLFxuICBISURFICAgIDogJ2hpZGUnLFxuICBTSE9XICAgIDogJ3Nob3cnLFxuICBTSE9XSU5HIDogJ3Nob3dpbmcnXG59XG5cbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhbmltYXRpb24gOiAnYm9vbGVhbicsXG4gIGF1dG9oaWRlICA6ICdib29sZWFuJyxcbiAgZGVsYXkgICAgIDogJ251bWJlcidcbn1cblxuY29uc3QgRGVmYXVsdCA9IHtcbiAgYW5pbWF0aW9uIDogdHJ1ZSxcbiAgYXV0b2hpZGUgIDogdHJ1ZSxcbiAgZGVsYXkgICAgIDogNTAwXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBEQVRBX0RJU01JU1MgOiAnW2RhdGEtZGlzbWlzcz1cInRvYXN0XCJdJ1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9hc3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMuX2NvbmZpZyAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgfVxuXG4gIC8vIEdldHRlcnNcblxuICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgcmV0dXJuIFZFUlNJT05cbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRcbiAgfVxuXG4gIC8vIFB1YmxpY1xuXG4gIHNob3coKSB7XG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1cpXG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5GQURFKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZS5TSE9XSU5HKVxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pXG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkhJREUpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5TSE9XSU5HKVxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIGhpZGUod2l0aG91dFRpbWVvdXQpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJREUpXG5cbiAgICBpZiAod2l0aG91dFRpbWVvdXQpIHtcbiAgICAgIHRoaXMuX2Nsb3NlKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9jbG9zZSgpXG4gICAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkpXG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dClcbiAgICB0aGlzLl90aW1lb3V0ID0gbnVsbFxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZS5TSE9XKVxuICAgIH1cblxuICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpXG5cbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgICB0aGlzLl9jb25maWcgID0gbnVsbFxuICB9XG5cbiAgLy8gUHJpdmF0ZVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0ge1xuICAgICAgLi4uRGVmYXVsdCxcbiAgICAgIC4uLiQodGhpcy5fZWxlbWVudCkuZGF0YSgpLFxuICAgICAgLi4udHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge31cbiAgICB9XG5cbiAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhcbiAgICAgIE5BTUUsXG4gICAgICBjb25maWcsXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlXG4gICAgKVxuXG4gICAgcmV0dXJuIGNvbmZpZ1xuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKFxuICAgICAgRXZlbnQuQ0xJQ0tfRElTTUlTUyxcbiAgICAgIFNlbGVjdG9yLkRBVEFfRElTTUlTUyxcbiAgICAgICgpID0+IHRoaXMuaGlkZSh0cnVlKVxuICAgIClcbiAgfVxuXG4gIF9jbG9zZSgpIHtcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuSElERSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5ISURERU4pXG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZS5TSE9XKVxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgJGVsZW1lbnQgPSAkKHRoaXMpXG4gICAgICBsZXQgZGF0YSAgICAgICA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpXG4gICAgICBjb25zdCBfY29uZmlnICA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZ1xuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBUb2FzdCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4kLmZuW05BTUVdICAgICAgICAgICAgID0gVG9hc3QuX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvYXN0XG4kLmZuW05BTUVdLm5vQ29uZmxpY3QgID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvYXN0XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9hbGVydCdcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nXG5pbXBvcnQgQ2Fyb3VzZWwgZnJvbSAnLi9jYXJvdXNlbCdcbmltcG9ydCBDb2xsYXBzZSBmcm9tICcuL2NvbGxhcHNlJ1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24nXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi9tb2RhbCdcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4vcG9wb3ZlcidcbmltcG9ydCBTY3JvbGxzcHkgZnJvbSAnLi9zY3JvbGxzcHknXG5pbXBvcnQgVGFiIGZyb20gJy4vdGFiJ1xuaW1wb3J0IFRvYXN0IGZyb20gJy4vdG9hc3QnXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMy4xKTogaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbigoKSA9PiB7XG4gIGlmICh0eXBlb2YgJCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0LicpXG4gIH1cblxuICBjb25zdCB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpXG4gIGNvbnN0IG1pbk1ham9yID0gMVxuICBjb25zdCBsdE1ham9yID0gMlxuICBjb25zdCBtaW5NaW5vciA9IDlcbiAgY29uc3QgbWluUGF0Y2ggPSAxXG4gIGNvbnN0IG1heE1ham9yID0gNFxuXG4gIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJylcbiAgfVxufSkoKVxuXG5leHBvcnQge1xuICBVdGlsLFxuICBBbGVydCxcbiAgQnV0dG9uLFxuICBDYXJvdXNlbCxcbiAgQ29sbGFwc2UsXG4gIERyb3Bkb3duLFxuICBNb2RhbCxcbiAgUG9wb3ZlcixcbiAgU2Nyb2xsc3B5LFxuICBUYWIsXG4gIFRvYXN0LFxuICBUb29sdGlwXG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMjFcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjZcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bYyxkLGUsZixnLGhdLGs9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW2srK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB4KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6eChcIjIyN1wiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgsbCl7dmFyIGs9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsayl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxsKXtkYT0hMTtlYT1udWxsO2NhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBrPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB4KFwiMTk4XCIpLGs9dm9pZCAwO2ZhfHwoZmE9ITAsaGE9ayl9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp4KFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6eChcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT94KFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgbD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGwpe2ZvcihlIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShlKSYmcWEobFtlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6eChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT94KFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e30sdGE9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtudWxsPT1iP3goXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBCYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT94KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP3goXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXRhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBEYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSYmKHlhKGEsQWEpLHphP3goXCI5NVwiKTp2b2lkIDAsZmEpKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt4KFwiMzNcIil9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSwkYT1XYShcInRyYW5zaXRpb25lbmRcIiksYWI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJiPW51bGwsY2I9bnVsbCxkYj1udWxsO1xuZnVuY3Rpb24gZWIoKXtpZihkYilyZXR1cm4gZGI7dmFyIGEsYj1jYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBkYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGZiKCl7cmV0dXJuITB9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2ZiOmdiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2I7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZmIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZmIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZmJ9LGlzUGVyc2lzdGVudDpnYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtoYihjKTtyZXR1cm4gY307aGIoeSk7ZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gamIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOngoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gaGIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9aWI7YS5yZWxlYXNlPWpifXZhciBrYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPVs5LDEzLDI3LDMyXSxuYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csb2I9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYob2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBwYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIW9iLHFiPVJhJiYoIW5ifHxvYiYmODxvYiYmMTE+PW9iKSxyYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxzYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx0Yj0hMTtcbmZ1bmN0aW9uIHViKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bWIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB2YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB3Yj0hMTtmdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3RiPSEwO3JldHVybiByYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1yYiYmdGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24geWIoYSxiKXtpZih3YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhbmImJnViKGEsYik/KGE9ZWIoKSxkYj1jYj1iYj1udWxsLHdiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBxYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgemI9e2V2ZW50VHlwZXM6c2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG5iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9c2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9c2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXNiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB3Yj91YihhLGMpJiYoZT1zYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXNiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHFiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHdifHxlIT09c2IuY29tcG9zaXRpb25TdGFydD9lPT09c2IuY29tcG9zaXRpb25FbmQmJndiJiYoZj1lYigpKTooYmI9ZCxjYj1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCx3Yj1cbiEwKSksZT1rYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj12YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cGI/eGIoYSxjKTp5YihhLGMpKT8oYj1sYi5nZXRQb29sZWQoc2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEFiPW51bGwsQmI9bnVsbCxDYj1udWxsO2Z1bmN0aW9uIERiKGEpe2lmKGE9dWEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBYj94KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj10YShhLnN0YXRlTm9kZSk7QWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBFYihhKXtCYj9DYj9DYi5wdXNoKGEpOkNiPVthXTpCYj1hfWZ1bmN0aW9uIEZiKCl7aWYoQmIpe3ZhciBhPUJiLGI9Q2I7Q2I9QmI9bnVsbDtEYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspRGIoYlthXSl9fVxuZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBJYigpe312YXIgSmI9ITE7ZnVuY3Rpb24gS2IoYSxiKXtpZihKYilyZXR1cm4gYShiKTtKYj0hMDt0cnl7cmV0dXJuIEdiKGEsYil9ZmluYWxseXtpZihKYj0hMSxudWxsIT09QmJ8fG51bGwhPT1DYilJYigpLEZiKCl9fXZhciBMYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBNYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIUxiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIE5iKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBPYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFFiKGEpe3ZhciBiPVBiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBSYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9UWIoYSkpfWZ1bmN0aW9uIFNiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1QYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBUYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtUYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtcbnZhciBVYj0vXiguKilbXFxcXFxcL10vLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixWYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFdiPXo/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixYYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxZYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxaYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCwkYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxhYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGJjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxjYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixkYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxlYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsZmM9ej9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixnYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gaGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWdjJiZhW2djXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gaWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBiYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBYYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBXYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgWmI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgWWI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBkYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGFjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgJGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBjYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgZWM6cmV0dXJuIGljKGEudHlwZSk7Y2FzZSBmYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIGljKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIGpjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1pYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1pYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFViLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIga2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbWM9e30sbmM9e307XG5mdW5jdGlvbiBvYyhhKXtpZihsYy5jYWxsKG5jLGEpKXJldHVybiEwO2lmKGxjLmNhbGwobWMsYSkpcmV0dXJuITE7aWYoa2MudGVzdChhKSlyZXR1cm4gbmNbYV09ITA7bWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciByYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLFxuc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5mdW5jdGlvbiB0YyhhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChxYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHVjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB2YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiB3YyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIHhjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIHljKGEsYil7eGMoYSxiKTt2YXIgYz11YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT96YyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZ6YyhhLGIudHlwZSx1YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEFjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIHpjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgQmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gQ2MoYSxiLGMpe2E9eS5nZXRQb29sZWQoQmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtFYihjKTtRYShhKTtyZXR1cm4gYX12YXIgRGM9bnVsbCxFYz1udWxsO2Z1bmN0aW9uIEZjKGEpe0RhKGEpfVxuZnVuY3Rpb24gR2MoYSl7dmFyIGI9SmEoYSk7aWYoU2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSGMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgSWM9ITE7UmEmJihJYz1PYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBKYygpe0RjJiYoRGMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpLEVjPURjPW51bGwpfWZ1bmN0aW9uIEtjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZHYyhFYykmJihhPUNjKEVjLGEsTmIoYSkpLEtiKEZjLGEpKX1mdW5jdGlvbiBMYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oSmMoKSxEYz1iLEVjPWMsRGMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpKTpcImJsdXJcIj09PWEmJkpjKCl9ZnVuY3Rpb24gTWMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gR2MoRWMpfVxuZnVuY3Rpb24gTmMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBHYyhiKX1mdW5jdGlvbiBPYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBHYyhiKX1cbnZhciBQYz17ZXZlbnRUeXBlczpCYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkljLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9SGM6TWIoZSk/SWM/Zj1PYzooZj1NYyxnPUxjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1OYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gQ2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZ6YyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxRYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksUmM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gU2MoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1SY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFRjKCl7cmV0dXJuIFNjfVxudmFyIFVjPTAsVmM9MCxXYz0hMSxYYz0hMSxZYz1RYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9VWM7VWM9YS5zY3JlZW5YO3JldHVybiBXYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFdjPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9VmM7VmM9YS5zY3JlZW5ZO3JldHVybiBYYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFhjPSEwLDApfX0pLFpjPVljLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSwkYz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sYWQ9e2V2ZW50VHlwZXM6JGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMCxrPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPVljLGg9JGMubW91c2VMZWF2ZSxsPSRjLm1vdXNlRW50ZXIsaz1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPVpjLGg9JGMucG9pbnRlckxlYXZlLGw9JGMucG9pbnRlckVudGVyLGs9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWsrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChsLGIsYyxkKTtjLnR5cGU9aytcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2s9MDtmb3IoZz1iO2c7Zz1MYShnKSlrKys7Zz0wO2ZvcihsPWU7bDtsPUxhKGwpKWcrKztmb3IoOzA8ay1nOyliPUxhKGIpLGstLTtmb3IoOzA8Zy1rOyllPUxhKGUpLGctLTtmb3IoO2stLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2s9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtrPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBjZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gZGQoYSxiKXtpZihiZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWNkLmNhbGwoYixjW2RdKXx8IWJkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gZmQoYSl7MiE9PWVkKGEpP3goXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9ZWQoYSksMz09PWI/eChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gZmQoZSksYTtpZihnPT09ZClyZXR1cm4gZmQoZSksYjtnPWcuc2libGluZ314KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6eChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3goXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz94KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhkKGEpe2E9Z2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgaWQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLGpkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksa2Q9UWMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBsZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBtZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sbmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LG9kPVFjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1tZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1sZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/bmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2xkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2xkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkscGQ9WWMuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPVFjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjfSkscmQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9WWMuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtYYSxcImFuaW1hdGlvbkVuZFwiXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbJGEsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx1ZD17fSx2ZD17fTtmdW5jdGlvbiB3ZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3VkW2FdPWI7dmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCEwKX0pO3RkLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMSl9KTtcbnZhciB4ZD17ZXZlbnRUeXBlczp1ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1sZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9b2Q7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWtkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9WWM7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1pZDticmVhaztjYXNlICRhOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9UWM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPWpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9WmM7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LHlkPXhkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbnpkPVtdO2Z1bmN0aW9uIEFkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU5iKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPG9hLmxlbmd0aDtoKyspe3ZhciBsPW9hW2hdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXhhKGcsbCkpfURhKGcpfX12YXIgQmQ9ITA7XG5mdW5jdGlvbiBFKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gRWQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBDZChhLGIpe0hiKERkLGEsYil9XG5mdW5jdGlvbiBEZChhLGIpe2lmKEJkKXt2YXIgYz1OYihiKTtjPUhhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09ZWQoYyl8fChjPW51bGwpO2lmKHpkLmxlbmd0aCl7dmFyIGQ9emQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7S2IoQWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD56ZC5sZW5ndGgmJnpkLnB1c2goYSl9fX12YXIgRmQ9e30sR2Q9MCxIZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBJZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxIZCl8fChhW0hkXT1HZCsrLEZkW2FbSGRdXT17fSk7cmV0dXJuIEZkW2FbSGRdXX1mdW5jdGlvbiBKZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gS2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGQoYSxiKXt2YXIgYz1LZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZChjKX19ZnVuY3Rpb24gTWQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZCgpe2Zvcih2YXIgYT13aW5kb3csYj1KZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1KZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gUGQoKXt2YXIgYT1OZCgpO2lmKE9kKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntiPShiPWEub3duZXJEb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgYz1iLmdldFNlbGVjdGlvbiYmYi5nZXRTZWxlY3Rpb24oKTtpZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEEpe2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGw9MCxrPTAsbT1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB0Ozspe20hPT1ifHwwIT09ZCYmMyE9PW0ubm9kZVR5cGV8fChnPWYrZCk7bSE9PWV8fDAhPT1jJiYzIT09bS5ub2RlVHlwZXx8KGg9ZitjKTszPT09bS5ub2RlVHlwZSYmKGYrPW0ubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHQ9bS5maXJzdENoaWxkKSlicmVhaztwPW07bT10fWZvcig7Oyl7aWYobT09PWEpYnJlYWsgYjtwPT09YiYmKytsPT09ZCYmKGc9Zik7cD09PWUmJisraz09PWMmJihoPWYpO2lmKG51bGwhPT0odD1tLm5leHRTaWJsaW5nKSlicmVhazttPXA7cD1tLnBhcmVudE5vZGV9bT10fWI9LTE9PT1nfHwtMT09PWg/bnVsbDp7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cmV0dXJue2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn19XG5mdW5jdGlvbiBRZChhKXt2YXIgYj1OZCgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTWQoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk9kKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUxkKGMsZik7dmFyIGc9TGQoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBSZD1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFNkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxUZD1udWxsLFVkPW51bGwsVmQ9bnVsbCxXZD0hMTtcbmZ1bmN0aW9uIFhkKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoV2R8fG51bGw9PVRkfHxUZCE9PUpkKGMpKXJldHVybiBudWxsO2M9VGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmT2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gVmQmJmRkKFZkLGMpP251bGw6KFZkPWMsYT15LmdldFBvb2xlZChTZC5zZWxlY3QsVWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1UZCxRYShhKSxhKX1cbnZhciBZZD17ZXZlbnRUeXBlczpTZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1JZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihNYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlUZD1lLFVkPWIsVmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlZkPVVkPVRkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOldkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gV2Q9ITEsWGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBYZChjLGQpfXJldHVybiBudWxsfX07QmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt0YT1LYTt1YT1JYTt2YT1KYTtCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOnhkLEVudGVyTGVhdmVFdmVudFBsdWdpbjphZCxDaGFuZ2VFdmVudFBsdWdpbjpQYyxTZWxlY3RFdmVudFBsdWdpbjpZZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnpifSk7ZnVuY3Rpb24gWmQoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkZChhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVpkKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBhZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGJlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/eChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOngoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnVjKGMpfX1cbmZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9dWMoYi52YWx1ZSksZD11YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGVlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBmZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBnZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGhlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9nZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBpZT12b2lkIDAsamU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09ZmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7aWU9aWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9aWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24ga2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBsZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxtZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobGUpLmZvckVhY2goZnVuY3Rpb24oYSl7bWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtsZVtiXT1sZVthXX0pfSk7ZnVuY3Rpb24gbmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGxlLmhhc093blByb3BlcnR5KGEpJiZsZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBvZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1uZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBwZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcWUoYSxiKXtiJiYocGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/eChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp4KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT94KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gcmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gc2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6RWQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkVkKFwiZm9jdXNcIixhKTtFZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6T2IoZSkmJkVkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFiLmluZGV4T2YoZSkmJkUoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gdGUoKXt9dmFyIHVlPW51bGwsdmU9bnVsbDtcbmZ1bmN0aW9uIHdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiB4ZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgeWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsemU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEFlPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxCZT1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCxlKXthW0dhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZ4YyhhLGUpO3JlKGMsZCk7ZD1yZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP29lKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9qZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/a2UoYSxoKTp0YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9hZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTphZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gRGUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBFZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgRmU9W10sR2U9LTE7ZnVuY3Rpb24gRihhKXswPkdlfHwoYS5jdXJyZW50PUZlW0dlXSxGZVtHZV09bnVsbCxHZS0tKX1mdW5jdGlvbiBHKGEsYil7R2UrKztGZVtHZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBIZT17fSxIPXtjdXJyZW50OkhlfSxJPXtjdXJyZW50OiExfSxJZT1IZTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSGU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gSihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEtlKGEpe0YoSSxhKTtGKEgsYSl9ZnVuY3Rpb24gTGUoYSl7RihJLGEpO0YoSCxhKX1cbmZ1bmN0aW9uIE1lKGEsYixjKXtILmN1cnJlbnQhPT1IZT94KFwiMTY4XCIpOnZvaWQgMDtHKEgsYixhKTtHKEksYyxhKX1mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp4KFwiMTA4XCIsaWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxIZTtJZT1ILmN1cnJlbnQ7RyhILGIsYSk7RyhJLEkuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp4KFwiMTY5XCIpO2M/KGI9TmUoYSxiLEllKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRihJLGEpLEYoSCxhKSxHKEgsYixhKSk6RihJLGEpO0coSSxjLGEpfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFRlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1FlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtSZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmNvbnRleHREZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gSyhhLGIsYyxkKXtyZXR1cm4gbmV3IFVlKGEsYixjLGQpfVxuZnVuY3Rpb24gVmUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBXZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gVmUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWNjKXJldHVybiAxMTtpZihhPT09ZWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1LKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpVmUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgWGI6cmV0dXJuIFplKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgYmM6cmV0dXJuICRlKGMsZXwzLGYsYik7Y2FzZSBZYjpyZXR1cm4gJGUoYyxlfDIsZixiKTtjYXNlIFpiOnJldHVybiBhPUsoMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1aYixhLnR5cGU9WmIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBkYzpyZXR1cm4gYT1LKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWRjLGEudHlwZT1kYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgJGI6Zz0xMDticmVhayBhO2Nhc2UgYWM6Zz05O2JyZWFrIGE7Y2FzZSBjYzpnPTExO2JyZWFrIGE7Y2FzZSBlYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGZjOmc9MTY7ZD1udWxsO2JyZWFrIGF9eChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPUsoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBaZShhLGIsYyxkKXthPUsoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uICRlKGEsYixjLGQpe2E9Syg4LGEsZCxiKTtiPTA9PT0oYiYxKT9ZYjpiYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGFmKGEsYixjKXthPUsoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gYmYoYSxiLGMpe2I9Syg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBjZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTtpZigwPT09YilhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle2I8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWMmJihjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+YiYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTswPT09Yz9jZihhLGIpOmI8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGNmKGEsYikpOlxuYj5jJiZjZihhLGIpfWRmKDAsYSl9ZnVuY3Rpb24gZmYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gTChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIGpmPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24ga2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgdGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1lZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UudGFnPXJmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bGYoKTtjPW1mKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG5zZjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7b2YoKTtwZihhLGQpO3FmKGEsYyl9fTtmdW5jdGlvbiB1ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFkZChjLGQpfHwhZGQoZSxmKTohMH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD0hMSxlPUhlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU0oZik6KGU9SihiKT9JZTpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9KZShhLGUpOkhlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9dGY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gd2YoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24geGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU0oZik6KGY9SihiKT9JZTpILmN1cnJlbnQsZS5jb250ZXh0PUplKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihrZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBBZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/eChcIjMwOVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6eChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09amYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/eChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOngoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEJmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ4KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBDZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVhlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPUFmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1ZZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1BZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWJmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVplKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1hZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYz1ZZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1BZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgV2I6cmV0dXJuIGI9YmYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHpmKGIpfHxcbmhjKGIpKXJldHVybiBiPVplKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO0JmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVhiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpsKGEsYixjLGQpOm51bGw7Y2FzZSBXYjpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbH1pZih6ZihjKXx8aGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO0JmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1YYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmwoYixhLGQsZSk7Y2FzZSBXYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKX1pZih6ZihkKXx8aGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO0JmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscT1nLHU9Zz0wLEI9bnVsbDtudWxsIT09cSYmdTxoLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHc9dChlLHEsaFt1XSxrKTtpZihudWxsPT09dyl7bnVsbD09PXEmJihxPUIpO2JyZWFrfWEmJlxucSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9Qn1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHE9cChlLGhbdV0saykpZz1mKHEsZyx1KSxudWxsPT09bT9sPXE6bS5zaWJsaW5nPXEsbT1xO3JldHVybiBsfWZvcihxPWQoZSxxKTt1PGgubGVuZ3RoO3UrKylpZihCPUEocSxlLHUsaFt1XSxrKSlhJiZudWxsIT09Qi5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT1CLmtleT91OkIua2V5KSxnPWYoQixnLHUpLG51bGw9PT1tP2w9QjptLnNpYmxpbmc9QixtPUI7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBSKGUsZyxoLGspe3ZhciBsPWhjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3goXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/eChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHE9Zyx1PWc9MCxCPW51bGwsdz1oLm5leHQoKTtudWxsIT09cSYmIXcuZG9uZTt1Kyssdz1oLm5leHQoKSl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdj10KGUscSx3LnZhbHVlLGspO2lmKG51bGw9PT12KXtxfHwocT1CKTticmVha31hJiZxJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7cT1CfWlmKHcuZG9uZSlyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PXAoZSx3LnZhbHVlLGspLG51bGwhPT13JiYoZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTtyZXR1cm4gbH1mb3IocT1kKGUscSk7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PUEocSxlLHUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGEmJm51bGwhPT13LmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXcua2V5P3U6XG53LmtleSksZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1YYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBWYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PVhiOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PVhiP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1BZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PVhiPyhkPVplKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1ZZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1BZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgV2I6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1iZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoemYoZikpcmV0dXJuIHYoYSxkLGYsaCk7aWYoaGMoZikpcmV0dXJuIFIoYSxkLGYsaCk7bCYmQmYoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx4KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgRGY9Q2YoITApLEVmPUNmKCExKSxGZj17fSxOPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj94KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7RyhIZixiLGEpO0coR2YsYSxhKTtHKE4sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWhlKGIsYyl9RihOLGEpO0coTixiLGEpfWZ1bmN0aW9uIEtmKGEpe0YoTixhKTtGKEdmLGEpO0YoSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTi5jdXJyZW50KTt2YXIgYz1oZShiLGEudHlwZSk7YiE9PWMmJihHKEdmLGEsYSksRyhOLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoRihOLGEpLEYoR2YsYSkpfVxudmFyIE5mPTAsT2Y9MixQZj00LFFmPTgsUmY9MTYsU2Y9MzIsVGY9NjQsVWY9MTI4LFZmPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsV2Y9MCxYZj1udWxsLE89bnVsbCxQPW51bGwsWWY9bnVsbCxRPW51bGwsWmY9bnVsbCwkZj0wLGFnPW51bGwsYmc9MCxjZz0hMSxkZz1udWxsLGVnPTA7ZnVuY3Rpb24gZmcoKXt4KFwiMzIxXCIpfWZ1bmN0aW9uIGdnKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWJkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUsZil7V2Y9ZjtYZj1iO1A9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7VmYuY3VycmVudD1udWxsPT09UD9pZzpqZztiPWMoZCxlKTtpZihjZyl7ZG8gY2c9ITEsZWcrPTEsUD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxaZj1ZZixhZz1RPU89bnVsbCxWZi5jdXJyZW50PWpnLGI9YyhkLGUpO3doaWxlKGNnKTtkZz1udWxsO2VnPTB9VmYuY3VycmVudD1rZzthPVhmO2EubWVtb2l6ZWRTdGF0ZT1ZZjthLmV4cGlyYXRpb25UaW1lPSRmO2EudXBkYXRlUXVldWU9YWc7YS5lZmZlY3RUYWd8PWJnO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2E/eChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9ZnVuY3Rpb24gbGcoKXtWZi5jdXJyZW50PWtnO1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDtjZz0hMTtkZz1udWxsO2VnPTB9XG5mdW5jdGlvbiBtZygpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UT9ZZj1RPWE6UT1RLm5leHQ9YTtyZXR1cm4gUX1mdW5jdGlvbiBuZygpe2lmKG51bGwhPT1aZilRPVpmLFpmPVEubmV4dCxPPVAsUD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle251bGw9PT1QP3goXCIzMTBcIik6dm9pZCAwO089UDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtRPW51bGw9PT1RP1lmPWE6US5uZXh0PWE7UD1PLm5leHR9cmV0dXJuIFF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1uZygpLGM9Yi5xdWV1ZTtudWxsPT09Yz94KFwiMzExXCIpOnZvaWQgMDtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPGVnKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1kZyl7dmFyIGU9ZGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe2RnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsbD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTttPFdmPyhrfHwoaz0hMCxoPWcsZT1mKSxtPiRmJiYoJGY9bSkpOmY9bC5lYWdlclJlZHVjZXI9PT1hP2wuZWFnZXJTdGF0ZTphKGYsbC5hY3Rpb24pO2c9bDtsPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWQpO2t8fChoPWcsZT1mKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09YWc/KGFnPXtsYXN0RWZmZWN0Om51bGx9LGFnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPWFnLmxhc3RFZmZlY3QsbnVsbD09PWI/YWcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsYWcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2coYSxiLGMsZCl7dmFyIGU9bWcoKTtiZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkKXt2YXIgZT1uZygpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmdnKGQsZy5kZXBzKSl7cmcoTmYsYyxmLGQpO3JldHVybn19Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyxmLGQpfWZ1bmN0aW9uIHVnKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmcoKXt9XG5mdW5jdGlvbiB3ZyhhLGIsYyl7MjU+ZWc/dm9pZCAwOngoXCIzMDFcIik7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVhmfHxudWxsIT09ZCYmZD09PVhmKWlmKGNnPSEwLGE9e2V4cGlyYXRpb25UaW1lOldmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1kZyYmKGRnPW5ldyBNYXApLGM9ZGcuZ2V0KGIpLHZvaWQgMD09PWMpZGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7b2YoKTt2YXIgZT1sZigpO2U9bWYoZSxhKTt2YXIgZj17ZXhwaXJhdGlvblRpbWU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1cbmR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGw9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGJkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31xZihhLGUpfX1cbnZhciBrZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmZyx1c2VDb250ZXh0OmZnLHVzZUVmZmVjdDpmZyx1c2VJbXBlcmF0aXZlSGFuZGxlOmZnLHVzZUxheW91dEVmZmVjdDpmZyx1c2VNZW1vOmZnLHVzZVJlZHVjZXI6ZmcsdXNlUmVmOmZnLHVzZVN0YXRlOmZnLHVzZURlYnVnVmFsdWU6Zmd9LGlnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7bWcoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHNnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW1nKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1nKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1tZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1tZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsXG5sYXN0UmVuZGVyZWRSZWR1Y2VyOm9nLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTp2Z30samc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0Zyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxcbmIpe3JldHVybiB0Zyg0LFBmfFNmLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6cGcsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIG5nKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHBnKG9nLGEpfSx1c2VEZWJ1Z1ZhbHVlOnZnfSx4Zz1udWxsLHlnPW51bGwsemc9ITE7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUsoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gQ2coYSl7aWYoemcpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUJnKGEsYikpe2I9RGUoYyk7aWYoIWJ8fCFCZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt6Zz0hMTt4Zz1hO3JldHVybn1BZyh4ZyxjKX14Zz1hO3lnPUVlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsemc9ITEseGc9YX19ZnVuY3Rpb24gRGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9ZnVuY3Rpb24gRWcoYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCF6ZylyZXR1cm4gRGcoYSksemc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF4ZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9eWc7YjspQWcoYSxiKSxiPURlKGIpO0RnKGEpO3lnPXhnP0RlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEZnKCl7eWc9eGc9bnVsbDt6Zz0hMX1cbnZhciBHZz1UYi5SZWFjdEN1cnJlbnRPd25lcixxZz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/RWYoYixudWxsLGMsZCk6RGYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0lnKGIsZSk7ZD1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFWZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxMZyhhLGIsZyxkLGUsZik7YT1ZZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmRkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEpnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVhlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZkZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihxZz0hMSxlPGYpP0pnKGEsYixmKTpNZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIE5nKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTWcoYSxiLGMsZCxlKXt2YXIgZj1KKGMpP0llOkguY3VycmVudDtmPUplKGIsZik7SWcoYixlKTtjPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBPZyhhLGIsYyxkLGUpe2lmKEooYykpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtJZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksdmYoYixjLGQsZSkseGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKTtQZz0hMTt2YXIgdD1iLm1lbW9pemVkU3RhdGU7bD1nLnN0YXRlPXQ7dmFyIEE9Yi51cGRhdGVRdWV1ZTtudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksbD1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx0IT09bHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSxsPWIubWVtb2l6ZWRTdGF0ZSksKGg9UGd8fHVmKGIsYyxoLGQsdCxsLGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWwpLGcucHJvcHM9ZCxnLnN0YXRlPWwsZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkwoYi50eXBlLGgpLGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspLFBnPSExLGw9Yi5tZW1vaXplZFN0YXRlLHQ9Zy5zdGF0ZT1sLEE9Yi51cGRhdGVRdWV1ZSxudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksdD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxsIT09dHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSx0PWIubWVtb2l6ZWRTdGF0ZSksKG09UGd8fHVmKGIsYyxoLGQsbCx0LGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1cbnQpLGcucHJvcHM9ZCxnLnN0YXRlPXQsZy5jb250ZXh0PWssZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIFFnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQsZSxmKXtOZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUGUoYixjLCExKSxKZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtHZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1EZihiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPURmKGIsbnVsbCxoLGYpKTpTKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlBlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9NZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZNZShhLGIuY29udGV4dCwhMSk7SmYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gU2coYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7aWYobnVsbD09PWEpaWYoZyl7dmFyIGg9ZS5mYWxsYmFjazthPVplKG51bGwsZCwwLG51bGwpOzA9PT0oYi5tb2RlJjEpJiYoYS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCk7ZD1aZShoLGQsYyxudWxsKTthLnNpYmxpbmc9ZDtjPWE7Yy5yZXR1cm49ZC5yZXR1cm49Yn1lbHNlIGM9ZD1FZihiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNlIG51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxoPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1YZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09XG5iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WGUoaCxjLGguZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9RGYoYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihoPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9WmUobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1oLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9WmUoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1EZihiLGgsZS5jaGlsZHJlbixjKSksYi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGU7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gSmcoYSxiLGMpe251bGwhPT1hJiYoYi5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3goXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBUZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8SS5jdXJyZW50KXFnPSEwO2Vsc2V7aWYoZDxjKXtxZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpSZyhiKTtGZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6SihiLnR5cGUpJiZPZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOlVnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBTZyhhLGIsYyk7Yj1KZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gSmcoYSxiLGMpfX1lbHNlIHFnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPVxuYi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1KZShiLEguY3VycmVudCk7SWcoYixjKTtlPWhnKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7bGcoKTtpZihKKGQpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYma2YoYixkLGcsYSk7ZS51cGRhdGVyPXRmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7eGYoYixkLGEsYyk7Yj1RZyhudWxsLGIsZCwhMCxmLFxuYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9aGYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1XZShhKTtmPUwoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9TWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz1PZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1IZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1LZyhudWxsLGIsYSxMKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6eChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksTWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsXG5lPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE9nKGEsYixkLGUsYyk7Y2FzZSAzOlJnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD94KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpRmcoKSxiPUpnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXlnPUVlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHhnPWIsZT16Zz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPUVmKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxGZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmQ2coYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLFxuZz1lLmNoaWxkcmVuLHhlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ4ZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxOZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUyhhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBTZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1EZihiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLEhnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtVZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9YmQoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUkuY3VycmVudCl7Yj1KZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgbD1oLmNvbnRleHREZXBlbmRlbmNpZXM7aWYobnVsbCE9PWwpe2c9aC5jaGlsZDtmb3IodmFyIGs9bC5maXJzdDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQmJjAhPT1cbihrLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYoaz1uZihjKSxrLnRhZz1zZixwZihoLGspKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2s9aC5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7az1jO2Zvcih2YXIgbT1oLnJldHVybjtudWxsIT09bTspe3ZhciBwPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxrKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1rLG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8ayYmKHAuY2hpbGRFeHBpcmF0aW9uVGltZT1rKTtlbHNlIGlmKG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8aylwLmNoaWxkRXhwaXJhdGlvblRpbWU9aztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP1xubnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sSWcoYixjKSxlPU0oZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUwoZSxiLnBlbmRpbmdQcm9wcyksZj1MKGUudHlwZSxmKSxLZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gTGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6TChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEooZCk/KGE9ITAsT2UoYikpOmE9ITEsSWcoYixjKSx2ZihiLGQsZSxjKSx4ZihiLGQsZSxjKSxRZyhudWxsLGIsZCwhMCxhLGMpfXgoXCIxNTZcIil9dmFyIFZnPXtjdXJyZW50Om51bGx9LFdnPW51bGwsWGc9bnVsbCxZZz1udWxsO2Z1bmN0aW9uIFVnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0coVmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIFpnKGEpe3ZhciBiPVZnLmN1cnJlbnQ7RihWZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElnKGEsYil7V2c9YTtZZz1YZz1udWxsO3ZhciBjPWEuY29udGV4dERlcGVuZGVuY2llcztudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZT49YiYmKHFnPSEwKTthLmNvbnRleHREZXBlbmRlbmNpZXM9bnVsbH1cbmZ1bmN0aW9uIE0oYSxiKXtpZihZZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpWWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PVhnPyhudWxsPT09V2c/eChcIjMwOFwiKTp2b2lkIDAsWGc9YixXZy5jb250ZXh0RGVwZW5kZW5jaWVzPXtmaXJzdDpiLGV4cGlyYXRpb25UaW1lOjB9KTpYZz1YZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgJGc9MCxyZj0xLHNmPTIsYWg9MyxQZz0hMTtmdW5jdGlvbiBiaChhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBjaChhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOiRnLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIGRoKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1iaChjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9Y2goZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9Y2goZCkpO251bGw9PT1lfHxkPT09ZT9kaChkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KGRoKGQsYiksZGgoZSxiKSk6KGRoKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZWgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpOmZoKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9Y2goYikpO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSByZjpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgYWg6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAkZzphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2Ugc2Y6UGc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB5ZihhLGIsYyxkLGUpe1BnPSExO2I9ZmgoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxsPWIuZmlyc3RVcGRhdGUsaz1mO251bGwhPT1sOyl7dmFyIG09bC5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1sLGY9ayksaDxtJiYoaD1tKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bDooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RFZmZlY3Q9bCkpKTtsPWwubmV4dH1tPW51bGw7Zm9yKGw9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1sOyl7dmFyIHA9bC5leHBpcmF0aW9uVGltZTtwPGU/KG51bGw9PT1tJiYobT1sLG51bGw9PT1nJiYoZj1rKSksaDxwJiYoaD1wKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1sOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bCkpKTtsPWwubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWspO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9a31cbmZ1bmN0aW9uIGhoKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtpaChiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7aWgoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGloKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGpoKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6amMoYil9fWZ1bmN0aW9uIGtoKGEpe2EuZWZmZWN0VGFnfD00fXZhciBsaD12b2lkIDAsbWg9dm9pZCAwLG5oPXZvaWQgMCxvaD12b2lkIDA7bGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O21oPWZ1bmN0aW9uKCl7fTtcbm5oPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj12YyhnLGYpO2Q9dmMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPSRkKGcsZik7ZD0kZChnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWJlKGcsZik7ZD1iZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXRlKX1xZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmc2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZraChiKX19O29oPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZraChiKX07XG52YXIgcGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gcWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1qYyhjKSk7bnVsbCE9PWMmJmljKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJmljKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3NoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHRoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09TmYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1OZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIHVoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1uZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gdmgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFJlJiZSZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe3NoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6cmgoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe3NoKGEsZil9YnJlYWs7Y2FzZSA1OnJoKGEpO2JyZWFrO2Nhc2UgNDp3aChhKX19XG5mdW5jdGlvbiB4aChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIHloKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHhoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn14KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6eChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKGtlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx4aChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyZcbjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9dGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiB3aChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz94KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYodmgoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnKXtpZihudWxsIT09Yi5jaGlsZCl7ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYodmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gemgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp0aChQZixRZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZDZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9bGYoKSkpO251bGwhPT1hJiZ1aChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBwaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUFoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fXZhciBCaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGgoZCk7cWgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Rmg/Rmg9bmV3IFNldChbdGhpc10pOkZoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7cWgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpKKGEudHlwZSkmJktlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEtmKGEpLExlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT94KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBNZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gWmcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBIaD1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEloPVRiLlJlYWN0Q3VycmVudE93bmVyLEpoPTEwNzM3NDE4MjIsS2g9ITEsVD1udWxsLExoPW51bGwsVT0wLE1oPS0xLE5oPSExLFY9bnVsbCxPaD0hMSxQaD1udWxsLFFoPW51bGwsUmg9bnVsbCxGaD1udWxsO2Z1bmN0aW9uIFNoKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTticmVhaztjYXNlIDU6TWYoYik7YnJlYWs7Y2FzZSA0OktmKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYil9YT1hLnJldHVybn1MaD1udWxsO1U9MDtNaD0tMTtOaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBUaCgpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYT1WLmVmZmVjdFRhZzthJjE2JiZrZShWLnN0YXRlTm9kZSxcIlwiKTtpZihhJjEyOCl7dmFyIGI9Vi5hbHRlcm5hdGU7bnVsbCE9PWImJihiPWIucmVmLG51bGwhPT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihudWxsKTpiLmN1cnJlbnQ9bnVsbCkpfXN3aXRjaChhJjE0KXtjYXNlIDI6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OnpoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODphPVYsd2goYSksYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsLGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFVoKCl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgYT1WLmFsdGVybmF0ZSxiPVY7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKE9mLE5mLGIpO2JyZWFrIGE7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6TChiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OngoXCIxNjNcIil9fVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFZoKGEsYil7Zm9yKDtudWxsIT09Vjspe3ZhciBjPVYuZWZmZWN0VGFnO2lmKGMmMzYpe3ZhciBkPVYuYWx0ZXJuYXRlLGU9VixmPWI7c3dpdGNoKGUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKFJmLFNmLGUpO2JyZWFrO2Nhc2UgMTp2YXIgZz1lLnN0YXRlTm9kZTtpZihlLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kKWcuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoPWUuZWxlbWVudFR5cGU9PT1lLnR5cGU/ZC5tZW1vaXplZFByb3BzOkwoZS50eXBlLGQubWVtb2l6ZWRQcm9wcyk7Zy5jb21wb25lbnREaWRVcGRhdGUoaCxkLm1lbW9pemVkU3RhdGUsZy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9ZD1lLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiZoaChlLGQsZyxmKTticmVhaztjYXNlIDM6ZD1lLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kKXtnPW51bGw7aWYobnVsbCE9PWUuY2hpbGQpc3dpdGNoKGUuY2hpbGQudGFnKXtjYXNlIDU6Zz1cbmUuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPWUuY2hpbGQuc3RhdGVOb2RlfWhoKGUsZCxnLGYpfWJyZWFrO2Nhc2UgNTpmPWUuc3RhdGVOb2RlO251bGw9PT1kJiZlLmVmZmVjdFRhZyY0JiZ3ZShlLnR5cGUsZS5tZW1vaXplZFByb3BzKSYmZi5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX1jJjEyOCYmKGU9Vi5yZWYsbnVsbCE9PWUmJihmPVYuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlP2UoZik6ZS5jdXJyZW50PWYpKTtjJjUxMiYmKFBoPWEpO1Y9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFdoKGEsYil7Umg9UWg9UGg9bnVsbDt2YXIgYz1XO1c9ITA7ZG97aWYoYi5lZmZlY3RUYWcmNTEyKXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7dmFyIGY9Yjt0aChVZixOZixmKTt0aChOZixUZixmKX1jYXRjaChnKXtkPSEwLGU9Z31kJiZzaChiLGUpfWI9Yi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1iKTtXPWM7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpO1h8fFd8fFloKDEwNzM3NDE4MjMsITEpfWZ1bmN0aW9uIG9mKCl7bnVsbCE9PVFoJiZCZShRaCk7bnVsbCE9PVJoJiZSaCgpfVxuZnVuY3Rpb24gWmgoYSxiKXtPaD1LaD0hMDthLmN1cnJlbnQ9PT1iP3goXCIxNzdcIik6dm9pZCAwO3ZhciBjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3goXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZSxlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtlZihhLGU+ZD9lOmQpO0loLmN1cnJlbnQ9bnVsbDtkPXZvaWQgMDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3VlPUJkO3ZlPVBkKCk7QmQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7dmFyIGY9dm9pZCAwO3RyeXtVaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1mb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtcbmY9dm9pZCAwO3RyeXtUaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1RZCh2ZSk7dmU9bnVsbDtCZD0hIXVlO3VlPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e1ZoKGEsYyl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWlmKG51bGwhPT1kJiZudWxsIT09UGgpe3ZhciBnPVdoLmJpbmQobnVsbCxhLGQpO1FoPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gQWUoZyl9KTtSaD1nfUtoPU9oPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBRZSYmUWUoYi5zdGF0ZU5vZGUpO2M9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPVxuYj5jP2I6YzswPT09YiYmKEZoPW51bGwpOyRoKGEsYil9XG5mdW5jdGlvbiBhaShhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7VD1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpRWcoYiksYi5lZmZlY3RUYWcmPS0zO21oKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpbmgoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBsPUlmKE4uY3VycmVudCk7aWYoRWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxwPWg7ZVtGYV09ZztlW0dhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxhYi5sZW5ndGg7aysrKUUoYWJba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLGUpO0UoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixlKTtFKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MoZSxtKTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UoZSxtKSxFKFwiaW52YWxpZFwiLGUpLHNlKHAsXCJvbkNoYW5nZVwiKX1xZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmc2UocCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlJiKGUpO0FjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIoZSk7ZWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXRlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYma2goYil9ZWxzZXttPWI7cD1mO2U9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1mZS5odG1sJiYobD1nZShwKSk7bD09PWZlLmh0bWw/XCJzY3JpcHRcIj09PXA/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZS5pcz9rPWsuY3JlYXRlRWxlbWVudChwLHtpczplLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KHApLFwic2VsZWN0XCI9PT1wJiYocD1rLGUubXVsdGlwbGU/cC5tdWx0aXBsZT0hMDplLnNpemUmJihwLnNpemU9ZS5zaXplKSkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxwKTtlPWs7ZVtGYV09bTtlW0dhXT1nO2xoKGUsYiwhMSwhMSk7cD1lO2s9ZjttPWc7dmFyIHQ9aCxBPXJlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixcbnApO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWIubGVuZ3RoO2grKylFKGFiW2hdLHApO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLHApO0UoXCJsb2FkXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIscCk7RShcInN1Ym1pdFwiLHApO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixwKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MocCxtKTtoPXZjKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9JGQocCxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShwLFxubSk7aD1iZShwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXFlKGssaCk7bD12b2lkIDA7dmFyIHY9ayxSPXAsdT1oO2ZvcihsIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHE9dVtsXTtcInN0eWxlXCI9PT1sP29lKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZqZShSLHEpKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09dnx8XCJcIiE9PXEpJiZrZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYma2UoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihyYS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1xJiZzZSh0LGwpOm51bGwhPXEmJnRjKFIsbCxxLEEpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6UmIocCk7XG5BYyhwLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKHApO2VlKHAsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnAuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3VjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1wO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3A9bS52YWx1ZTtudWxsIT1wP2FlKGgsISFtLm11bHRpcGxlLHAsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZhZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocC5vbmNsaWNrPXRlKX0oZz13ZShmLGcpKSYma2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/b2goZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTi5jdXJyZW50KSxFZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltGYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZraChiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tGYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7VD1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6S2YoYik7bWgoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAxODpicmVhaztkZWZhdWx0OngoXCIxNTZcIil9VD1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVQpcmV0dXJuIFQ7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmXG4oYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdoKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJpKGEpe3ZhciBiPVRnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1haShhKSk7SWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gY2koYSxiKXtLaD94KFwiMjQzXCIpOnZvaWQgMDtvZigpO0toPSEwO3ZhciBjPUhoLmN1cnJlbnQ7SGguY3VycmVudD1rZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1VfHxhIT09TGh8fG51bGw9PT1UKVNoKCksTGg9YSxVPWQsVD1YZShMaC5jdXJyZW50LG51bGwsVSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1UJiYhZGkoKTspVD1iaShUKTtlbHNlIGZvcig7bnVsbCE9PVQ7KVQ9YmkoVCl9Y2F0Y2godSl7aWYoWWc9WGc9V2c9bnVsbCxsZygpLG51bGw9PT1UKWU9ITAsRGgodSk7ZWxzZXtudWxsPT09VD94KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1ULGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEaCh1KTtlbHNle2E6e3ZhciBoPWEsbD1nLGs9ZixtPXU7Zz1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PVxubSYmXCJvYmplY3RcIj09PXR5cGVvZiBtJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS50aGVuKXt2YXIgcD1tO209bDt2YXIgdD0tMSxBPS0xO2Rve2lmKDEzPT09bS50YWcpe3ZhciB2PW0uYWx0ZXJuYXRlO2lmKG51bGwhPT12JiYodj12Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXYpKXtBPTEwKigxMDczNzQxODIyLXYudGltZWRPdXRBdCk7YnJlYWt9dj1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHYpaWYoMD49dil0PTA7ZWxzZSBpZigtMT09PXR8fHY8dCl0PXZ9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1sO2Rve2lmKHY9MTM9PT1tLnRhZyl2PXZvaWQgMD09PW0ubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bS5tZW1vaXplZFN0YXRlO2lmKHYpe2w9bS51cGRhdGVRdWV1ZTtudWxsPT09bD8obD1uZXcgU2V0LGwuYWRkKHApLG0udXBkYXRlUXVldWU9bCk6bC5hZGQocCk7aWYoMD09PShtLm1vZGUmMSkpe20uZWZmZWN0VGFnfD1cbjY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KGc9bmYoMTA3Mzc0MTgyMyksZy50YWc9c2YscGYoayxnKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtsPWc7dmFyIFI9ay5waW5nQ2FjaGU7bnVsbD09PVI/KFI9ay5waW5nQ2FjaGU9bmV3IEJoLHY9bmV3IFNldCxSLnNldChwLHYpKToodj1SLmdldChwKSx2b2lkIDA9PT12JiYodj1uZXcgU2V0LFIuc2V0KHAsdikpKTt2LmhhcyhsKXx8KHYuYWRkKGwpLGs9ZWkuYmluZChudWxsLGsscCxsKSxwLnRoZW4oayxrKSk7LTE9PT10P2g9MTA3Mzc0MTgyMzooLTE9PT1BJiYoQT0xMCooMTA3Mzc0MTgyMi1nZihoLGcpKS01RTMpLGg9QSt0KTswPD1oJiZNaDxoJiYoTWg9aCk7bS5lZmZlY3RUYWd8PTIwNDg7bS5leHBpcmF0aW9uVGltZT1nO2JyZWFrIGF9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1FcnJvcigoaWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcblwiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIramMoaykpfU5oPSEwO209amgobSxrKTtoPWw7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5lZmZlY3RUYWd8PTIwNDg7aC5leHBpcmF0aW9uVGltZT1nO2c9Q2goaCxtLGcpO2VoKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYodD1tLEE9aC50eXBlLGs9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1rJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhrKSkpKXtoLmVmZmVjdFRhZ3w9MjA0ODtcbmguZXhwaXJhdGlvblRpbWU9ZztnPUVoKGgsdCxnKTtlaChoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVQ9YWkoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtLaD0hMTtIaC5jdXJyZW50PWM7WWc9WGc9V2c9bnVsbDtsZygpO2lmKGUpTGg9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVQpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2M9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yz94KFwiMjgxXCIpOnZvaWQgMDtMaD1udWxsO2lmKE5oKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8ZHx8MCE9PWYmJmY8ZHx8MCE9PWcmJmc8ZCl7ZmYoYSxkKTtmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7ZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7XG5iPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztmaShhLGMsZCxiLC0xKTtyZXR1cm59fWImJi0xIT09TWg/KGZmKGEsZCksYj0xMCooMTA3Mzc0MTgyMi1nZihhLGQpKSxiPE1oJiYoTWg9YiksYj0xMCooMTA3Mzc0MTgyMi1sZigpKSxiPU1oLWIsZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQsYS5maW5pc2hlZFdvcms9Yyl9fVxuZnVuY3Rpb24gc2goYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoZCkpKXthPWpoKGIsYSk7YT1FaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT1qaChiLGEpO2E9Q2goYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPWpoKGIsYSksYz1DaChhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxxZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIG1mKGEsYil7dmFyIGM9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpLGQ9dm9pZCAwO2lmKDA9PT0oYi5tb2RlJjEpKWQ9MTA3Mzc0MTgyMztlbHNlIGlmKEtoJiYhT2gpZD1VO2Vsc2V7c3dpdGNoKGMpe2Nhc2Ugci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTpkPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTpkPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX0xvd1ByaW9yaXR5OmNhc2Ugci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6ZD0xO2JyZWFrO2RlZmF1bHQ6eChcIjMxM1wiKX1udWxsIT09TGgmJmQ9PT1VJiYtLWR9Yz09PXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkmJlxuKDA9PT1naXx8ZDxnaSkmJihnaT1kKTtyZXR1cm4gZH1mdW5jdGlvbiBlaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1MaCYmVT09PWMpTGg9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztkZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKX19ZnVuY3Rpb24gQWgoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1sZigpO2I9bWYoYixhKTthPWhpKGEsYik7bnVsbCE9PWEmJihjZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmWGgoYSxiKSl9XG5mdW5jdGlvbiBoaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gcWYoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighS2gmJjAhPT1VJiZiPlUmJlNoKCksY2YoYSxiKSxLaCYmIU9oJiZMaD09PWF8fFhoKGEsYS5leHBpcmF0aW9uVGltZSksaWk+amkmJihpaT0wLHgoXCIxODVcIikpKX1mdW5jdGlvbiBraShhLGIsYyxkLGUpe3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX12YXIgbGk9bnVsbCxZPW51bGwsbWk9MCxuaT12b2lkIDAsVz0hMSxvaT1udWxsLFo9MCxnaT0wLHBpPSExLHFpPW51bGwsWD0hMSxyaT0hMSxzaT1udWxsLHRpPXIudW5zdGFibGVfbm93KCksdWk9MTA3Mzc0MTgyMi0odGkvMTB8MCksdmk9dWksamk9NTAsaWk9MCx3aT1udWxsO2Z1bmN0aW9uIHhpKCl7dWk9MTA3Mzc0MTgyMi0oKHIudW5zdGFibGVfbm93KCktdGkpLzEwfDApfVxuZnVuY3Rpb24geWkoYSxiKXtpZigwIT09bWkpe2lmKGI8bWkpcmV0dXJuO251bGwhPT1uaSYmci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhuaSl9bWk9YjthPXIudW5zdGFibGVfbm93KCktdGk7bmk9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHppLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8ZGkoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9eWUoQWkuYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gQWkoYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9Yjt4aSgpO3ZpPXVpO0JpKGEsYyl9ZnVuY3Rpb24gJGgoYSxiKXthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIGxmKCl7aWYoVylyZXR1cm4gdmk7Q2koKTtpZigwPT09Wnx8MT09PVopeGkoKSx2aT11aTtyZXR1cm4gdml9ZnVuY3Rpb24gWGgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1ZPyhsaT1ZPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWT1ZLm5leHRTY2hlZHVsZWRSb290PWEsWS5uZXh0U2NoZWR1bGVkUm9vdD1saSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFg/cmkmJihvaT1hLFo9MTA3Mzc0MTgyMyxEaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9ZaCgxMDczNzQxODIzLCExKTp5aShhLGIpKX1cbmZ1bmN0aW9uIENpKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVkpZm9yKHZhciBjPVksZD1saTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WT94KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGk9WT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGkpbGk9ZT1kLm5leHRTY2hlZHVsZWRSb290LFkubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WSl7WT1jO1kubmV4dFNjaGVkdWxlZFJvb3Q9bGk7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WSlicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fW9pPWI7Wj1hfXZhciBFaT0hMTtmdW5jdGlvbiBkaSgpe3JldHVybiBFaT8hMDpyLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/RWk9ITA6ITF9ZnVuY3Rpb24gemkoKXt0cnl7aWYoIWRpKCkmJm51bGwhPT1saSl7eGkoKTt2YXIgYT1saTtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZ1aTw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249dWkpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09bGkpfVloKDAsITApfWZpbmFsbHl7RWk9ITF9fVxuZnVuY3Rpb24gWWgoYSxiKXtDaSgpO2lmKGIpZm9yKHhpKCksdmk9dWk7bnVsbCE9PW9pJiYwIT09WiYmYTw9WiYmIShFaSYmdWk+Wik7KURpKG9pLFosdWk+WiksQ2koKSx4aSgpLHZpPXVpO2Vsc2UgZm9yKDtudWxsIT09b2kmJjAhPT1aJiZhPD1aOylEaShvaSxaLCExKSxDaSgpO2ImJihtaT0wLG5pPW51bGwpOzAhPT1aJiZ5aShvaSxaKTtpaT0wO3dpPW51bGw7aWYobnVsbCE9PXNpKWZvcihhPXNpLHNpPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7cGl8fChwaT0hMCxxaT1kKX19aWYocGkpdGhyb3cgYT1xaSxxaT1udWxsLHBpPSExLGE7fWZ1bmN0aW9uIEJpKGEsYil7Vz94KFwiMjUzXCIpOnZvaWQgMDtvaT1hO1o9YjtEaShhLGIsITEpO1loKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gRGkoYSxiLGMpe1c/eChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihkaSgpP2EuZmluaXNoZWRXb3JrPWQ6RmkoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmRmkoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gRmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09c2k/c2k9W2RdOnNpLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09d2k/aWkrKzood2k9YSxpaT0wKTtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7WmgoYSxiKX0pfWZ1bmN0aW9uIERoKGEpe251bGw9PT1vaT94KFwiMjQ2XCIpOnZvaWQgMDtvaS5leHBpcmF0aW9uVGltZT0wO3BpfHwocGk9ITAscWk9YSl9ZnVuY3Rpb24gR2koYSxiKXt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFg9Yyl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEhpKGEsYil7aWYoWCYmIXJpKXtyaT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtyaT0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gSWkoYSxiLGMpe1h8fFd8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKTt2YXIgZD1YO1g9ITA7dHJ5e3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjKX0pfWZpbmFsbHl7KFg9ZCl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEppKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWVkKGMpJiYxPT09Yy50YWc/dm9pZCAwOngoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoSihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3goXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoSihoKSl7Yz1OZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1IZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5vZigpO3BmKGYsZSk7cWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBLaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1sZigpO2U9bWYoZixlKTtyZXR1cm4gSmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBMaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIE1pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6V2Isa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5BYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOnljKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtlP3ZvaWQgMDp4KFwiOTBcIik7U2IoZCk7eWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZhZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gTmkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWxmKCkrNTAwKS8yNXwwKSsxKTtiPj1KaCYmKGI9SmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfU5pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOngoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBPaTtKaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5OaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5OaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6eChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD94KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0JpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O05pLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBPaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfU9pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5PaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFBpKGEsYixjKXtiPUsoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuUGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBPaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7S2koYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtQaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgT2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO0tpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307UGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IE9pO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtLaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuUGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE5pKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gUWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUdiPUdpO0hiPUlpO0liPWZ1bmN0aW9uKCl7V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApfTtcbmZ1bmN0aW9uIFJpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgUGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVJpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1IaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gTGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFRpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIE1pKGEsYixudWxsLGMpfVxudmFyIFZpPXtjcmVhdGVQb3J0YWw6VGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj94KFwiMTg4XCIpOngoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9aGQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtRaShjKT92b2lkIDA6eChcIjIwMFwiKTtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/XG54KFwiMzhcIik6dm9pZCAwO3JldHVybiBTaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtRaShhKT92b2lkIDA6eChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhpKGZ1bmN0aW9uKCl7U2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gVGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOkdpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpJaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3goXCIxODdcIik6dm9pZCAwO3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGtpKGEsYil9ZmluYWxseXtYPWMsWWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OlVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1cblg7WD0hMDt0cnl7a2koYSl9ZmluYWxseXsoWD1iKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscGEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEViLEZiLERkLERhXX19O2Z1bmN0aW9uIFVpKGEsYil7UWkoYSk/dm9pZCAwOngoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBQaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBUZShuKHt9LGEse292ZXJyaWRlUHJvcHM6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi44LjZcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgV2k9e2RlZmF1bHQ6Vml9LFhpPVdpJiZWaXx8V2k7bW9kdWxlLmV4cG9ydHM9WGkuZGVmYXVsdHx8WGk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAvKipcbiAgICogSGlkZSBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAuaGlkZSgpXG4gICAqL1xuICB0YXJnZXQuaGlkZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuSElERSwgeyB0YXJnZXQ6IHRhcmdldCB9KTtcbiAgfTtcblxuICAvKipcbiAgICogUmVidWlsZCBhbGwgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAucmVidWlsZCgpXG4gICAqL1xuICB0YXJnZXQucmVidWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuUkVCVUlMRCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3cgc3BlY2lmaWMgdG9vbHRpcFxuICAgKiBAdHJpZ2dlciBSZWFjdFRvb2x0aXAuc2hvdygpXG4gICAqL1xuICB0YXJnZXQuc2hvdyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBkaXNwYXRjaEdsb2JhbEV2ZW50KF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuU0hPVywgeyB0YXJnZXQ6IHRhcmdldCB9KTtcbiAgfTtcblxuICB0YXJnZXQucHJvdG90eXBlLmdsb2JhbFJlYnVpbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMubW91bnQpIHtcbiAgICAgIHRoaXMudW5iaW5kTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuYmluZExpc3RlbmVyKCk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsU2hvdyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICAvLyBDcmVhdGUgYSBmYWtlIGV2ZW50LCBzcGVjaWZpYyBzaG93IHdpbGwgbGltaXQgdGhlIHR5cGUgdG8gYHNvbGlkYFxuICAgICAgLy8gb25seSBgZmxvYXRgIHR5cGUgY2FyZXMgZS5jbGllbnRYIGUuY2xpZW50WVxuICAgICAgdmFyIGUgPSB7IGN1cnJlbnRUYXJnZXQ6IGV2ZW50LmRldGFpbC50YXJnZXQgfTtcbiAgICAgIHRoaXMuc2hvd1Rvb2x0aXAoZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHRhcmdldC5wcm90b3R5cGUuZ2xvYmFsSGlkZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0aGlzLm1vdW50KSB7XG4gICAgICB2YXIgaGFzVGFyZ2V0ID0gZXZlbnQgJiYgZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50YXJnZXQgJiYgdHJ1ZSB8fCBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZVRvb2x0aXAoeyBjdXJyZW50VGFyZ2V0OiBoYXNUYXJnZXQgJiYgZXZlbnQuZGV0YWlsLnRhcmdldCB9LCBoYXNUYXJnZXQpO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBfY29uc3RhbnQgPSByZXF1aXJlKCcuLi9jb25zdGFudCcpO1xuXG52YXIgX2NvbnN0YW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbnN0YW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGRpc3BhdGNoR2xvYmFsRXZlbnQgPSBmdW5jdGlvbiBkaXNwYXRjaEdsb2JhbEV2ZW50KGV2ZW50TmFtZSwgb3B0cykge1xuICAvLyBDb21wYXRpYmFsZSB3aXRoIElFXG4gIC8vIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjU5NjEyMy9pbnRlcm5ldC1leHBsb3Jlci05LTEwLTExLWV2ZW50LWNvbnN0cnVjdG9yLWRvZXNudC13b3JrXG4gIHZhciBldmVudCA9IHZvaWQgMDtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudE5hbWUsIHsgZGV0YWlsOiBvcHRzIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGV2ZW50LmRldGFpbCA9IG9wdHM7XG4gIH1cblxuICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59OyAvKipcbiAgICAqIFN0YXRpYyBtZXRob2RzIGZvciByZWFjdC10b29sdGlwXG4gICAgKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5iaW5kV2luZG93RXZlbnRzID0gZnVuY3Rpb24gKHJlc2l6ZUhpZGUpIHtcbiAgICAvLyBSZWFjdFRvb2x0aXAuaGlkZVxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuSElERSwgdGhpcy5nbG9iYWxIaWRlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLkhJREUsIHRoaXMuZ2xvYmFsSGlkZSwgZmFsc2UpO1xuXG4gICAgLy8gUmVhY3RUb29sdGlwLnJlYnVpbGRcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlJFQlVJTEQsIHRoaXMuZ2xvYmFsUmVidWlsZCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5SRUJVSUxELCB0aGlzLmdsb2JhbFJlYnVpbGQsIGZhbHNlKTtcblxuICAgIC8vIFJlYWN0VG9vbHRpcC5zaG93XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5TSE9XLCB0aGlzLmdsb2JhbFNob3cpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuU0hPVywgdGhpcy5nbG9iYWxTaG93LCBmYWxzZSk7XG5cbiAgICAvLyBSZXNpemVcbiAgICBpZiAocmVzaXplSGlkZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdGFyZ2V0LnByb3RvdHlwZS51bmJpbmRXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoX2NvbnN0YW50Mi5kZWZhdWx0LkdMT0JBTC5ISURFLCB0aGlzLmdsb2JhbEhpZGUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKF9jb25zdGFudDIuZGVmYXVsdC5HTE9CQUwuUkVCVUlMRCwgdGhpcy5nbG9iYWxSZWJ1aWxkKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihfY29uc3RhbnQyLmRlZmF1bHQuR0xPQkFMLlNIT1csIHRoaXMuZ2xvYmFsU2hvdyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25XaW5kb3dSZXNpemUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBpbnZva2VkIGJ5IHJlc2l6ZSBldmVudCBvZiB3aW5kb3dcbiAgICovXG4gIHRhcmdldC5wcm90b3R5cGUub25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLm1vdW50KSByZXR1cm47XG4gICAgdGhpcy5oaWRlVG9vbHRpcCgpO1xuICB9O1xufTtcblxudmFyIF9jb25zdGFudCA9IHJlcXVpcmUoJy4uL2NvbnN0YW50Jyk7XG5cbnZhciBfY29uc3RhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29uc3RhbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmlzQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5zdGF0ZS5ldmVudDtcblxuICAgIHJldHVybiBldmVudCB8fCAhIWVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQnKTtcbiAgfTtcblxuICAvKiBCaW5kIGxpc3RlbmVyIGZvciBjdXN0b20gZXZlbnQgKi9cbiAgdGFyZ2V0LnByb3RvdHlwZS5jdXN0b21CaW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBldmVudCA9IF9zdGF0ZS5ldmVudCxcbiAgICAgICAgZXZlbnRPZmYgPSBfc3RhdGUuZXZlbnRPZmY7XG5cbiAgICB2YXIgZGF0YUV2ZW50ID0gZWxlLmdldEF0dHJpYnV0ZSgnZGF0YS1ldmVudCcpIHx8IGV2ZW50O1xuICAgIHZhciBkYXRhRXZlbnRPZmYgPSBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50LW9mZicpIHx8IGV2ZW50T2ZmO1xuXG4gICAgZGF0YUV2ZW50LnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjdXN0b21MaXN0ZW5lcnMuZ2V0KGVsZSwgZXZlbnQpKTtcbiAgICAgIHZhciBjdXN0b21MaXN0ZW5lciA9IGNoZWNrU3RhdHVzLmJpbmQoX3RoaXMsIGRhdGFFdmVudE9mZik7XG4gICAgICBjdXN0b21MaXN0ZW5lcnMuc2V0KGVsZSwgZXZlbnQsIGN1c3RvbUxpc3RlbmVyKTtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjdXN0b21MaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICAgIGlmIChkYXRhRXZlbnRPZmYpIHtcbiAgICAgIGRhdGFFdmVudE9mZi5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBfdGhpcy5oaWRlVG9vbHRpcCk7XG4gICAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBfdGhpcy5oaWRlVG9vbHRpcCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIFVuYmluZCBsaXN0ZW5lciBmb3IgY3VzdG9tIGV2ZW50ICovXG4gIHRhcmdldC5wcm90b3R5cGUuY3VzdG9tVW5iaW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlKSB7XG4gICAgdmFyIF9zdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBldmVudCA9IF9zdGF0ZTIuZXZlbnQsXG4gICAgICAgIGV2ZW50T2ZmID0gX3N0YXRlMi5ldmVudE9mZjtcblxuICAgIHZhciBkYXRhRXZlbnQgPSBldmVudCB8fCBlbGUuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50Jyk7XG4gICAgdmFyIGRhdGFFdmVudE9mZiA9IGV2ZW50T2ZmIHx8IGVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlbnQtb2ZmJyk7XG5cbiAgICBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihkYXRhRXZlbnQsIGN1c3RvbUxpc3RlbmVycy5nZXQoZWxlLCBldmVudCkpO1xuICAgIGlmIChkYXRhRXZlbnRPZmYpIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKGRhdGFFdmVudE9mZiwgdGhpcy5oaWRlVG9vbHRpcCk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKipcbiAqIEN1c3RvbSBldmVudHMgdG8gY29udHJvbCBzaG93aW5nIGFuZCBoaWRpbmcgb2YgdG9vbHRpcFxuICpcbiAqIEBhdHRyaWJ1dGVzXG4gKiAtIGBldmVudGAge1N0cmluZ31cbiAqIC0gYGV2ZW50T2ZmYCB7U3RyaW5nfVxuICovXG5cbnZhciBjaGVja1N0YXR1cyA9IGZ1bmN0aW9uIGNoZWNrU3RhdHVzKGRhdGFFdmVudE9mZiwgZSkge1xuICB2YXIgc2hvdyA9IHRoaXMuc3RhdGUuc2hvdztcbiAgdmFyIGlkID0gdGhpcy5wcm9wcy5pZDtcblxuICB2YXIgZGF0YUlzQ2FwdHVyZSA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaXNjYXB0dXJlJyk7XG4gIHZhciBpc0NhcHR1cmUgPSBkYXRhSXNDYXB0dXJlICYmIGRhdGFJc0NhcHR1cmUgPT09ICd0cnVlJyB8fCB0aGlzLnByb3BzLmlzQ2FwdHVyZTtcbiAgdmFyIGN1cnJlbnRJdGVtID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nKTtcblxuICBpZiAoIWlzQ2FwdHVyZSkgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgaWYgKHNob3cgJiYgY3VycmVudEl0ZW0gPT09ICd0cnVlJykge1xuICAgIGlmICghZGF0YUV2ZW50T2ZmKSB0aGlzLmhpZGVUb29sdGlwKGUpO1xuICB9IGVsc2Uge1xuICAgIGUuY3VycmVudFRhcmdldC5zZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJywgJ3RydWUnKTtcbiAgICBzZXRVbnRhcmdldEl0ZW1zKGUuY3VycmVudFRhcmdldCwgdGhpcy5nZXRUYXJnZXRBcnJheShpZCkpO1xuICAgIHRoaXMuc2hvd1Rvb2x0aXAoZSk7XG4gIH1cbn07XG5cbnZhciBzZXRVbnRhcmdldEl0ZW1zID0gZnVuY3Rpb24gc2V0VW50YXJnZXRJdGVtcyhjdXJyZW50VGFyZ2V0LCB0YXJnZXRBcnJheSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRhcmdldEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGN1cnJlbnRUYXJnZXQgIT09IHRhcmdldEFycmF5W2ldKSB7XG4gICAgICB0YXJnZXRBcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ2N1cnJlbnRJdGVtJywgJ2ZhbHNlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldEFycmF5W2ldLnNldEF0dHJpYnV0ZSgnY3VycmVudEl0ZW0nLCAndHJ1ZScpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGN1c3RvbUxpc3RlbmVycyA9IHtcbiAgaWQ6ICc5YjY5ZjkyZS1kM2ZlLTQ5OGItYjFiNC1jNWU2M2E1MWIwY2YnLFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLmlkIGluIHRhcmdldCkge1xuICAgICAgdmFyIG1hcCA9IHRhcmdldFt0aGlzLmlkXTtcbiAgICAgIG1hcFtldmVudF0gPSBsaXN0ZW5lcjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyBpcyB3b3JrYXJvdW5kIGZvciBXZWFrTWFwLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIG9sZGVyIGJyb3dzZXJzLCBzdWNoIGFzIElFXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCB0aGlzLmlkLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZXZlbnQsIGxpc3RlbmVyKVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIGV2ZW50KSB7XG4gICAgdmFyIG1hcCA9IHRhcmdldFt0aGlzLmlkXTtcbiAgICBpZiAobWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBtYXBbZXZlbnRdO1xuICAgIH1cbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdGFyZ2V0LnByb3RvdHlwZS5pc0NhcHR1cmUgPSBmdW5jdGlvbiAoY3VycmVudFRhcmdldCkge1xuICAgIHJldHVybiBjdXJyZW50VGFyZ2V0ICYmIGN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWlzY2FwdHVyZScpID09PSAndHJ1ZScgfHwgdGhpcy5wcm9wcy5pc0NhcHR1cmUgfHwgZmFsc2U7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmdldEVmZmVjdCA9IGZ1bmN0aW9uIChjdXJyZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRhdGFFZmZlY3QgPSBjdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1lZmZlY3QnKTtcbiAgICByZXR1cm4gZGF0YUVmZmVjdCB8fCB0aGlzLnByb3BzLmVmZmVjdCB8fCAnZmxvYXQnO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICB0YXJnZXQucHJvdG90eXBlLmJpbmRSZW1vdmFsVHJhY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnZXRNdXRhdGlvbk9ic2VydmVyQ2xhc3MoKTtcbiAgICBpZiAoTXV0YXRpb25PYnNlcnZlciA9PSBudWxsKSByZXR1cm47XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICBmb3IgKHZhciBtMSA9IDA7IG0xIDwgbXV0YXRpb25zLmxlbmd0aDsgbTErKykge1xuICAgICAgICB2YXIgbXV0YXRpb24gPSBtdXRhdGlvbnNbbTFdO1xuICAgICAgICBmb3IgKHZhciBtMiA9IDA7IG0yIDwgbXV0YXRpb24ucmVtb3ZlZE5vZGVzLmxlbmd0aDsgbTIrKykge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzW20yXTtcbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gX3RoaXMuc3RhdGUuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgX3RoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUod2luZG93LmRvY3VtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMucmVtb3ZhbFRyYWNrZXIgPSBvYnNlcnZlcjtcbiAgfTtcblxuICB0YXJnZXQucHJvdG90eXBlLnVuYmluZFJlbW92YWxUcmFja2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlbW92YWxUcmFja2VyKSB7XG4gICAgICB0aGlzLnJlbW92YWxUcmFja2VyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMucmVtb3ZhbFRyYWNrZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogVHJhY2tpbmcgdGFyZ2V0IHJlbW92aW5nIGZyb20gRE9NLlxuICogSXQncyBuZXNzZXNhcnkgdG8gaGlkZSB0b29sdGlwIHdoZW4gaXQncyB0YXJnZXQgZGlzYXBwZWFycy5cbiAqIE90aGVyd2lzZSwgdGhlIHRvb2x0aXAgd291bGQgYmUgc2hvd24gZm9yZXZlciB1bnRpbCBhbm90aGVyIHRhcmdldFxuICogaXMgdHJpZ2dlcmVkLlxuICpcbiAqIElmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgbm90IGF2YWlsYWJsZSwgdGhpcyBmZWF0dXJlIGp1c3QgZG9lc24ndCB3b3JrLlxuICovXG5cbi8vIGh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMi8wNS9kb20tbXV0YXRpb25vYnNlcnZlci1yZWFjdGluZy10by1kb20tY2hhbmdlcy13aXRob3V0LWtpbGxpbmctYnJvd3Nlci1wZXJmb3JtYW5jZS9cbnZhciBnZXRNdXRhdGlvbk9ic2VydmVyQ2xhc3MgPSBmdW5jdGlvbiBnZXRNdXRhdGlvbk9ic2VydmVyQ2xhc3MoKSB7XG4gIHJldHVybiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlcjtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoZSwgdGFyZ2V0LCBub2RlLCBwbGFjZSwgZGVzaXJlZFBsYWNlLCBlZmZlY3QsIG9mZnNldCkge1xuICB2YXIgX2dldERpbWVuc2lvbnMgPSBnZXREaW1lbnNpb25zKG5vZGUpLFxuICAgICAgdGlwV2lkdGggPSBfZ2V0RGltZW5zaW9ucy53aWR0aCxcbiAgICAgIHRpcEhlaWdodCA9IF9nZXREaW1lbnNpb25zLmhlaWdodDtcblxuICB2YXIgX2dldERpbWVuc2lvbnMyID0gZ2V0RGltZW5zaW9ucyh0YXJnZXQpLFxuICAgICAgdGFyZ2V0V2lkdGggPSBfZ2V0RGltZW5zaW9uczIud2lkdGgsXG4gICAgICB0YXJnZXRIZWlnaHQgPSBfZ2V0RGltZW5zaW9uczIuaGVpZ2h0O1xuXG4gIHZhciBfZ2V0Q3VycmVudE9mZnNldCA9IGdldEN1cnJlbnRPZmZzZXQoZSwgdGFyZ2V0LCBlZmZlY3QpLFxuICAgICAgbW91c2VYID0gX2dldEN1cnJlbnRPZmZzZXQubW91c2VYLFxuICAgICAgbW91c2VZID0gX2dldEN1cnJlbnRPZmZzZXQubW91c2VZO1xuXG4gIHZhciBkZWZhdWx0T2Zmc2V0ID0gZ2V0RGVmYXVsdFBvc2l0aW9uKGVmZmVjdCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgdGlwV2lkdGgsIHRpcEhlaWdodCk7XG5cbiAgdmFyIF9jYWxjdWxhdGVPZmZzZXQgPSBjYWxjdWxhdGVPZmZzZXQob2Zmc2V0KSxcbiAgICAgIGV4dHJhT2Zmc2V0X1ggPSBfY2FsY3VsYXRlT2Zmc2V0LmV4dHJhT2Zmc2V0X1gsXG4gICAgICBleHRyYU9mZnNldF9ZID0gX2NhbGN1bGF0ZU9mZnNldC5leHRyYU9mZnNldF9ZO1xuXG4gIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB2YXIgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gIHZhciBfZ2V0UGFyZW50ID0gZ2V0UGFyZW50KG5vZGUpLFxuICAgICAgcGFyZW50VG9wID0gX2dldFBhcmVudC5wYXJlbnRUb3AsXG4gICAgICBwYXJlbnRMZWZ0ID0gX2dldFBhcmVudC5wYXJlbnRMZWZ0O1xuXG4gIC8vIEdldCB0aGUgZWRnZSBvZmZzZXQgb2YgdGhlIHRvb2x0aXBcblxuXG4gIHZhciBnZXRUaXBPZmZzZXRMZWZ0ID0gZnVuY3Rpb24gZ2V0VGlwT2Zmc2V0TGVmdChwbGFjZSkge1xuICAgIHZhciBvZmZzZXRfWCA9IGRlZmF1bHRPZmZzZXRbcGxhY2VdLmw7XG4gICAgcmV0dXJuIG1vdXNlWCArIG9mZnNldF9YICsgZXh0cmFPZmZzZXRfWDtcbiAgfTtcbiAgdmFyIGdldFRpcE9mZnNldFJpZ2h0ID0gZnVuY3Rpb24gZ2V0VGlwT2Zmc2V0UmlnaHQocGxhY2UpIHtcbiAgICB2YXIgb2Zmc2V0X1ggPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS5yO1xuICAgIHJldHVybiBtb3VzZVggKyBvZmZzZXRfWCArIGV4dHJhT2Zmc2V0X1g7XG4gIH07XG4gIHZhciBnZXRUaXBPZmZzZXRUb3AgPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRUb3AocGxhY2UpIHtcbiAgICB2YXIgb2Zmc2V0X1kgPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS50O1xuICAgIHJldHVybiBtb3VzZVkgKyBvZmZzZXRfWSArIGV4dHJhT2Zmc2V0X1k7XG4gIH07XG4gIHZhciBnZXRUaXBPZmZzZXRCb3R0b20gPSBmdW5jdGlvbiBnZXRUaXBPZmZzZXRCb3R0b20ocGxhY2UpIHtcbiAgICB2YXIgb2Zmc2V0X1kgPSBkZWZhdWx0T2Zmc2V0W3BsYWNlXS5iO1xuICAgIHJldHVybiBtb3VzZVkgKyBvZmZzZXRfWSArIGV4dHJhT2Zmc2V0X1k7XG4gIH07XG5cbiAgLy9cbiAgLy8gRnVuY3Rpb25zIHRvIHRlc3Qgd2hldGhlciB0aGUgdG9vbHRpcCdzIHNpZGVzIGFyZSBpbnNpZGVcbiAgLy8gdGhlIGNsaWVudCB3aW5kb3cgZm9yIGEgZ2l2ZW4gb3JpZW50YXRpb24gcFxuICAvL1xuICAvLyAgX19fX19fX19fX19fX1xuICAvLyB8ICAgICAgICAgICAgIHwgPC0tIFJpZ2h0IHNpZGVcbiAgLy8gfCBwID0gJ2xlZnQnICB8XFxcbiAgLy8gfCAgICAgICAgICAgICB8LyAgfFxcXG4gIC8vIHxfX19fX19fX19fX19ffCAgIHxfXFwgIDwtLSBNb3VzZVxuICAvLyAgICAgIC8gXFwgICAgICAgICAgIHxcbiAgLy8gICAgICAgfFxuICAvLyAgICAgICB8XG4gIC8vICBCb3R0b20gc2lkZVxuICAvL1xuICB2YXIgb3V0c2lkZUxlZnQgPSBmdW5jdGlvbiBvdXRzaWRlTGVmdChwKSB7XG4gICAgcmV0dXJuIGdldFRpcE9mZnNldExlZnQocCkgPCAwO1xuICB9O1xuICB2YXIgb3V0c2lkZVJpZ2h0ID0gZnVuY3Rpb24gb3V0c2lkZVJpZ2h0KHApIHtcbiAgICByZXR1cm4gZ2V0VGlwT2Zmc2V0UmlnaHQocCkgPiB3aW5kb3dXaWR0aDtcbiAgfTtcbiAgdmFyIG91dHNpZGVUb3AgPSBmdW5jdGlvbiBvdXRzaWRlVG9wKHApIHtcbiAgICByZXR1cm4gZ2V0VGlwT2Zmc2V0VG9wKHApIDwgMDtcbiAgfTtcbiAgdmFyIG91dHNpZGVCb3R0b20gPSBmdW5jdGlvbiBvdXRzaWRlQm90dG9tKHApIHtcbiAgICByZXR1cm4gZ2V0VGlwT2Zmc2V0Qm90dG9tKHApID4gd2luZG93SGVpZ2h0O1xuICB9O1xuXG4gIC8vIENoZWNrIHdoZXRoZXIgdGhlIHRvb2x0aXAgd2l0aCBvcmllbnRhdGlvbiBwIGlzIGNvbXBsZXRlbHkgaW5zaWRlIHRoZSBjbGllbnQgd2luZG93XG4gIHZhciBvdXRzaWRlID0gZnVuY3Rpb24gb3V0c2lkZShwKSB7XG4gICAgcmV0dXJuIG91dHNpZGVMZWZ0KHApIHx8IG91dHNpZGVSaWdodChwKSB8fCBvdXRzaWRlVG9wKHApIHx8IG91dHNpZGVCb3R0b20ocCk7XG4gIH07XG4gIHZhciBpbnNpZGUgPSBmdW5jdGlvbiBpbnNpZGUocCkge1xuICAgIHJldHVybiAhb3V0c2lkZShwKTtcbiAgfTtcblxuICB2YXIgcGxhY2VzTGlzdCA9IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J107XG4gIHZhciBpbnNpZGVMaXN0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIHAgPSBwbGFjZXNMaXN0W2ldO1xuICAgIGlmIChpbnNpZGUocCkpIHtcbiAgICAgIGluc2lkZUxpc3QucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNOZXdTdGF0ZSA9IGZhbHNlO1xuICB2YXIgbmV3UGxhY2UgPSB2b2lkIDA7XG4gIGlmIChpbnNpZGUoZGVzaXJlZFBsYWNlKSAmJiBkZXNpcmVkUGxhY2UgIT09IHBsYWNlKSB7XG4gICAgaXNOZXdTdGF0ZSA9IHRydWU7XG4gICAgbmV3UGxhY2UgPSBkZXNpcmVkUGxhY2U7XG4gIH0gZWxzZSBpZiAoaW5zaWRlTGlzdC5sZW5ndGggPiAwICYmIG91dHNpZGUoZGVzaXJlZFBsYWNlKSAmJiBvdXRzaWRlKHBsYWNlKSkge1xuICAgIGlzTmV3U3RhdGUgPSB0cnVlO1xuICAgIG5ld1BsYWNlID0gaW5zaWRlTGlzdFswXTtcbiAgfVxuXG4gIGlmIChpc05ld1N0YXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzTmV3U3RhdGU6IHRydWUsXG4gICAgICBuZXdTdGF0ZTogeyBwbGFjZTogbmV3UGxhY2UgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzTmV3U3RhdGU6IGZhbHNlLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBsZWZ0OiBwYXJzZUludChnZXRUaXBPZmZzZXRMZWZ0KHBsYWNlKSAtIHBhcmVudExlZnQsIDEwKSxcbiAgICAgIHRvcDogcGFyc2VJbnQoZ2V0VGlwT2Zmc2V0VG9wKHBsYWNlKSAtIHBhcmVudFRvcCwgMTApXG4gICAgfVxuICB9O1xufTtcblxudmFyIGdldERpbWVuc2lvbnMgPSBmdW5jdGlvbiBnZXREaW1lbnNpb25zKG5vZGUpIHtcbiAgdmFyIF9ub2RlJGdldEJvdW5kaW5nQ2xpZSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBoZWlnaHQgPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUuaGVpZ2h0LFxuICAgICAgd2lkdGggPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUud2lkdGg7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHBhcnNlSW50KGhlaWdodCwgMTApLFxuICAgIHdpZHRoOiBwYXJzZUludCh3aWR0aCwgMTApXG4gIH07XG59O1xuXG4vLyBHZXQgY3VycmVudCBtb3VzZSBvZmZzZXRcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0b29sdGlwXG4gKlxuICogQHBhcmFtc1xuICogLSBgZWAge0V2ZW50fSB0aGUgZXZlbnQgb2YgY3VycmVudCBtb3VzZVxuICogLSBgdGFyZ2V0YCB7RWxlbWVudH0gdGhlIGN1cnJlbnRUYXJnZXQgb2YgdGhlIGV2ZW50XG4gKiAtIGBub2RlYCB7RE9NfSB0aGUgcmVhY3QtdG9vbHRpcCBvYmplY3RcbiAqIC0gYHBsYWNlYCB7U3RyaW5nfSB0b3AgLyByaWdodCAvIGJvdHRvbSAvIGxlZnRcbiAqIC0gYGVmZmVjdGAge1N0cmluZ30gZmxvYXQgLyBzb2xpZFxuICogLSBgb2Zmc2V0YCB7T2JqZWN0fSB0aGUgb2Zmc2V0IHRvIGRlZmF1bHQgcG9zaXRpb25cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiAtIGBpc05ld1N0YXRlYCB7Qm9vbH0gcmVxdWlyZWRcbiAqIC0gYG5ld1N0YXRlYCB7T2JqZWN0fVxuICogLSBgcG9zaXRpb25gIHtPYmplY3R9IHtsZWZ0OiB7TnVtYmVyfSwgdG9wOiB7TnVtYmVyfX1cbiAqL1xudmFyIGdldEN1cnJlbnRPZmZzZXQgPSBmdW5jdGlvbiBnZXRDdXJyZW50T2Zmc2V0KGUsIGN1cnJlbnRUYXJnZXQsIGVmZmVjdCkge1xuICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRhcmdldFRvcCA9IGJvdW5kaW5nQ2xpZW50UmVjdC50b3A7XG4gIHZhciB0YXJnZXRMZWZ0ID0gYm91bmRpbmdDbGllbnRSZWN0LmxlZnQ7XG5cbiAgdmFyIF9nZXREaW1lbnNpb25zMyA9IGdldERpbWVuc2lvbnMoY3VycmVudFRhcmdldCksXG4gICAgICB0YXJnZXRXaWR0aCA9IF9nZXREaW1lbnNpb25zMy53aWR0aCxcbiAgICAgIHRhcmdldEhlaWdodCA9IF9nZXREaW1lbnNpb25zMy5oZWlnaHQ7XG5cbiAgaWYgKGVmZmVjdCA9PT0gJ2Zsb2F0Jykge1xuICAgIHJldHVybiB7XG4gICAgICBtb3VzZVg6IGUuY2xpZW50WCxcbiAgICAgIG1vdXNlWTogZS5jbGllbnRZXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1vdXNlWDogdGFyZ2V0TGVmdCArIHRhcmdldFdpZHRoIC8gMixcbiAgICBtb3VzZVk6IHRhcmdldFRvcCArIHRhcmdldEhlaWdodCAvIDJcbiAgfTtcbn07XG5cbi8vIExpc3QgYWxsIHBvc3NpYmlsaXR5IG9mIHRvb2x0aXAgZmluYWwgb2Zmc2V0XG4vLyBUaGlzIGlzIHVzZWZ1bCBpbiBqdWRnaW5nIGlmIGl0IGlzIG5lY2Vzc2FyeSBmb3IgdG9vbHRpcCB0byBzd2l0Y2ggcG9zaXRpb24gd2hlbiBvdXQgb2Ygd2luZG93XG52YXIgZ2V0RGVmYXVsdFBvc2l0aW9uID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFBvc2l0aW9uKGVmZmVjdCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgdGlwV2lkdGgsIHRpcEhlaWdodCkge1xuICB2YXIgdG9wID0gdm9pZCAwO1xuICB2YXIgcmlnaHQgPSB2b2lkIDA7XG4gIHZhciBib3R0b20gPSB2b2lkIDA7XG4gIHZhciBsZWZ0ID0gdm9pZCAwO1xuICB2YXIgZGlzVG9Nb3VzZSA9IDM7XG4gIHZhciB0cmlhbmdsZUhlaWdodCA9IDI7XG4gIHZhciBjdXJzb3JIZWlnaHQgPSAxMjsgLy8gT3B0aW1pemUgZm9yIGZsb2F0IGJvdHRvbSBvbmx5LCBjYXVzZSB0aGUgY3Vyc29yIHdpbGwgaGlkZSB0aGUgdG9vbHRpcFxuXG4gIGlmIChlZmZlY3QgPT09ICdmbG9hdCcpIHtcbiAgICB0b3AgPSB7XG4gICAgICBsOiAtKHRpcFdpZHRoIC8gMiksXG4gICAgICByOiB0aXBXaWR0aCAvIDIsXG4gICAgICB0OiAtKHRpcEhlaWdodCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICBiOiAtZGlzVG9Nb3VzZVxuICAgIH07XG4gICAgYm90dG9tID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCAvIDIpLFxuICAgICAgcjogdGlwV2lkdGggLyAyLFxuICAgICAgdDogZGlzVG9Nb3VzZSArIGN1cnNvckhlaWdodCxcbiAgICAgIGI6IHRpcEhlaWdodCArIGRpc1RvTW91c2UgKyB0cmlhbmdsZUhlaWdodCArIGN1cnNvckhlaWdodFxuICAgIH07XG4gICAgbGVmdCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggKyBkaXNUb01vdXNlICsgdHJpYW5nbGVIZWlnaHQpLFxuICAgICAgcjogLWRpc1RvTW91c2UsXG4gICAgICB0OiAtKHRpcEhlaWdodCAvIDIpLFxuICAgICAgYjogdGlwSGVpZ2h0IC8gMlxuICAgIH07XG4gICAgcmlnaHQgPSB7XG4gICAgICBsOiBkaXNUb01vdXNlLFxuICAgICAgcjogdGlwV2lkdGggKyBkaXNUb01vdXNlICsgdHJpYW5nbGVIZWlnaHQsXG4gICAgICB0OiAtKHRpcEhlaWdodCAvIDIpLFxuICAgICAgYjogdGlwSGVpZ2h0IC8gMlxuICAgIH07XG4gIH0gZWxzZSBpZiAoZWZmZWN0ID09PSAnc29saWQnKSB7XG4gICAgdG9wID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCAvIDIpLFxuICAgICAgcjogdGlwV2lkdGggLyAyLFxuICAgICAgdDogLSh0YXJnZXRIZWlnaHQgLyAyICsgdGlwSGVpZ2h0ICsgdHJpYW5nbGVIZWlnaHQpLFxuICAgICAgYjogLSh0YXJnZXRIZWlnaHQgLyAyKVxuICAgIH07XG4gICAgYm90dG9tID0ge1xuICAgICAgbDogLSh0aXBXaWR0aCAvIDIpLFxuICAgICAgcjogdGlwV2lkdGggLyAyLFxuICAgICAgdDogdGFyZ2V0SGVpZ2h0IC8gMixcbiAgICAgIGI6IHRhcmdldEhlaWdodCAvIDIgKyB0aXBIZWlnaHQgKyB0cmlhbmdsZUhlaWdodFxuICAgIH07XG4gICAgbGVmdCA9IHtcbiAgICAgIGw6IC0odGlwV2lkdGggKyB0YXJnZXRXaWR0aCAvIDIgKyB0cmlhbmdsZUhlaWdodCksXG4gICAgICByOiAtKHRhcmdldFdpZHRoIC8gMiksXG4gICAgICB0OiAtKHRpcEhlaWdodCAvIDIpLFxuICAgICAgYjogdGlwSGVpZ2h0IC8gMlxuICAgIH07XG4gICAgcmlnaHQgPSB7XG4gICAgICBsOiB0YXJnZXRXaWR0aCAvIDIsXG4gICAgICByOiB0aXBXaWR0aCArIHRhcmdldFdpZHRoIC8gMiArIHRyaWFuZ2xlSGVpZ2h0LFxuICAgICAgdDogLSh0aXBIZWlnaHQgLyAyKSxcbiAgICAgIGI6IHRpcEhlaWdodCAvIDJcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgdG9wOiB0b3AsIGJvdHRvbTogYm90dG9tLCBsZWZ0OiBsZWZ0LCByaWdodDogcmlnaHQgfTtcbn07XG5cbi8vIENvbnNpZGVyIGFkZGl0aW9uYWwgb2Zmc2V0IGludG8gcG9zaXRpb24gY2FsY3VsYXRpb25cbnZhciBjYWxjdWxhdGVPZmZzZXQgPSBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2Zmc2V0KSB7XG4gIHZhciBleHRyYU9mZnNldF9YID0gMDtcbiAgdmFyIGV4dHJhT2Zmc2V0X1kgPSAwO1xuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmFwcGx5KG9mZnNldCkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgb2Zmc2V0ID0gSlNPTi5wYXJzZShvZmZzZXQudG9TdHJpbmcoKS5yZXBsYWNlKC9cXCcvZywgJ1xcXCInKSk7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIG9mZnNldCkge1xuICAgIGlmIChrZXkgPT09ICd0b3AnKSB7XG4gICAgICBleHRyYU9mZnNldF9ZIC09IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdib3R0b20nKSB7XG4gICAgICBleHRyYU9mZnNldF9ZICs9IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdsZWZ0Jykge1xuICAgICAgZXh0cmFPZmZzZXRfWCAtPSBwYXJzZUludChvZmZzZXRba2V5XSwgMTApO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmlnaHQnKSB7XG4gICAgICBleHRyYU9mZnNldF9YICs9IHBhcnNlSW50KG9mZnNldFtrZXldLCAxMCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgZXh0cmFPZmZzZXRfWDogZXh0cmFPZmZzZXRfWCwgZXh0cmFPZmZzZXRfWTogZXh0cmFPZmZzZXRfWSB9O1xufTtcblxuLy8gR2V0IHRoZSBvZmZzZXQgb2YgdGhlIHBhcmVudCBlbGVtZW50c1xudmFyIGdldFBhcmVudCA9IGZ1bmN0aW9uIGdldFBhcmVudChjdXJyZW50VGFyZ2V0KSB7XG4gIHZhciBjdXJyZW50UGFyZW50ID0gY3VycmVudFRhcmdldDtcbiAgd2hpbGUgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoY3VycmVudFBhcmVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykgIT09ICdub25lJykgYnJlYWs7XG4gICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQucGFyZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBwYXJlbnRUb3AgPSBjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIHx8IDA7XG4gIHZhciBwYXJlbnRMZWZ0ID0gY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgfHwgMDtcblxuICByZXR1cm4geyBwYXJlbnRUb3A6IHBhcmVudFRvcCwgcGFyZW50TGVmdDogcGFyZW50TGVmdCB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh0aXAsIGNoaWxkcmVuLCBnZXRDb250ZW50LCBtdWx0aWxpbmUpIHtcbiAgaWYgKGNoaWxkcmVuKSByZXR1cm4gY2hpbGRyZW47XG4gIGlmIChnZXRDb250ZW50ICE9PSB1bmRlZmluZWQgJiYgZ2V0Q29udGVudCAhPT0gbnVsbCkgcmV0dXJuIGdldENvbnRlbnQ7IC8vIGdldENvbnRlbnQgY2FuIGJlIDAsICcnLCBldGMuXG4gIGlmIChnZXRDb250ZW50ID09PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gVGlwIG5vdCBleGlzdCBhbmQgY2hpbGRlcm4gaXMgbnVsbCBvciB1bmRlZmluZWRcblxuICB2YXIgcmVnZXhwID0gLzxiclxccypcXC8/Pi87XG4gIGlmICghbXVsdGlsaW5lIHx8IG11bHRpbGluZSA9PT0gJ2ZhbHNlJyB8fCAhcmVnZXhwLnRlc3QodGlwKSkge1xuICAgIC8vIE5vIHRyaW0oKSwgc28gdGhhdCB1c2VyIGNhbiBrZWVwIHRoZWlyIGlucHV0XG4gICAgcmV0dXJuIHRpcDtcbiAgfVxuXG4gIC8vIE11bHRpbGluZSB0b29sdGlwIGNvbnRlbnRcbiAgcmV0dXJuIHRpcC5zcGxpdChyZWdleHApLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsga2V5OiBpLCBjbGFzc05hbWU6ICdtdWx0aS1saW5lJyB9LFxuICAgICAgZFxuICAgICk7XG4gIH0pO1xufTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXJzZUFyaWEgPSBwYXJzZUFyaWE7XG4vKipcbiAqIFN1cHBvcnQgYXJpYS0gYW5kIHJvbGUgaW4gUmVhY3RUb29sdGlwXG4gKlxuICogQHBhcmFtcyBwcm9wcyB7T2JqZWN0fVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBwYXJzZUFyaWEocHJvcHMpIHtcbiAgdmFyIGFyaWFPYmogPSB7fTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZpbHRlcihmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIGFyaWEteHh4IGFuZCByb2xlIGlzIGFjY2VwdGFibGVcbiAgICByZXR1cm4gKC8oXmFyaWEtXFx3KyR8XnJvbGUkKS8udGVzdChwcm9wKVxuICAgICk7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBhcmlhT2JqW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gIH0pO1xuXG4gIHJldHVybiBhcmlhT2JqO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAobm9kZUxpc3QpIHtcbiAgdmFyIGxlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgaWYgKG5vZGVMaXN0Lmhhc093blByb3BlcnR5KSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVMaXN0KTtcbiAgfVxuICByZXR1cm4gbmV3IEFycmF5KGxlbmd0aCkuZmlsbCgpLm1hcChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gbm9kZUxpc3RbaW5kZXhdO1xuICB9KTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gJy5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwe2JvcmRlci1yYWRpdXM6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtc2l6ZToxM3B4O2xlZnQ6LTk5OWVtO29wYWNpdHk6MDtwYWRkaW5nOjhweCAyMXB4O3Bvc2l0aW9uOmZpeGVkO3BvaW50ZXItZXZlbnRzOm5vbmU7dHJhbnNpdGlvbjpvcGFjaXR5IDAuM3MgZWFzZS1vdXQ7dG9wOi05OTllbTt2aXNpYmlsaXR5OmhpZGRlbjt6LWluZGV4Ojk5OX0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5hbGxvd19ob3ZlciwuX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5hbGxvd19jbGlja3twb2ludGVyLWV2ZW50czphdXRvfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwOmJlZm9yZSwuX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcDphZnRlcntjb250ZW50OlwiXCI7d2lkdGg6MDtoZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZX0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5zaG93e29wYWNpdHk6MC45O21hcmdpbi10b3A6MHB4O21hcmdpbi1sZWZ0OjBweDt2aXNpYmlsaXR5OnZpc2libGV9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJre2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZGFyay5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojMjIyO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiMyMjI7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojMjIyO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiMyMjI7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1kYXJrLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWRhcmsuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNze2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojOERDNTcyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtc3VjY2Vzcy5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojOERDNTcyO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiM4REM1NzI7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojOERDNTcyO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiM4REM1NzI7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1zdWNjZXNzLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXN1Y2Nlc3MuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5ne2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojRjBBRDRFfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtd2FybmluZy5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojRjBBRDRFO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNGMEFENEU7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcucGxhY2UtbGVmdDphZnRlcntib3JkZXItbGVmdC1jb2xvcjojRjBBRDRFO2JvcmRlci1sZWZ0LXN0eWxlOnNvbGlkO2JvcmRlci1sZWZ0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNGMEFENEU7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci10b3A6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS13YXJuaW5nLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLXdhcm5pbmcuYm9yZGVyLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItcmlnaHQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I0JFNjQ2NH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLXRvcDphZnRlcntib3JkZXItdG9wLWNvbG9yOiNCRTY0NjQ7Ym9yZGVyLXRvcC1zdHlsZTpzb2xpZDtib3JkZXItdG9wLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLWJvdHRvbTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOiNCRTY0NjQ7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItYm90dG9tLXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLWxlZnQtY29sb3I6I0JFNjQ2NDtib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvci5wbGFjZS1yaWdodDphZnRlcntib3JkZXItcmlnaHQtY29sb3I6I0JFNjQ2NDtib3JkZXItcmlnaHQtc3R5bGU6c29saWQ7Ym9yZGVyLXJpZ2h0LXdpZHRoOjZweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlcntib3JkZXI6MXB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1lcnJvci5ib3JkZXIucGxhY2UtdG9wOmJlZm9yZXtib3JkZXItdG9wOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtZXJyb3IuYm9yZGVyLnBsYWNlLWJvdHRvbTpiZWZvcmV7Ym9yZGVyLWJvdHRvbTo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlci5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItbGVmdDo4cHggc29saWQgI2ZmZn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWVycm9yLmJvcmRlci5wbGFjZS1yaWdodDpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mb3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzMzN0FCN30uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWluZm8ucGxhY2UtdG9wOmFmdGVye2JvcmRlci10b3AtY29sb3I6IzMzN0FCNztib3JkZXItdG9wLXN0eWxlOnNvbGlkO2JvcmRlci10b3Atd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5wbGFjZS1ib3R0b206YWZ0ZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjojMzM3QUI3O2JvcmRlci1ib3R0b20tc3R5bGU6c29saWQ7Ym9yZGVyLWJvdHRvbS13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLWxlZnQtY29sb3I6IzMzN0FCNztib3JkZXItbGVmdC1zdHlsZTpzb2xpZDtib3JkZXItbGVmdC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLnBsYWNlLXJpZ2h0OmFmdGVye2JvcmRlci1yaWdodC1jb2xvcjojMzM3QUI3O2JvcmRlci1yaWdodC1zdHlsZTpzb2xpZDtib3JkZXItcmlnaHQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXJ7Ym9yZGVyOjFweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtdG9wOmJlZm9yZXtib3JkZXItdG9wOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtYm90dG9tOmJlZm9yZXtib3JkZXItYm90dG9tOjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtaW5mby5ib3JkZXIucGxhY2UtbGVmdDpiZWZvcmV7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkICNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1pbmZvLmJvcmRlci5wbGFjZS1yaWdodDpiZWZvcmV7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCAjZmZmfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHR7Y29sb3I6IzIyMjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS10b3A6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO2JvcmRlci10b3Atc3R5bGU6c29saWQ7Ym9yZGVyLXRvcC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS1ib3R0b206YWZ0ZXJ7Ym9yZGVyLWJvdHRvbS1jb2xvcjojZmZmO2JvcmRlci1ib3R0b20tc3R5bGU6c29saWQ7Ym9yZGVyLWJvdHRvbS13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5wbGFjZS1sZWZ0OmFmdGVye2JvcmRlci1sZWZ0LWNvbG9yOiNmZmY7Ym9yZGVyLWxlZnQtc3R5bGU6c29saWQ7Ym9yZGVyLWxlZnQtd2lkdGg6NnB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHQucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXJpZ2h0LWNvbG9yOiNmZmY7Ym9yZGVyLXJpZ2h0LXN0eWxlOnNvbGlkO2JvcmRlci1yaWdodC13aWR0aDo2cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXJ7Ym9yZGVyOjFweCBzb2xpZCAjMjIyfS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnR5cGUtbGlnaHQuYm9yZGVyLnBsYWNlLXRvcDpiZWZvcmV7Ym9yZGVyLXRvcDo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC50eXBlLWxpZ2h0LmJvcmRlci5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1ib3R0b206OHB4IHNvbGlkICMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXIucGxhY2UtbGVmdDpiZWZvcmV7Ym9yZGVyLWxlZnQ6OHB4IHNvbGlkICMyMjJ9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAudHlwZS1saWdodC5ib3JkZXIucGxhY2UtcmlnaHQ6YmVmb3Jle2JvcmRlci1yaWdodDo4cHggc29saWQgIzIyMn0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS10b3B7bWFyZ2luLXRvcDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS10b3A6YmVmb3Jle2JvcmRlci1sZWZ0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym90dG9tOi04cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTEwcHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtdG9wOmFmdGVye2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvdHRvbTotNnB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi04cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtYm90dG9te21hcmdpbi10b3A6MTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1ib3R0b206YmVmb3Jle2JvcmRlci1sZWZ0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0OjEwcHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi04cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTEwcHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtYm90dG9tOmFmdGVye2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O3RvcDotNnB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi04cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtbGVmdHttYXJnaW4tbGVmdDotMTBweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1sZWZ0OmJlZm9yZXtib3JkZXItdG9wOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjZweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotOHB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNXB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLWxlZnQ6YWZ0ZXJ7Ym9yZGVyLXRvcDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgdHJhbnNwYXJlbnQ7cmlnaHQ6LTZweDt0b3A6NTAlO21hcmdpbi10b3A6LTRweH0uX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcC5wbGFjZS1yaWdodHttYXJnaW4tbGVmdDoxMHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwLnBsYWNlLXJpZ2h0OmJlZm9yZXtib3JkZXItdG9wOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjZweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi04cHg7dG9wOjUwJTttYXJnaW4tdG9wOi01cHh9Ll9fcmVhY3RfY29tcG9uZW50X3Rvb2x0aXAucGxhY2UtcmlnaHQ6YWZ0ZXJ7Ym9yZGVyLXRvcDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgdHJhbnNwYXJlbnQ7bGVmdDotNnB4O3RvcDo1MCU7bWFyZ2luLXRvcDotNHB4fS5fX3JlYWN0X2NvbXBvbmVudF90b29sdGlwIC5tdWx0aS1saW5le2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoycHggMHB4O3RleHQtYWxpZ246Y2VudGVyfSc7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2luZGV4LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0VG9vbHRpcCBmcm9tICdyZWFjdC10b29sdGlwJ1xyXG5cclxuY29uc3QgQXV0b0NvbXBsZXRlID0gW1wibmFtZVwiLCBcImVtYWlsXCIsIFwib3JnYW5pemF0aW9uXCIsIFwib25cIl07XHJcbmNvbnN0IFR5cGUgPSBbXCJlbWFpbFwiLCBcImZpbGVcIiwgXCJpbWFnZVwiLCBcInBhc3N3b3JkXCIsIFwidXJsXCJdO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLnByb3BzLmNoZWNrZWQgfHwgZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ2hlY2tib3goKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGNoZWNrZWQ6ICF0aGlzLnN0YXRlLmNoZWNrZWRcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jYih0aGlzLnN0YXRlLmNoZWNrZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jaGVja2VkICYmIG5leHRQcm9wcy5jaGVja2VkICE9IHRoaXMuc3RhdGUuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IG5leHRQcm9wcy5jaGVja2VkXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGlkID0gdGhpcy5wcm9wcy5pZCA/IGBjaHEtJHt0aGlzLnByb3BzLmlkfWAgOiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveFwiPlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0VG9vbHRpcCAvPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGlkPXtpZH1cclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZSB8fCBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuY2hlY2tlZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy50b2dnbGVDaGVja2JveC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPSdjdXN0b20tY29udHJvbC1sYWJlbCBub3NlbGVjdCdcclxuICAgICAgICAgICAgICAgICAgICBmb3I9e2lkfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdGlwPXt0aGlzLnByb3BzLnRvb2x0aXAgfHwgZmFsc2V9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWx9XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtR3JvdXAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBsYWJlbDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5sYWJlbCkge1xyXG4gICAgICAgICAgICBsYWJlbCA9IChcclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPXt0aGlzLnByb3BzLnJlcXVpcmVkID8gXCJyZXF1aXJlZFwiIDogZmFsc2V9IGh0bWxGb3I9eyB0aGlzLnByb3BzLmh0bWxGb3IgfHwgbnVsbH0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5sYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAge2xhYmVsfVxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU2VuZCB0aGUgdmFsdWUgdG8gdGhlIChvcHRpb25hbCkgY2FsbGJhY2tcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYilcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jYihlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXV0b0NvbXBsZXRlKCkge1xyXG4gICAgICAgIGlmIChBdXRvQ29tcGxldGUuaW5jbHVkZXModGhpcy5wcm9wcy5hdXRvQ29tcGxldGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hdXRvQ29tcGxldGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmF1dG9Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRlbFwiO1xyXG4gICAgICAgICAgICBjYXNlIFwicGFzc3dvcmRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImN1cnJlbnQtcGFzc3dvcmRcIjtcclxuICAgICAgICAgICAgY2FzZSBcIm5ld3Bhc3N3b3JkXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJuZXctcGFzc3dvcmRcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9mZlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRUeXBlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy50eXBlKVxyXG4gICAgICAgICAgICB0aHJvdyAnWW91IG11c3QgcHJvdmlkZSBhIHR5cGUgZm9yIHRoZSBpbnB1dCBmaWVsZCc7XHJcblxyXG4gICAgICAgIGlmIChUeXBlLmluY2x1ZGVzKHRoaXMucHJvcHMudHlwZSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnR5cGU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkYXRldGltZS1sb2NhbFwiO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidGV4dFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlICE9IG5leHRQcm9wcy52YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV4dFByb3BzLnZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGlucHV0IGlkPXsgdGhpcy5wcm9wcy5pZCB8fCBmYWxzZSB9XHJcbiAgICAgICAgICAgICAgICB0eXBlPXt0aGlzLmdldFR5cGUoKX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17IHRoaXMucHJvcHMuaW5wdXRDbGFzcyB8fCBcImZvcm0tY29udHJvbFwiIH1cclxuICAgICAgICAgICAgICAgIG5hbWU9eyB0aGlzLnByb3BzLm5hbWUgfHwgZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9eyB0aGlzLnN0YXRlLnZhbHVlIH1cclxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXsgdGhpcy5wcm9wcy5wbGFjZUhvbGRlciB8fCBmYWxzZSB9XHJcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9eyB0aGlzLmdldEF1dG9Db21wbGV0ZSgpIH1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXsgISF0aGlzLnByb3BzLmRpc2FibGVkIH1cclxuICAgICAgICAgICAgICAgIHJlYWRvbmx5PXsgISF0aGlzLnByb3BzLnJlYWRPbmx5IH1cclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkPXsgISF0aGlzLnByb3BzLnJlcXVpcmVkIH1cclxuICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17ICEhdGhpcy5wcm9wcy5hdXRvRm9jdXMgfVxyXG4gICAgICAgICAgICAgICAgbWluTGVuZ3RoPXsgdGhpcy5wcm9wcy5taW5MZW5ndGggfHwgZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXsgdGhpcy5wcm9wcy5tYXhMZW5ndGggfHwgZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICBvblBhc3RlPXt0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlbGVjdCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2UoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU2VuZCB0aGUgdmFsdWUgdG8gdGhlIChvcHRpb25hbCkgY2FsbGJhY2tcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYilcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jYihlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSAhPSBuZXh0UHJvcHMudmFsdWUpXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5leHRQcm9wcy52YWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdE9wdGlvbnM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub3B0aW9ucykge1xyXG4gICAgICAgICAgICBzZWxlY3RPcHRpb25zID0gdGhpcy5wcm9wcy5vcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkICYmIHRoaXMucHJvcHMuc2VsZWN0ZWQudG9Mb3dlckNhc2UoKSA9PSBvcHRpb24udG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPG9wdGlvbiB2YWx1ZT17b3B0aW9ufSBzZWxlY3RlZD17c2VsZWN0ZWR9PntvcHRpb259PC9vcHRpb24+XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHNlbGVjdCBpZD17IHRoaXMucHJvcHMuaWQgfHwgZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXsgdGhpcy5wcm9wcy5pbnB1dENsYXNzIHx8IFwiZm9ybS1jb250cm9sXCIgfVxyXG4gICAgICAgICAgICAgICAgbmFtZT17IHRoaXMucHJvcHMubmFtZSB8fCBmYWxzZSB9XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ICEhdGhpcy5wcm9wcy5kaXNhYmxlZCB9XHJcbiAgICAgICAgICAgICAgICByZWFkb25seT17ICEhdGhpcy5wcm9wcy5yZWFkT25seSB9XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZD17ICEhdGhpcy5wcm9wcy5yZXF1aXJlZCB9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykgfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7c2VsZWN0T3B0aW9uc31cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dEFyZWEgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHZhbHVlOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTZW5kIHRoZSB2YWx1ZSB0byB0aGUgKG9wdGlvbmFsKSBjYWxsYmFja1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNiKVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNiKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBdXRvQ29tcGxldGUoKSB7XHJcbiAgICAgICAgaWYgKEF1dG9Db21wbGV0ZS5pbmNsdWRlcyh0aGlzLnByb3BzLmF1dG9Db21wbGV0ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmF1dG9Db21wbGV0ZTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmF1dG9Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRlbFwiO1xyXG4gICAgICAgICAgICBjYXNlIFwicGFzc3dvcmRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImN1cnJlbnQtcGFzc3dvcmRcIjtcclxuICAgICAgICAgICAgY2FzZSBcIm5ld3Bhc3N3b3JkXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJuZXctcGFzc3dvcmRcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9mZlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnZhbHVlICE9IG5leHRQcm9wcy52YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV4dFByb3BzLnZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENoYXJDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52YWx1ZSAmJiB0aGlzLnN0YXRlLnZhbHVlLmxlbmd0aCA/IHRoaXMuc3RhdGUudmFsdWUubGVuZ3RoIDogMFxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY2hhckxpbWl0O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1heExlbmd0aCkge1xyXG4gICAgICAgICAgICBjaGFyTGltaXQgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkLWJsb2NrIHRleHQtcmlnaHRcIj57dGhpcy5wcm9wcy5tYXhMZW5ndGggLSB0aGlzLmdldENoYXJDb3VudCgpfSBjaGFyYWN0ZXJzIHJlbWFpbmluZzwvc3Bhbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPXt0aGlzLnByb3BzLmlkIHx8IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5pbnB1dENsYXNzIHx8IFwiZm9ybS1jb250cm9sXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lIHx8IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlSG9sZGVyIHx8IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT17dGhpcy5nZXRBdXRvQ29tcGxldGUoKX1cclxuICAgICAgICAgICAgICAgICAgICByb3dzPXt0aGlzLnByb3BzLnJvd3MgfHwgZmFsc2UgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshIXRoaXMucHJvcHMuZGlzYWJsZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHk9eyEhdGhpcy5wcm9wcy5yZWFkT25seX1cclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZD17ISF0aGlzLnByb3BzLnJlcXVpcmVkfVxyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1cz17ISF0aGlzLnByb3BzLmF1dG9Gb2N1c31cclxuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg9e3RoaXMucHJvcHMubWluTGVuZ3RoIHx8IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIG1heExlbmd0aD17dGhpcy5wcm9wcy5tYXhMZW5ndGggfHwgZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAge2NoYXJMaW1pdH1cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIFxyXG4gICAgZ2V0TW9kYWxTaXplKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy5zaXplKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJsYXJnZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibW9kYWwtbGdcIjtcclxuICAgICAgICAgICAgY2FzZSBcInNtYWxsXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJtb2RhbC1zbVwiXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IG1vZGFsSGVhZDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy50aXRsZSkge1xyXG4gICAgICAgICAgICBtb2RhbEhlYWQgPSAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJtb2RhbC10aXRsZVwiPnt0aGlzLnByb3BzLnRpdGxlfTwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgaWQ9e3RoaXMucHJvcHMuaWQgfHwgZmFsc2V9IGNsYXNzTmFtZT1cIm1vZGFsIGZhZGVcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiPiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgbW9kYWwtZGlhbG9nICR7dGhpcy5nZXRNb2RhbFNpemUoKX1gfSByb2xlPVwiZG9jdW1lbnRcIj4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7bW9kYWxIZWFkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgc2V0VGltZW91dCB9IGZyb20gJ3RpbWVycyc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQgfSBmcm9tICcuL0Zvcm1Db250cm9sJztcclxuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuL01vZGFsJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuY29udGVudFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIGxldCB3aWR0aCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMuY29udGVudFJlZi5jdXJyZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHdpZHRoID4gdGhpcy5zdGF0ZS53aWR0aCkge1xyXG4gICAgICAgICAgICBsZXQgeCA9IE1hdGgucm91bmQod2lkdGgpO1xyXG4gICAgICAgICAgICB4ID0gTWF0aC50cnVuYyh4KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHdpZHRoOiB4IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljaygpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYilcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jYigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENsYXNzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmJ0bkNsYXNzIHx8IFwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgIH1cclxuXHJcbiAgICBnZXRUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnR5cGUgfHwgXCJidXR0b25cIjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGVuZGluZykge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gPGkgY2xhc3NOYW1lPVwiZmFyIGZhLXNwaW5uZXItdGhpcmQgZmEtc3BpblwiPjwvaT5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3RoaXMuZ2V0Q2xhc3MoKX1cclxuICAgICAgICAgICAgICAgIHR5cGU9e3RoaXMuZ2V0VHlwZSgpfVxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWQgfHwgdGhpcy5wcm9wcy5wZW5kaW5nfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWluV2lkdGg6IGAke3RoaXMuc3RhdGUud2lkdGh9cHhgIH19XHJcbiAgICAgICAgICAgICAgICByZWY9e3RoaXMuY29udGVudFJlZn1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge2NvbnRlbnR9XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCdG5Hcm91cCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgc2l6ZSgpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuc2l6ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic21cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImJ0bi1ncm91cC1zbVwiO1xyXG4gICAgICAgICAgICBjYXNlIFwibGdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImJ0bi1ncm91cC1sZ1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGBidG4tZ3JvdXAke3RoaXMucHJvcHMuZGlyZWN0aW9uID09ICd2ZXJ0aWNhbCcgPyAnLXZlcnRpY2FsJyA6ICcnfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3M9e2Ake3RoaXMuZGlyZWN0aW9uKCl9ICR7dGhpcy5zaXplKCl9ICR7dGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgJyd9YH0+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZmlybUJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgY29uZmlybVBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBoYWx0OiBmYWxzZSxcclxuICAgICAgICAgICAgd2lkdGg6IDBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICBsZXQgd2lkdGggPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLmNvbnRlbnRSZWYuY3VycmVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcblxyXG4gICAgICAgIGlmICh3aWR0aCA+IHRoaXMuc3RhdGUud2lkdGgpIHtcclxuICAgICAgICAgICAgbGV0IHggPSBNYXRoLnJvdW5kKHdpZHRoKTtcclxuICAgICAgICAgICAgeCA9IE1hdGgudHJ1bmMoeCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogeCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xpY2soZSkge1xyXG4gICAgICAgIC8vIFN0b3BzIHRoZSB1c2VyIGZyb20gZG91YmxlIGNsaWNraW5nXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaGFsdClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBJZiBjb25maXJtIHBlbmRpbmcgY2FsbGJhY2tcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb25maXJtUGVuZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29uZmlybVBlbmRpbmc6IGZhbHNlIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuY2IoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb25maXJtUGVuZGluZzogdHJ1ZSwgaGFsdDogdHJ1ZSB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBDbGVhciBGbGFnc1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhhbHQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgMC41ICogMTAwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbmZpcm1QZW5kaW5nOiBmYWxzZSB9KVxyXG4gICAgICAgICAgICAgICAgfSwgNSAqIDEwMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2xhc3MoKSB7XHJcbiAgICAgICAgbGV0IGNvbmZpcm0gPSB0aGlzLnN0YXRlLmNvbmZpcm1QZW5kaW5nID8gXCJidG4tY29uZmlybVwiIDogXCJcIiA7XHJcbiAgICAgICAgbGV0IGJhc2VDbGFzc2VzID0gdGhpcy5wcm9wcy5idG5DbGFzcyB8fCBcImJ0biBidG4tcHJpbWFyeVwiO1xyXG5cclxuICAgICAgICByZXR1cm4gYCR7YmFzZUNsYXNzZXN9ICR7Y29uZmlybX1gO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGVuZGluZykge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gPGkgY2xhc3NOYW1lPVwiZmFyIGZhLXNwaW5uZXItdGhpcmQgZmEtc3BpblwiPjwvaT5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3RoaXMuZ2V0Q2xhc3MoKX1cclxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGlzYWJsZWQgfHwgdGhpcy5wcm9wcy5wZW5kaW5nfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWluV2lkdGg6IGAke3RoaXMuc3RhdGUud2lkdGh9cHhgIH19XHJcbiAgICAgICAgICAgICAgICByZWY9e3RoaXMuY29udGVudFJlZn1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e2NvbnRlbnR9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICApO1xyXG4gICAgfSAgICBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbmZpcm1Nb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZGlzYWJsZWQ6ICh0aGlzLnByb3BzLmNvbmZpcm1QaHJhc2UpID8gdHJ1ZSA6IGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjb25maXJtZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBIaWRlIHRoZW1vZGFsXHJcbiAgICAgICAgdGhpcy50b2dnbGVNb2RhbCgnaGlkZScpO1xyXG4gICAgICAgIC8vIENhbGxiYWNrIHRoZSBhY3Rpb25cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYilcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jYigpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZU1vZGFsKGUpe1xyXG4gICAgICAgICQoYCNjb25maXJtb2RhbGApLm1vZGFsKGUgPyBlIDogJ3RvZ2dsZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUNvbmZpcm1QaHJhc2UoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBkaXNhYmxlZDogZS50b0xvd2VyQ2FzZSgpICE9IHRoaXMucHJvcHMuY29uZmlybVBocmFzZS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgY29uZmlybVBocmFzZTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jb25maXJtUGhyYXNlKSB7XHJcbiAgICAgICAgICAgIGNvbmZpcm1QaHJhc2UgPSAoXHJcbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QbGVhc2UgdHlwZSBcInt0aGlzLnByb3BzLmNvbmZpcm1QaHJhc2V9XCIgdG8gY29uZmlybS48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwic3RyaW5nXCIgY2I9e3RoaXMudXBkYXRlQ29uZmlybVBocmFzZS5iaW5kKHRoaXMpfS8+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBidG5DbGFzcz17dGhpcy5wcm9wcy5idG5DbGFzcyB8fCAnYnRuIGJ0bi1kYW5nZXInfSBjYj17dGhpcy50b2dnbGVNb2RhbC5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8TW9kYWwgaWQ9e2Bjb25maXJtb2RhbGB9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFyIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlIHByLTNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWxseSB7dGhpcy5wcm9wcy5xdWVzdGlvbi50b0xvd2VyQ2FzZSgpfT9cclxuICAgICAgICAgICAgICAgICAgICA8L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxociBjbGFzc05hbWU9XCJwYi0yXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnByb3BzLmV4cGxhbmF0aW9ufTwvcD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge2NvbmZpcm1QaHJhc2V9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25maXJtQnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgZmxvYXQtcmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUuZGlzYWJsZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy5jb25maXJtZWQuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWN0aW9uVGV4dCB8fCB0aGlzLnByb3BzLnF1ZXN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbmZpcm1CdXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1kYXJrIGZsb2F0LXJpZ2h0IG14LTFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudG9nZ2xlTW9kYWwuYmluZCh0aGlzLCAnaGlkZScpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIElucHV0IH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9Gb3JtQ29udHJvbCc7XHJcblxyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5nZVBhc3N3b3JkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlcXVlc3RGYWlsZWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkczogeyAxOiBudWxsLCAyOiBudWxsIH0sXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhc3N3b3JkQ29tcGFyZXIoaWQsIHZhbCkge1xyXG4gICAgICAgIGxldCBwYXNzd2QgPSB0aGlzLnN0YXRlLnBhc3N3b3JkcztcclxuXHJcbiAgICAgICAgcGFzc3dkID0ge1xyXG4gICAgICAgICAgICAxOiBpZCA9PSAxID8gdmFsIDogcGFzc3dkWzFdLFxyXG4gICAgICAgICAgICAyOiBpZCA9PSAyID8gdmFsIDogcGFzc3dkWzJdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHBhc3N3b3JkczogcGFzc3dkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFzc3dvcmRDb25kaXRpb25zKCkge1xyXG4gICAgICAgIGxldCBjb25kaXRpb25zID0geyBsYWJlbDogXCJcIiwgZGlzYWJsZWQ6IHRydWUgfVxyXG5cclxuICAgICAgICAvLyBOZXcgcGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCBmaXZlIGNoYXJhY3RlcnNcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5wYXNzd29yZHNbMV0gJiYgdGhpcy5zdGF0ZS5wYXNzd29yZHNbMV0ubGVuZ3RoID4gNSkge1xyXG4gICAgICAgICAgICAvLyBQYXNzd29yZCBhbmQgY29uZmlybWF0aW9uIG11c3QgbWF0Y2hcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUucGFzc3dvcmRzWzFdID09IHRoaXMuc3RhdGUucGFzc3dvcmRzWzJdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb25zLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb25zLmxhYmVsID0gXCJZb3VyIG5ldyBwYXNzd29yZHMgZG8gbm90IG1hdGNoXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25kaXRpb25zLmxhYmVsID0gXCJQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IHNpeCBjaGFyYWN0ZXJzXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb25kaXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFjY291bnRQYXNzd29yZChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vcGFzc3dvcmRgLFxyXG4gICAgICAgICAgICBkYXRhOiAkKFwiI3Bhc3N3b3JkXCIpLnNlcmlhbGl6ZSgpXHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwYXNzd2QgPSB7IDE6IDAsIDI6IDAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEZhaWxlZDogXCJcIixcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkczogcGFzc3dkXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJChcIiNwYXNzd29yZFwiKS50cmlnZ2VyKFwicmVzZXRcIik7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEZhaWxlZDogZXJyLnJlc3BvbnNlVGV4dFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtDaGFuZ2VQYXNzd29yZEB1cGRhdGVBY2NvdW50UGFzc3dvcmRdIEVycm9yIHVwZGF0aW5nIHBhc3N3b3JkOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGZvcm0gaWQ9XCJwYXNzd29yZFwiIG9uU3VibWl0PXt0aGlzLnVwZGF0ZUFjY291bnRQYXNzd29yZC5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBsYWJlbD1cIllvdXIgQ3VycmVudCBQYXNzd29yZFwiIGh0bWxGb3I9XCJjdXJyZW50UGFzc3dvcmRcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJjdXJyZW50UGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY3VycmVudFBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBsYWJlbD1cIk5ldyBQYXNzd29yZFwiIGh0bWxGb3I9XCJuZXdQYXNzd29yZFwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cIm5ld1Bhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm5ld1Bhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwibmV3cGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy5wYXNzd29yZENvbXBhcmVyLmJpbmQodGhpcywgMSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJDb25maXJtIE5ldyBQYXNzd29yZFwiIGh0bWxGb3I9XCJjb25maXJtUGFzc3dvcmRcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJjb25maXJtUGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY29uZmlybVBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwibmV3cGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy5wYXNzd29yZENvbXBhcmVyLmJpbmQodGhpcywgMil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtZGFuZ2VyXCI+e3RoaXMucGFzc3dvcmRDb25kaXRpb25zKCkubGFiZWx9PC9zbWFsbD5cclxuICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3NOYW1lPVwidGV4dC1kYW5nZXIgZC1ibG9ja1wiPnt0aGlzLnN0YXRlLnJlcXVlc3RGYWlsZWR9PC9zbWFsbD5cclxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gYnRuQ2xhc3M9XCJidG4gYnRuLXByaW1hcnkgZC1ibG9ja1wiIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17dGhpcy5wYXNzd29yZENvbmRpdGlvbnMoKS5kaXNhYmxlZH0gcGVuZGluZz17dGhpcy5zdGF0ZS5yZXF1ZXN0UGVuZGluZ30+VXBkYXRlIFBhc3N3b3JkPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvQnV0dG9uJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBJbnB1dCB9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvRm9ybUNvbnRyb2wnO1xyXG5cclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5ncyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBhY2NvdW50OiB7XHJcbiAgICAgICAgICAgICAgICBpZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IG51bGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3I6IG51bGxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV4dFByb3BzLmFjY291bnQgJiYgbmV4dFByb3BzLmFjY291bnQgIT0gdGhpcy5zdGF0ZS5hY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBuZXh0UHJvcHMuYWNjb3VudC5pZCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuZXh0UHJvcHMuYWNjb3VudC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBuZXh0UHJvcHMuYWNjb3VudC5lbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogbmV4dFByb3BzLmFjY291bnQucGhvbmVOdW1iZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVZhbChmaWVsZCwgdmFsKSB7XHJcbiAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLnN0YXRlLmFjY291bnQ7XHJcbiAgICAgICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxyXG4gICAgICAgICAgICAgICAgYWNjb3VudC5uYW1lID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiZW1haWxcIjpcclxuICAgICAgICAgICAgICAgIGFjY291bnQuZW1haWwgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJwaG9uZU51bWJlclwiOlxyXG4gICAgICAgICAgICAgICAgYWNjb3VudC5waG9uZU51bWJlciA9IHZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBhY2NvdW50OiBhY2NvdW50XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHVwZGF0ZUFjY291bnQoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9YCxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuYWNjb3VudC5pZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuc3RhdGUuYWNjb3VudC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuc3RhdGUuYWNjb3VudC5lbWFpbCxcclxuICAgICAgICAgICAgICAgIHBob25lOiB0aGlzLnN0YXRlLmFjY291bnQucGhvbmVOdW1iZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtTZXR0aW5nc0B1cGRhdGVBY2NvdW50XSBFcnJvciB1cGRhdGluZyBhY2NvdW50IHNldHRpbmdzOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybSBpZD1cInNldHRpbmdzXCIgb25TdWJtaXQ9e3RoaXMudXBkYXRlQWNjb3VudC5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiQWNjb3VudCBOYW1lXCIgaHRtbEZvcj1cImFjY291bnROYW1lXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cImFjY291bnROYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYWNjb3VudC5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlVmFsLmJpbmQodGhpcywgJ25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJFbWFpbFwiIGh0bWxGb3I9XCJhY2NvdW50RW1haWxcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IGlkPVwiYWNjb3VudEVtYWlsXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJlbWFpbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5hY2NvdW50LmVtYWlsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlVmFsLmJpbmQodGhpcywgJ2VtYWlsJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiUGhvbmUgTnVtYmVyXCIgaHRtbEZvcj1cImFjY291bnRQaG9uZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJhY2NvdW50UGhvbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYWNjb3VudC5waG9uZU51bWJlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cInBob25lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiPXt0aGlzLnVwZGF0ZVZhbC5iaW5kKHRoaXMsICdwaG9uZU51bWJlcicpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG10LTRcIiBwZW5kaW5nPXt0aGlzLnN0YXRlLnJlcXVlc3RQZW5kaW5nfSB0eXBlPVwic3VibWl0XCI+VXBkYXRlIFNldHRpbmdzPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDaGVja2JveCB9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvRm9ybUNvbnRyb2wnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZpY2F0aW9ucyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICB0b2dnbGVDaGFubmVsKGlkLCBtZXRob2QpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiBtZXRob2QgPyAncG9zdCcgOiAnZGVsZXRlJywvLyBDYWxsYmFjaywgaXMgdGhlIGNoZWNrYm94IGNoZWNrZWQ/XHJcbiAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS9jaGFubmVsLyR7aWR9YFxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgQ29uc29sZS5lcnIoYFtOb3RpZmljYXRpb25zQHRvZ2dsZUNoYW5uZWxdIEVycm9yIGxlYXZpbmcvcmVtb3ZpbmcgYSBub3RpZmljYXRpb24gY2hhbm5lbDogJHtlcnIuUmVzcG9uc2VUZXh0fWApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgYXZhbGlhYmxlQ2hhbm5lbHM7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2hhbm5lbHMpIHtcclxuICAgICAgICAgICAgYXZhbGlhYmxlQ2hhbm5lbHMgPSB0aGlzLnByb3BzLmNoYW5uZWxzLm1hcCgoY2hhbm5lbCwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBncm91cHMgdGhlIHVzZXIgaXMgaW5cclxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucHJvcHMuY2hhbm5lbE1lbWJlcnNoaXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuY2hhbm5lbE1lbWJlcnNoaXBzW2ldID09IGNoYW5uZWwuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgYWN0dWFsIGNoZWNrbWFyay5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94IGlkPXtjaGFubmVsLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17Y2hhbm5lbC5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwPXtjaGFubmVsLmRlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy50b2dnbGVDaGFubmVsLmJpbmQodGhpcywgY2hhbm5lbC5pZCl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICA8cD5TZW5kIG1lIGVtYWlscyB3aGVuLi4uPC9wPlxyXG4gICAgICAgICAgICAgICAge2F2YWxpYWJsZUNoYW5uZWxzfVxyXG4gICAgICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBDaGFuZ2VQYXNzd29yZCBmcm9tICcuL0FjY291bnRTZXR0aW5ncy9DaGFuZ2VQYXNzd29yZCc7XHJcbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuL0FjY291bnRTZXR0aW5ncy9TZXR0aW5ncyc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25DaGFubmVscyBmcm9tICcuL0FjY291bnRTZXR0aW5ncy9Ob3RpZmljYXRpb25zJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbmNvbnN0IGJhc2VVcmkgPSBgL2FkbWluL2FjY291bnRgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudFNldHRpbmdzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBhY2NvdW50OiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vZGF0YWBcclxuICAgICAgICB9KS5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgYWNjb3VudDogZGF0YS5hY2NvdW50LFxyXG4gICAgICAgICAgICAgICAgY2hhbm5lbHM6IGRhdGEuYXZhaWxhYmxlQ2hhbm5lbHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtBY2NvdW50QGdldERhdGFdIEVycm9yIGdldHRpbmcgZGF0YTogYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGFubmVsTWVtYmVyc2hpcHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuYWNjb3VudCA/IHRoaXMuc3RhdGUuYWNjb3VudC5ub3RpZmljYXRpb25DaGFubmVscyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyIHBiLTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+QWNjb3VudCBTZXR0aW5nczwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy00IGNvbC1tZC02IGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXR0aW5ncyBhY2NvdW50PXt0aGlzLnN0YXRlLmFjY291bnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy00IGNvbC1tZC02IGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFuZ2VQYXNzd29yZCBiYXNlVXJpPXtiYXNlVXJpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtNiBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Tm90aWZpY2F0aW9uQ2hhbm5lbHMgYmFzZVVyaT17YmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHM9e3RoaXMuc3RhdGUuY2hhbm5lbHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxNZW1iZXJzaGlwcz17dGhpcy5nZXRDaGFubmVsTWVtYmVyc2hpcHMoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5nZXREYXRhLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X2FjY291bnRTZXR0aW5ncycpKSBcclxuICAgIHJlbmRlcig8QWNjb3VudFNldHRpbmdzIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfYWNjb3VudFNldHRpbmdzJykpOyAgICAiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9Db21wb25lbnRzL0J1dHRvbic7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQgfSBmcm9tICcuLi9Db21wb25lbnRzL0Zvcm1Db250cm9sJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbmNvbnN0IGJhc2VVcmkgPSBcIi9sb2dpblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9naW4gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGxvZ2luRmFpbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgbG9naW5QZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhdHRlbXB0TG9naW4oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGxvZ2luUGVuZGluZzogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX1gLFxyXG4gICAgICAgICAgICBkYXRhOiAkKFwiZm9ybVwiKS5zZXJpYWxpemUoKVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShcIi9hZG1pblwiKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBsb2dpbkZhaWxlZDogZXJyLnJlc3BvbnNlVGV4dCxcclxuICAgICAgICAgICAgICAgIGxvZ2luUGVuZGluZzogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbTG9naW5AYXR0ZW1wdExvZ2luXSBFcnJvciBsb2dnaW5nIGluOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgbG9naW5GYWlsZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9naW5GYWlsZWQpIHtcclxuICAgICAgICAgICAgbG9naW5GYWlsZWQgPSAoXHJcbiAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZGFuZ2VyXCI+e3RoaXMuc3RhdGUubG9naW5GYWlsZWR9PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4tY2xlYW4gdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmF0dGVtcHRMb2dpbi5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwic3Itb25seVwiPkxvZ2luIEZvcm08L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTQgbWItNVwiPkxvZyBJbjwvaDE+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwiZW1haWxcIiBwbGFjZUhvbGRlcj1cIkVtYWlsXCIgYXV0b0NvbXBsZXRlPVwiZW1haWxcIiBhdXRvRm9jdXMgcmVxdWlyZWQvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkXCIgcGxhY2VIb2xkZXI9XCJQYXNzd29yZFwiIGF1dG9Db21wbGV0ZT1cIlBhc3N3b3JkXCIgcmVxdWlyZWQgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge2xvZ2luRmFpbGVkfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPXtgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1ibG9ja2B9IHR5cGU9XCJzdWJtaXRcIiBwZW5kaW5nPXt0aGlzLnN0YXRlLmxvZ2luUGVuZGluZ30+TG9nIEluPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImZvcmdvdFwiIGhyZWY9XCIvcmVzZXQtcGFzc3dvcmRcIj5Gb3Jnb3QgeW91ciBlbWFpbCBvciBwYXNzd29yZD88L2E+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X2xvZ2luJykpXHJcbiAgICByZW5kZXIoPExvZ2luIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfbG9naW4nKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vQ29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIElucHV0IH0gZnJvbSAnLi4vQ29tcG9uZW50cy9Gb3JtQ29udHJvbCc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5jb25zdCBiYXNlVXJpID0gXCIvcmVzZXQtcGFzc3dvcmRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcXVlc3RQYXNzd29yZFJlc2V0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0RmFpbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBlbWFpbFNlbnQ6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF0dGVtcHRSZXF1ZXN0KGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lbWFpbFNlbnQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9YCxcclxuICAgICAgICAgICAgZGF0YTogJChcImZvcm1cIikuc2VyaWFsaXplKClcclxuICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBlbWFpbFNlbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0RmFpbGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0RmFpbGVkOiBlcnIucmVzcG9uc2VUZXh0XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1JlcXVlc3RQYXNzd29yZFJlc2V0QGF0dGVtcHRyZXF1ZXN0XSBFcnJvciByZXF1ZXN0aW5nIG5ldyBwYXNzd29yZDogYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCByZXF1ZXN0RmFpbGVkO1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnJlcXVlc3RGYWlsZWQpIHtcclxuICAgICAgICAgICAgcmVxdWVzdEZhaWxlZCA9IChcclxuICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1kYW5nZXJcIj5Tb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbi48L3A+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVtYWlsU2VudDtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lbWFpbFNlbnQpIHtcclxuICAgICAgICAgICAgZW1haWxTZW50ID0gKFxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXN1Y2Nlc3NcIj5XZSd2ZSBzZW50IHlvdSBhbiBlbWFpbCB3aXRoIGluc3RydWN0aW9ucy4gSXQgbWF5IHRha2UgdXAgdG8gZml2ZSBtaW51dGVzIHRvIGFwcGVhci48L3A+XHJcbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGJ0bl9zdWJtaXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmVtYWlsU2VudCkge1xyXG4gICAgICAgICAgICBidG5fc3VibWl0ID0gKFxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPXtgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1ibG9ja2B9IHR5cGU9XCJzdWJtaXRcIiBwZW5kaW5nPXt0aGlzLnN0YXRlLnJlcXVlc3RQZW5kaW5nfT4gUmVzZXQgTXkgUGFzc3dvcmQ8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luLWNsZWFuIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5hdHRlbXB0UmVxdWVzdC5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwic3Itb25seVwiPlJlcXVlc3QgcGFzc3dvcmQgcmVzZXQgZm9ybTwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRpc3BsYXktNCBtYi01XCI+UGFzc3dvcmQgUmVzZXQ8L2gxPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImVtYWlsXCIgcGxhY2VIb2xkZXI9XCJFbWFpbFwiIGF1dG9Db21wbGV0ZT1cImVtYWlsXCIgYXV0b0ZvY3VzIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtyZXF1ZXN0RmFpbGVkfVxyXG4gICAgICAgICAgICAgICAgICAgIHtlbWFpbFNlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAge2J0bl9zdWJtaXR9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImZvcmdvdFwiIGhyZWY9XCIvbG9naW5cIj5Lbm93IHlvdXIgZGV0YWlscz8gTG9naW4gSGVyZTwvYT5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfcmVxdWVzdFBhc3N3b3JkcmVzZXQnKSlcclxuICAgIHJlbmRlcig8UmVxdWVzdFBhc3N3b3JkUmVzZXQgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF9yZXF1ZXN0UGFzc3dvcmRyZXNldCcpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9Db21wb25lbnRzL0J1dHRvbic7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQgfSBmcm9tICcuLi9Db21wb25lbnRzL0Zvcm1Db250cm9sJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNldFBhc3N3b3JkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0RmFpbGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgYXR0ZW1wdFJlcXVlc3QoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt3aW5kb3cubG9jYXRpb24uaHJlZn1gLFxyXG4gICAgICAgICAgICBkYXRhOiAkKFwiZm9ybVwiKS5zZXJpYWxpemUoKVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKFwiL2xvZ2luXCIpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RGYWlsZWQ6IGVyci5yZXNwb25zZVRleHRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZXNldFBhc3N3b3JkQGF0dGVtcHRSZXF1ZXN0XSBFcnJvciBjaGFuZ2luZyBwYXNzd29yZDogYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHJlcXVlc3RGYWlsZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVxdWVzdEZhaWxlZCkge1xyXG4gICAgICAgICAgICByZXF1ZXN0RmFpbGVkID0gKFxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlclwiPnt0aGlzLnN0YXRlLnJlcXVlc3RGYWlsZWR9PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4tY2xlYW4gdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmF0dGVtcHRSZXF1ZXN0LmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJzci1vbmx5XCI+TmV3IGVtYWlsIHBhc3N3b3JkIGZvcm08L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTQgbWItNVwiPk5ldyBQYXNzd29yZDwvaDE+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwiZW1haWxcIiBwbGFjZUhvbGRlcj1cIkVtYWlsXCIgYXV0b0NvbXBsZXRlPVwiZW1haWxcIiBhdXRvRm9jdXMgcmVxdWlyZWQgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzd29yZFwiIHBsYWNlSG9sZGVyPVwiTmV3IFBhc3N3b3JkXCIgYXV0b0NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgbWluTGVuZ3RoPVwiNlwiIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc3N3b3JkQ29uZmlybVwiIHBsYWNlSG9sZGVyPVwiUmV0eXBlIFBhc3N3b3JkXCIgYXV0b0NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgbWluTGVuZ3RoPVwiNlwiIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtyZXF1ZXN0RmFpbGVkfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPXtgYnRuIGJ0bi1wcmltYXJ5IGJ0bi1ibG9ja2B9IHR5cGU9XCJzdWJtaXRcIiBwZW5kaW5nPXt0aGlzLnN0YXRlLnJlcXVlc3RQZW5kaW5nfT4gUmVzZXQgTXkgUGFzc3dvcmQ8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfcmVzZXRQYXNzd29yZCcpKVxyXG4gICAgcmVuZGVyKDxSZXNldFBhc3N3b3JkIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfcmVzZXRQYXNzd29yZCcpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9Db21wb25lbnRzL0J1dHRvbic7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQgfSBmcm9tICcuLi9Db21wb25lbnRzL0Zvcm1Db250cm9sJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbmNvbnN0IGJhc2VVcmkgPSBcIi9yZWdpc3RlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnaXN0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RGYWlsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXR0ZW1wdFJlZ2lzdHJhdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICB1cmw6IGAke2Jhc2VVcml9YCxcclxuICAgICAgICAgICAgZGF0YTogJChcIiNyZWdpc3RlclwiKS5zZXJpYWxpemUoKVxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShcIi9hZG1pbi1wb3J0YWwvdXNlcnNcIik7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEZhaWxlZDogZXJyLnJlc3BvbnNlVGV4dCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtSZWdpc3RlckBhdHRlbXB0TG9naW5dIEVycm9yIHJlZ2lzdGVyaW5nIG5ldyBhY2NvdW50OiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgaGVscGVyTGFiZWwgPSAoXHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZGFya1wiPlxyXG4gICAgICAgICAgICAgICAgVGhlIHVzZXIgd2lsbCBiZSBlbWFpbGVkIHRoZWlyIGxvZ2luIGluZm9ybWF0aW9uLlxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVxdWVzdEZhaWxlZCkge1xyXG4gICAgICAgICAgICBoZWxwZXJMYWJlbCA9IChcclxuICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1kYW5nZXJcIj57dGhpcy5zdGF0ZS5yZXF1ZXN0RmFpbGVkfTwvcD5cclxuICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luLWNsZWFuIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybSBpZD1cInJlZ2lzdGVyXCIgb25TdWJtaXQ9e3RoaXMuYXR0ZW1wdFJlZ2lzdHJhdGlvbi5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwic3Itb25seVwiPkxvZ2luIEZvcm08L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJkaXNwbGF5LTQgbWItNVwiPkNyZWF0ZSBhIE5ldyBVc2VyPC9oMT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cIm5hbWVcIiBwbGFjZUhvbGRlcj1cIk5hbWVcIiBhdXRvQ29tcGxldGU9XCJuYW1lXCIgYXV0b0ZvY3VzIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwiZW1haWxcIiBwbGFjZUhvbGRlcj1cIkVtYWlsXCIgYXV0b0NvbXBsZXRlPVwiZW1haWxcIiByZXF1aXJlZCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7aGVscGVyTGFiZWx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gYnRuQ2xhc3M9e2BidG4gYnRuLXByaW1hcnkgYnRuLWJsb2NrYH0gdHlwZT1cInN1Ym1pdFwiIHBlbmRpbmc9e3RoaXMuc3RhdGUucmVxdWVzdFBlbmRpbmd9PkNyZWF0ZSBBY2NvdW50PC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X3JlZ2lzdGVyJykpXHJcbiAgICByZW5kZXIoPFJlZ2lzdGVyIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfcmVnaXN0ZXInKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBJbnB1dCB9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvRm9ybUNvbnRyb2wnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1haWwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY29udHJvbDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09IFwidmlld1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sLXBsYWludGV4dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IGRpc2FibGVkIC8+XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udHJvbCA9IDxJbnB1dCBpZD17YGVtYWlsX3VzZXI6JHt0aGlzLnByb3BzLmFjY291bnRJZH1gfSB0eXBlPVwiZW1haWxcIiBhdXRvQ29tcGxldGU9XCJlbWFpbFwiIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBjYj17dGhpcy5wcm9wcy5jYn0gLz5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBlcnJvcjtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5lcnJvcikge1xyXG4gICAgICAgICAgICBlcnJvciA9IDxzbWFsbCBjbGFzc05hbWU9XCJ0ZXh0LWRhbmdlclwiPnt0aGlzLnByb3BzLmVycm9yfTwvc21hbGw+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiRW1haWxcIiBodG1sRm9yPXtgZW1haWxfdXNlcjoke3RoaXMucHJvcHMuYWNjb3VudElkfWB9IHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAge2NvbnRyb2x9XHJcbiAgICAgICAgICAgICAgICB7ZXJyb3J9XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQgfSBmcm9tICcuLi8uLi9Db21wb25lbnRzL0Zvcm1Db250cm9sJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBob25lIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGNvbnRyb2w7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PSBcInZpZXdcIikge1xyXG4gICAgICAgICAgICBjb250cm9sID0gPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbC1wbGFpbnRleHRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBkaXNhYmxlZCAvPlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSA8SW5wdXQgaWQ9e2BwaG9uZV91c2VyOiR7dGhpcy5wcm9wcy5hY2NvdW50SWR9YH0gdHlwZT1cInRleHRcIiBhdXRvQ29tcGxldGU9XCJwaG9uZVwiIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfSBjYj17dGhpcy5wcm9wcy5jYn0gLz4gICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiUGhvbmVcIiBodG1sRm9yPXtgcGhvbmVfdXNlcjoke3RoaXMucHJvcHMuYWNjb3VudElkfWB9PlxyXG4gICAgICAgICAgICAgICAge2NvbnRyb2x9XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgU2VsZWN0IH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9Gb3JtQ29udHJvbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0dXMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY29udHJvbDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09IFwidmlld1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sLXBsYWludGV4dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IGRpc2FibGVkIC8+XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udHJvbCA9IDxTZWxlY3QgaWQ9e2BzdGF0dXNfdXNlcjoke3RoaXMucHJvcHMuYWNjb3VudElkfWB9IG9wdGlvbnM9e1tcIkFjdGl2ZVwiLCBcIkluYWN0aXZlXCJdfSBzZWxlY3RlZD17dGhpcy5wcm9wcy52YWx1ZX0gY2I9e3RoaXMucHJvcHMuY2J9IC8+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiU3RhdHVzXCIgaHRtbEZvcj17YHN0YXR1c191c2VyOiR7dGhpcy5wcm9wcy5hY2NvdW50SWR9YH0+XHJcbiAgICAgICAgICAgICAgICB7Y29udHJvbH1cclxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVzdGFtcHMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5BY2NvdW50IENyZWF0ZWQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnByb3BzLnRpbWVzdGFtcHMuc2lnbnVwfTwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkxhc3QgTG9naW48L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPnt0aGlzLnByb3BzLnRpbWVzdGFtcHMubGFzdExvZ2lufTwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFuZWwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgXHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBjYXJkSGVhZDtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYXJkSGVhZCkge1xyXG4gICAgICAgICAgICBjYXJkSGVhZCA9IChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibWItMFwiPnt0aGlzLnByb3BzLmNhcmRIZWFkfTwvaDU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNhcmRGb290O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNhcmRGb290KSB7XHJcbiAgICAgICAgICAgIGNhcmRGb290ID0gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNhcmRGb290fVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAge2NhcmRIZWFkfVxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIHtjYXJkRm9vdH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBpc0V4dGVybmFsVXJsKGhyZWYpIHtcclxuICAgIGlmICghaHJlZikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgaHlwZXJsaW5rIGlzIGV4dGVybmFsLCBhZGQgYW4gaWNvbiB0byB0aGUgZW5kIG9mIHRoZSB0ZXh0XHJcbiAgICByZXR1cm4gaHJlZi5pbmNsdWRlcyhcImh0dHA6Ly9cIikgfHwgaHJlZi5pbmNsdWRlcyhcImh0dHBzOi8vXCIpICYmICFocmVmLmluY2x1ZGVzKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSk7XHJcbn1cclxuXHJcbi8vIFZhbGlkYXRlIGVtYWlsIHN0cmluZyBhZ2FpbnN0IFJGQzI4MjJcclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW1haWwoYWRkcmVzcykge1xyXG4gICAgdmFyIHJlZ2V4ID0gUmVnRXhwKFwiW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XCIpO1xyXG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoYWRkcmVzcyk7XHJcbn1cclxuXHJcbi8vIFJldHVybnMgYSBnb29nbGUgbWFwcyBBUEkgdXJsLiBJZiB0aGUgbWFwIGltYmVlZCBpcyBwcm92aWRlZCB0aGF0IGlzIHN0cmlwcGVkLlxyXG5leHBvcnQgZnVuY3Rpb24gUHJlcGFyZUdvb2dsZU1hcHNVcmwodXJsKSB7XHJcbiAgICBsZXQgcyA9IHVybC5zcGxpdCgnICcpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBcInNyY1wiIGF0dHJpYnV0ZSwgcmV0dXJuIHRoZSBVUkwgd2l0aGluIGl0XHJcbiAgICAgICAgaWYgKHNbaV0uaW5jbHVkZXMoXCJzcmM9XCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzW2ldLnNwbGl0KCdcIicpWzFdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PSBzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBCdXR0b24sIENvbmZpcm1CdXR0b24gfSBmcm9tICcuLi8uLi9Db21wb25lbnRzL0J1dHRvbic7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5jb25zdCBNb2RlID0ge1xyXG4gICAgVmlldzogJ3ZpZXcnLFxyXG4gICAgRWRpdDogJ2VkaXQnXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEZWxldGVVc2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBEZWxldGVVc2VyKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogdHJ1ZVxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9LyR7dGhpcy5wcm9wcy5hY2NvdW50SWR9YFxyXG4gICAgICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0RlbGV0ZVVzZXJARGVsZXRlVXNlcl0gRXJyb3IgZGVsZXRpbmcgdGhlIGFjY291bnQ6IGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Q29uZmlybUJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4tZGFuZ2VyIG10LTMgbXgtMVwiIGNiPXt0aGlzLkRlbGV0ZVVzZXIuYmluZCh0aGlzKX0gcGVuZGluZz17dGhpcy5zdGF0ZS5yZXF1ZXN0UGVuZGluZ30+XHJcbiAgICAgICAgICAgICAgICBEZWxldGUgVXNlciA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdXNlci10aW1lc1wiPjwvaT5cclxuICAgICAgICAgICAgPC9Db25maXJtQnV0dG9uPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlc2V0UGFzc3dvcmQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIFJlc2V0UGFzc3dvcmQoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIFwicmVxdWVzdFBlbmRpbmdcIjogdHJ1ZVxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdwYXRjaCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vJHt0aGlzLnByb3BzLmFjY291bnRJZH1gXHJcbiAgICAgICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUmVzZXRQYXNzd29yZEBSZXNldFBhc3N3b3JkXSBFcnJvciBmbGFnZ2luZyBhY2NvdW50IGZvciBhIHBhc3N3b3JkIHJlc2V0OiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPENvbmZpcm1CdXR0b24gYnRuQ2xhc3M9XCJidG4gYnRuLWRhcmsgbXQtMyBteC0xXCIgY2I9e3RoaXMuUmVzZXRQYXNzd29yZC5iaW5kKHRoaXMpfSBwZW5kaW5nPXt0aGlzLnN0YXRlLnJlcXVlc3RQZW5kaW5nfT5cclxuICAgICAgICAgICAgICAgIFJlc2V0IFBhc3N3b3JkIDxpIGNsYXNzTmFtZT1cImZhcyBmYS11c2VyLWxvY2tcIj48L2k+XHJcbiAgICAgICAgICAgIDwvQ29uZmlybUJ1dHRvbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0gIFxyXG5cclxuZXhwb3J0IGNsYXNzIEVkaXRCdXR0b25zIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgYnV0dG9ucztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09IE1vZGUuVmlldykge1xyXG4gICAgICAgICAgICBidXR0b25zID0gKFxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4taW5mbyBidG4tc21cIiBjYj17dGhpcy5wcm9wcy5zZXRNb2RlQ2IuYmluZCh0aGlzLCBNb2RlLkVkaXQpfT5cclxuICAgICAgICAgICAgICAgICAgICBFZGl0IDxpIGNsYXNzTmFtZT1cImZhcyBmYS1wZW5jaWxcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1dHRvbnMgPSAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJncm91cFwiIGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC1zbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb25maXJtQnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIiBjYj17dGhpcy5wcm9wcy5jYW5jZWxDYi5iaW5kKHRoaXMpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2FuY2VsIDxpIGNsYXNzTmFtZT1cImZhcyBmYS10aW1lc1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbmZpcm1CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4tc3VjY2Vzc1wiIGNiPXt0aGlzLnByb3BzLnVwZGF0ZUNiLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTYXZlIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1jaGVja1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBwYi0yXCI+XHJcbiAgICAgICAgICAgICAgICB7YnV0dG9uc31cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBFbWFpbCBmcm9tICcuL0VtYWlsJztcclxuaW1wb3J0IFBob25lIGZyb20gJy4vUGhvbmUnO1xyXG5pbXBvcnQgU3RhdHVzIGZyb20gJy4vU3RhdHVzJztcclxuaW1wb3J0IFRpbWVzdGFtcHMgZnJvbSAnLi9UaW1lc3RhbXBzJztcclxuaW1wb3J0IFBhbmVsIGZyb20gJy4uLy4uL0NvbXBvbmVudHMvUGFuZWwnO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZUVtYWlsIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycyc7XHJcbmltcG9ydCB7IERlbGV0ZVVzZXIsIFJlc2V0UGFzc3dvcmQsIEVkaXRCdXR0b25zIH0gZnJvbSAnLi9BY2NvdW50QnRucyc7XHJcblxyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuXHJcbmNvbnN0IE1vZGUgPSB7XHJcbiAgICBWaWV3OiAndmlldycsXHJcbiAgICBFZGl0OiAnZWRpdCdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudENhcmQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIG1vZGU6IE1vZGUuVmlldyxcclxuICAgICAgICAgICAgYWNjb3VudDogXy5jbG9uZURlZXAodGhpcy5wcm9wcy5hY2NvdW50KSxcclxuICAgICAgICAgICAgZXJyb3I6IG51bGxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlVmFsKGZpZWxkLCB2YWwpIHtcclxuICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuc3RhdGUuYWNjb3VudDtcclxuICAgICAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbFwiOlxyXG4gICAgICAgICAgICAgICAgYWNjb3VudC5lbWFpbCA9IHZhbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcclxuICAgICAgICAgICAgICAgIGFjY291bnQucGhvbmVOdW1iZXIgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0YXR1c1wiOlxyXG4gICAgICAgICAgICAgICAgYWNjb3VudC5hY3RpdmUgPSAodmFsID09IFwiQWN0aXZlXCIpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBhY2NvdW50OiBhY2NvdW50XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TW9kZSh4KSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIG1vZGU6IHhcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIG1vZGU6IE1vZGUuVmlldyxcclxuICAgICAgICAgICAgYWNjb3VudDogXy5jbG9uZURlZXAodGhpcy5wcm9wcy5hY2NvdW50KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFjY291bnQoKSB7XHJcbiAgICAgICAgLy8gVmFsaWRhdGVcclxuICAgICAgICBpZiAoIXZhbGlkYXRlRW1haWwodGhpcy5zdGF0ZS5hY2NvdW50LmVtYWlsKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCJcclxuICAgICAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHt0aGlzLnN0YXRlLmFjY291bnQuZW1haWx9IGlzIG5vdCBhbiBSRkMyODIyIGNvbXBsaWFudCBlbWFpbCBhZGRyZXNzLmApXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncHV0JyxcclxuICAgICAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS8ke3RoaXMuc3RhdGUuYWNjb3VudC5pZH1gLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLnN0YXRlLmFjY291bnQuZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHRoaXMuc3RhdGUuYWNjb3VudC5waG9uZU51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdGUuYWNjb3VudC5hY3RpdmVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IE1vZGUuVmlldyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0FjY291bnRDYXJkQHVwZGF0ZUFjY291bnRdIEVycm9yIHVwZGF0aW5nIGFjY291bnQgZGF0YTogYCwgZXJyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtNiBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgIDxQYW5lbCBvblN1Ym1pdD17dGhpcy51cGRhdGVBY2NvdW50LmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInRleHQtY2VudGVyXCI+e3RoaXMuc3RhdGUuYWNjb3VudC5uYW1lIHx8IFwiXCJ9PC9oND5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8RWRpdEJ1dHRvbnMgbW9kZT17dGhpcy5zdGF0ZS5tb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRNb2RlQ2I9e3RoaXMuc2V0TW9kZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxDYj17dGhpcy5jYW5jZWwuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2I9e3RoaXMudXBkYXRlQWNjb3VudC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxFbWFpbCBtb2RlPXt0aGlzLnN0YXRlLm1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFjY291bnQuZW1haWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRJZD17dGhpcy5wcm9wcy5hY2NvdW50SWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXt0aGlzLnN0YXRlLmVycm9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy51cGRhdGVWYWwuYmluZCh0aGlzLCAnZW1haWwnKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8UGhvbmUgbW9kZT17dGhpcy5zdGF0ZS5tb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5hY2NvdW50LnBob25lTnVtYmVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50SWQ9e3RoaXMucHJvcHMuYWNjb3VudC5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlVmFsLmJpbmQodGhpcywgJ3Bob25lJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cyBtb2RlPXt0aGlzLnN0YXRlLm1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFjY291bnQuYWN0aXZlID8gXCJBY3RpdmVcIiA6IFwiSW5hY3RpdmVcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudElkPXt0aGlzLnByb3BzLmFjY291bnQuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiPXt0aGlzLnVwZGF0ZVZhbC5iaW5kKHRoaXMsICdzdGF0dXMnKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8VGltZXN0YW1wcyB0aW1lc3RhbXBzPXt0aGlzLnN0YXRlLmFjY291bnQudGltZXN0YW1wc30vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8UmVzZXRQYXNzd29yZCBhY2NvdW50SWQ9e3RoaXMucHJvcHMuYWNjb3VudC5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVyaT17dGhpcy5wcm9wcy5iYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLnByb3BzLnV9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPERlbGV0ZVVzZXIgYWNjb3VudElkPXt0aGlzLnByb3BzLmFjY291bnQuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e3RoaXMucHJvcHMuYmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5wcm9wcy51fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+ICAgIFxyXG4gICAgICAgICAgICAgICAgPC9QYW5lbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBBY2NvdW50Q2FyZCBmcm9tICcuL01hbmFnZVVzZXJzL0FjY291bnRDYXJkJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcblxyXG5jb25zdCBiYXNlVXJpID0gYC9hZG1pbi91c2Vyc2A7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VycyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgYWNjb3VudHM6IG51bGwsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vZGF0YWBcclxuICAgICAgICB9KS5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY2NvdW50czogbnVsbCB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYWNjb3VudHM6IGRhdGEgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbVXNlckBnZXREYXRhXSBFcnJvciBnZXR0aW5nIGRhdGE6IGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBhY2NvdW50cztcclxuICAgICAgICBpZih0aGlzLnN0YXRlLmFjY291bnRzKSB7XHJcbiAgICAgICAgICAgIGFjY291bnRzID0gdGhpcy5zdGF0ZS5hY2NvdW50cy5tYXAoKGFjY291bnQsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxBY2NvdW50Q2FyZCBhY2NvdW50PXthY2NvdW50fVxyXG4gICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e2Jhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPk1hbmFnZSBVc2VyczwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgQWN0aXZlIGFjY291bnRzIGhhdmUgYWNjZXNzIHRvIGFsbCBmdW5jdGlvbnMsIDxhIGhyZWY9XCIvcmVnaXN0ZXJcIj5jbGljayBoZXJlPC9hPiB0byByZWdpc3RlciBhIG5ldyBhY2NvdW50LlxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIHthY2NvdW50c31cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF91c2VycycpKVxyXG4gICAgcmVuZGVyKDxVc2VycyAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X3VzZXJzJykpOyAgICAiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuXHJcbmNvbnN0IGJhc2VVcmkgPSBgL2FkbWluL3dlYi9wYWdlc2A7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgcGFnZXM6IG51bGwsXHJcbiAgICAgICAgICAgIGZpbHRlcjogXCJtYWluXCJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfUGFnZXNEaXJlY3RvcnknKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBgRmFpbGVkIHRvIGF0dGFjaCBjb21wb25lbnQuIEF0dHJpYnV0ZSAnZGF0YS1maWx0ZXInIHdhcyBub3QgZm91bmRgO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGZpbHRlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X1BhZ2VzRGlyZWN0b3J5JykuZ2V0QXR0cmlidXRlKFwiZGF0YS1maWx0ZXJcIilcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vZGF0YT9maWx0ZXI9JHt0aGlzLnN0YXRlLmZpbHRlcn1gXHJcbiAgICAgICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwYWdlczogZGF0YSB9KTtcclxuICAgICAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgfSk7ICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5QYWdlczwvaDE+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfUGFnZXNEaXJlY3RvcnknKSlcclxuICAgIHJlbmRlcig8UGFnZXMgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF9QYWdlc0RpcmVjdG9yeScpKTsgICAgIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBJbnB1dCwgVGV4dEFyZWEgfSBmcm9tICcuLi8uLi9Db21wb25lbnRzL0Zvcm1Db250cm9sJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgeyBQcmVwYXJlR29vZ2xlTWFwc1VybCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250YWN0SW5mb3JtYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGNvbnRhY3Q6IHRoaXMucHJvcHMuY29udGFjdCxcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XHJcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jb250YWN0ICE9IHRoaXMuc3RhdGUuY29udGFjdCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGNvbnRhY3Q6IG5leHRQcm9wcy5jb250YWN0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdGF0ZShmaWVsZCwgdmFsKSB7XHJcbiAgICAgICAgbGV0IGNvbnRhY3QgPSB0aGlzLnN0YXRlLmNvbnRhY3Q7XHJcbiAgICAgICAgc3dpdGNoIChmaWVsZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiZW1haWwuZ2VuZXJhbFwiOlxyXG4gICAgICAgICAgICAgICAgY29udGFjdC5lbWFpbC5nZW5lcmFsID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbC5ib29raW5nc1wiOlxyXG4gICAgICAgICAgICAgICAgY29udGFjdC5lbWFpbC5ib29raW5ncyA9IHZhbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcclxuICAgICAgICAgICAgICAgIGNvbnRhY3QucGhvbmUgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInVybC5mYWNlYm9va1wiOlxyXG4gICAgICAgICAgICAgICAgY29udGFjdC51cmxzLmZhY2Vib29rID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1cmwuZ29vZ2xlUGxheVwiOlxyXG4gICAgICAgICAgICAgICAgY29udGFjdC51cmxzLmdvb2dsZVBsYXkgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInVybC5nb29nbGVNYXBzXCI6XHJcbiAgICAgICAgICAgICAgICBjb250YWN0LnVybHMuZ29vZ2xlTWFwcyA9IHZhbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibWlzc2lvblN0YXRlbWVudFwiOlxyXG4gICAgICAgICAgICAgICAgY29udGFjdC5taXNzaW9uU3RhdGVtZW50ID0gdmFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGNvbnRhY3Q6IGNvbnRhY3RcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdWJtaXRGb3JtKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogdHJ1ZVxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS9jb250YWN0YCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsR2VuZXJhbDogdGhpcy5zdGF0ZS5jb250YWN0LmVtYWlsLmdlbmVyYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsQm9va2luZ3M6IHRoaXMuc3RhdGUuY29udGFjdC5lbWFpbC5ib29raW5ncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHRoaXMuc3RhdGUuY29udGFjdC5waG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsRmFjZWJvb2s6IHRoaXMuc3RhdGUuY29udGFjdC51cmxzLmZhY2Vib29rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxHb29nbGVQbGF5OiB0aGlzLnN0YXRlLmNvbnRhY3QudXJscy5nb29nbGVQbGF5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxHb29nbGVNYXBzOiB0aGlzLnN0YXRlLmNvbnRhY3QudXJscy5nb29nbGVNYXBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW9uU3RhdGVtZW50OiB0aGlzLnN0YXRlLmNvbnRhY3QubWlzc2lvblN0YXRlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbQ29udGFjdEluZm9ybWF0aW9uQHN1Ym1pdEZvcm1dIEVycm9yIHVwZGF0aW5nIHNpdGUgc2V0dGluZ3MgKGNvbnRhY3QgaW5mb3JtYXRpb24pOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInJvd1wiIG9uU3VibWl0PXt0aGlzLnN1Ym1pdEZvcm0uYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxHZW5lcmFsRW1haWwgZW1haWw9e3RoaXMuc3RhdGUuY29udGFjdC5lbWFpbC5nZW5lcmFsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy51cGRhdGVTdGF0ZS5iaW5kKHRoaXMsICdlbWFpbC5nZW5lcmFsJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPEJvb2tpbmdFbWFpbCBlbWFpbD17dGhpcy5zdGF0ZS5jb250YWN0LmVtYWlsLmJvb2tpbmdzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy51cGRhdGVTdGF0ZS5iaW5kKHRoaXMsICdlbWFpbC5ib29raW5ncycpfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxQaG9uZSBudW1iZXI9e3RoaXMuc3RhdGUuY29udGFjdC5waG9uZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlU3RhdGUuYmluZCh0aGlzLCAncGhvbmUnKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8TWlzc2lvblN0YXRtZW50IHRleHQ9e3RoaXMuc3RhdGUuY29udGFjdC5taXNzaW9uU3RhdGVtZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYj17dGhpcy51cGRhdGVTdGF0ZS5iaW5kKHRoaXMsICdtaXNzaW9uU3RhdGVtZW50Jyl9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFVybEZhY2Vib29rIHVybD17dGhpcy5zdGF0ZS5jb250YWN0LnVybHMuZmFjZWJvb2t9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiPXt0aGlzLnVwZGF0ZVN0YXRlLmJpbmQodGhpcywgJ3VybC5mYWNlYm9vaycpfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxVcmxHb29nbGVQbGF5IHVybD17dGhpcy5zdGF0ZS5jb250YWN0LnVybHMuZ29vZ2xlUGxheX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlU3RhdGUuYmluZCh0aGlzLCAndXJsLmdvb2dsZVBsYXknKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8VXJsR29vZ2xlTWFwIHVybD17dGhpcy5zdGF0ZS5jb250YWN0LnVybHMuZ29vZ2xlTWFwc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2I9e3RoaXMudXBkYXRlU3RhdGUuYmluZCh0aGlzLCAndXJsLmdvb2dsZU1hcHMnKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiJiM4MjkxO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGQtYmxvY2tcIiB0eXBlPVwic3VibWl0XCIgcGVuZGluZz17dGhpcy5zdGF0ZS5yZXF1ZXN0UGVuZGluZ30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGUgU2V0dGluZ3MgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNoZWNrLWNpcmNsZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmFsRW1haWwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJFbWFpbDogKEdlbmVyYWwgRW5xdWlyaWVzKVwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJlbWFpbFwiIHZhbHVlPXt0aGlzLnByb3BzLmVtYWlsfSBjYj17dGhpcy5wcm9wcy5jYi5iaW5kKHRoaXMpfS8+XHJcbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3NOYW1lPVwidGV4dC1tdXRlZCBwbC0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWVudmVsb3BlXCI+PC9pPiBVc2VkIGJ5IHRoZSBjb250YWN0IHVzIGVtYWlsIGZvcm0sIHRoZSBmb290ZXIgJmFtcDsgaW4gdGhlIGVtYWlscy5cclxuICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvb2tpbmdFbWFpbCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZvcm1Hcm91cCBsYWJlbD1cIkVtYWlsOiAoQm9va2luZyBFbnF1aXJpZXMpXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cImVtYWlsXCIgdmFsdWU9e3RoaXMucHJvcHMuZW1haWx9IGNiPXt0aGlzLnByb3BzLmNiLmJpbmQodGhpcyl9Lz5cclxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIHBsLTJcIj5cclxuICAgICAgICAgICAgICAgICAgICBVc2VkIGJ5IHRoZSBjb250YWN0IHVzIGZvcm0uXHJcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD4gXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWlzc2lvblN0YXRtZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Rm9ybUdyb3VwIGxhYmVsPVwiTWlzc2lvbiBTdGF0ZW1lbnRcIiByZXF1aXJlZD5cclxuICAgICAgICAgICAgICAgIDxUZXh0QXJlYSBtYXhMZW5ndGg9XCIyMDBcIiB2YWx1ZT17dGhpcy5wcm9wcy50ZXh0fSBjYj17dGhpcy5wcm9wcy5jYi5iaW5kKHRoaXMpfSAvPlxyXG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICApIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGhvbmUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJQaG9uZTpcIj5cclxuICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwicGhvbmVcIiB2YWx1ZT17dGhpcy5wcm9wcy5udW1iZXJ9IGNiPXt0aGlzLnByb3BzLmNiLmJpbmQodGhpcyl9Lz5cclxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIHBsLTJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtcGhvbmVcIj48L2k+IFVzZWQgaW4gdGhlIGZvb3RlciAmYW1wOyBpbiBlbWFpbHMuXHJcbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcmxGYWNlYm9vayBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZvcm1Hcm91cCBsYWJlbD1cIkZhY2Vib29rIFBhZ2UgVVJMOlwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ1cmxcIiB2YWx1ZT17dGhpcy5wcm9wcy51cmx9IGNiPXt0aGlzLnByb3BzLmNiLmJpbmQodGhpcyl9IHBsYWNlSG9sZGVyPVwiZS5nLiBodHRwczovL2V4YW1wbGUuY29tXCIvPlxyXG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQgcGwtMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFiIGZhLWZhY2Vib29rLXNxdWFyZVwiPjwvaT4gVXNlZCBpbiB0aGUgZm9vdGVyICZhbXA7IGluIGVtYWlscy5cclxuICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVybEdvb2dsZVBsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJEaXNjb3ZlciBEZWVwIENvdmUgLSBBcHAgVVJMOlwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ1cmxcIiB2YWx1ZT17dGhpcy5wcm9wcy51cmx9IGNiPXt0aGlzLnByb3BzLmNiLmJpbmQodGhpcyl9IHBsYWNlSG9sZGVyPVwiZS5nLiBodHRwczovL2V4YW1wbGUuY29tXCIvPlxyXG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQgcGwtMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhYiBmYS1nb29nbGUtcGxheVwiPjwvaT4gVXNlZCBpbiB0aGUgZm9vdGVyICZhbXA7IGluIGVtYWlscy5cclxuICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVybEdvb2dsZU1hcCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBoYW5kbGVJbnB1dChpKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5jYihQcmVwYXJlR29vZ2xlTWFwc1VybChpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxGb3JtR3JvdXAgbGFiZWw9XCJHb29nbGUgTWFwcyAtIFVSTFwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ1cmxcIiB2YWx1ZT17dGhpcy5wcm9wcy51cmx9IGNiPXt0aGlzLmhhbmRsZUlucHV0LmJpbmQodGhpcyl9Lz5cclxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkIHBsLTJcIj5cclxuICAgICAgICAgICAgICAgICAgICBVc2VkIGZvciB0aGUgbWFwIG9mIHRoZSBjb250YWN0IHVzIHBhZ2VcclxuICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdFBhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgYWRkTGluayhpZCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9L3F1aWNrbGluay8ke2lkfS8ke3RoaXMucHJvcHMuc2VjdGlvbklkfWBcclxuICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy51KCk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtRdWlja2xpbmtzUGFnZXNAcmVtb3ZlTGlua10gRXJyb3IgcmVtb3ZpbmcgcXVpY2tsaW5rOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGRpc2FibGVkID0gIXRoaXMucHJvcHMucGFnZXMgfHwgdGhpcy5wcm9wcy5wYWdlcyAmJiB0aGlzLnByb3BzLnBhZ2VzLmxlbmd0aCA9PSAwO1xyXG4gICAgICAgIGxldCBwYWdlTGlua3M7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGFnZXMgJiYgdGhpcy5wcm9wcy5wYWdlcy5sZW5ndGggPiAwKSB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBhZ2VMaW5rcyA9IHRoaXMucHJvcHMucGFnZXMubWFwKChwYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGEgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgcm9sZT1cInByZXNlbnRhdGlvblwiIG9uQ2xpY2s9e3RoaXMuYWRkTGluay5iaW5kKHRoaXMsIHBhZ2UuaWQpfT57cGFnZS5uYW1lfTwvYT5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFnZUxpbmtzID0gPGEgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbSBkaXNhYmxlZFwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj5BbGwgcGFnZXMgaGF2ZSBiZWVuIGFzc2lnbmVkPC9hPlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGJ0bi1zbSBmbG9hdC1yaWdodCBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgdHlwZT1cImJ1dHRvblwiPiBBZGQgUGFnZSA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj5cclxuICAgICAgICAgICAgICAgICAgICB7cGFnZUxpbmtzfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlUm93IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbW92ZUxpbmsocGFnZUlkKSB7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS9xdWlja2xpbmsvJHtwYWdlSWR9YFxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1F1aWNrbGlua3NQYWdlc0ByZW1vdmVMaW5rXSBFcnJvciByZW1vdmluZyBxdWlja2xpbms6IGAsIGVyci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhZ2VMaW5rIHBhZ2U9e3RoaXMucHJvcHMucGFnZX0gLz5cclxuICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWRhbmdlciBidG4tc20gZmxvYXQtcmlnaHRcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5yZW1vdmVMaW5rLmJpbmQodGhpcywgdGhpcy5wcm9wcy5wYWdlLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZSBRdWljayBMaW5rIDxpIGNsYXNzTmFtZT1cImZhcyBmYS10aW1lc1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBQYWdlTGluayBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICB1cmwoeCkge1xyXG4gICAgICAgIHJldHVybiB4LnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgcGFnZSA9IHRoaXMucHJvcHMucGFnZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGEgaHJlZj17cGFnZS5zZWN0aW9uICE9ICdlZHVjYXRpb24nID8gYC8ke3RoaXMudXJsKHBhZ2UubmFtZSl9YCA6IGAvZWR1Y2F0aW9uLyR7dGhpcy51cmwocGFnZS5uYW1lKX1gfT5cclxuICAgICAgICAgICAgICAgIHtwYWdlLm5hbWV9XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBJbnB1dCB9IGZyb20gJy4uLy4uLy4uL0NvbXBvbmVudHMvRm9ybUNvbnRyb2wnO1xyXG5pbXBvcnQgeyBDb25maXJtQnV0dG9uLCBCdG5Hcm91cCB9IGZyb20gJy4uLy4uLy4uL0NvbXBvbmVudHMvQnV0dG9uJztcclxuaW1wb3J0IFNlbGVjdFBhZ2UgZnJvbSAnLi9BZGRQYWdlTGluayc7XHJcbmltcG9ydCBQYWdlUm93IGZyb20gJy4vUGFnZUxpbmsnO1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBfLmNsb25lRGVlcCh0aGlzLnByb3BzLnNlY3Rpb24udGl0bGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnByb3BzLnNlY3Rpb25JZClcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWxDaGFuZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHZhbHVlOiBfLmNsb25lRGVlcCh0aGlzLnByb3BzLnNlY3Rpb24udGl0bGUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUNoYW5nZShzZWN0aW9uSWQpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAncHV0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9L3F1aWNrbGluay8ke3NlY3Rpb25JZH1gLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zdGF0ZS52YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuZG9uZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG4gICAgICAgIH0pLmZhaWwoKGVycikgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbU2VjdGlvbkBzYXZlQ2hhbmdlXSBFcnJvciB1cGRhdGluZyBwYWdlIHRpdGxlOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVWYWwoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB2YWx1ZTogZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRQYWdlcztcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWN0aW9uLnBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlcyA9IHRoaXMucHJvcHMuc2VjdGlvbi5wYWdlcy5tYXAoKHBhZ2UpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8UGFnZVJvdyBwYWdlPXtwYWdlfSBiYXNlVXJpPXt0aGlzLnByb3BzLmJhc2VVcml9IHU9e3RoaXMucHJvcHMudX0gLz5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYWN0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSAhPSB0aGlzLnByb3BzLnNlY3Rpb24udGl0bGUpIHtcclxuICAgICAgICAgICAgYWN0aW9ucyA9IChcclxuICAgICAgICAgICAgICAgIDxCdG5Hcm91cCBzaXplPVwic21cIiBjbGFzc05hbWU9J2Zsb2F0LXJpZ2h0IHBiLTInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb25maXJtQnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIiBjYj17dGhpcy5jYW5jZWxDaGFuZ2UuYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENhbmNlbCA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdGltZXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db25maXJtQnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Q29uZmlybUJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4tc3VjY2Vzc1wiIGNiPXt0aGlzLnNhdmVDaGFuZ2UuYmluZCh0aGlzLCB0aGlzLnByb3BzLnNlY3Rpb25JZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTYXZlIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1jaGVja1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbmZpcm1CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L0J0bkdyb3VwID5cclxuICAgICAgICAgICAgKSAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBsYWJlbD1cIlNlY3Rpb24gVGl0bGVcIiByZXF1aXJlZD4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAge2FjdGlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IGNiPXt0aGlzLnVwZGF0ZVZhbC5iaW5kKHRoaXMpfSByZXF1aXJlZCAvPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1yZXNwb25zaXZlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtaG92ZXIgdGFibGUtc21cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RQYWdlIHBhZ2VzPXt0aGlzLnByb3BzLmF2YWxpYWJsZVBhZ2VzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbklkPXt0aGlzLnByb3BzLnNlY3Rpb25JZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e3RoaXMucHJvcHMuYmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMucHJvcHMudX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2N1cnJlbnRQYWdlc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gJy4vRm9vdGVyUXVpY2tMaW5rcy9TZWN0aW9uJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlclF1aWNrTGlua3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uIHNlY3Rpb249e3RoaXMucHJvcHMuc2VjdGlvbnMuYX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXZhbGlhYmxlUGFnZXM9e3RoaXMucHJvcHMuc2VjdGlvbnMuYXZhbGlhYmxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXt0aGlzLnByb3BzLmJhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMucHJvcHMudX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbklkPXsxfSAvLyBFbnVtIElEID0gUXVpY2tMaW5rcy5BXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb24gc2VjdGlvbj17dGhpcy5wcm9wcy5zZWN0aW9ucy5ifVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFsaWFibGVQYWdlcz17dGhpcy5wcm9wcy5zZWN0aW9ucy5hdmFsaWFibGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e3RoaXMucHJvcHMuYmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5wcm9wcy51fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uSWQ9ezJ9IC8vIEVudW0gSUQgPSBRdWlja0xpbmtzLkJcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5pbXBvcnQgQ29udGFjdEluZm9ybWF0aW9uIGZyb20gJy4vU3lzdGVtU2V0dGluZ3MvQ29udGFjdEluZm9ybWF0aW9uJztcclxuaW1wb3J0IEZvb3RlclF1aWNrTGlua3MgZnJvbSAnLi9TeXN0ZW1TZXR0aW5ncy9Gb290ZXJRdWlja0xpbmtzJztcclxuXHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5jb25zdCBiYXNlVXJpID0gYC9hZG1pbi93ZWIvc2V0dGluZ3NgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZ3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBudWxsLFxyXG4gICAgICAgICAgICBhY3RpdmVUYWI6IG51bGxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBhY3RpdmVUYWI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF93ZWJzaXRlU2V0dGluZ3MnKS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRhYlwiKVxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgfSkgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHtiYXNlVXJpfS9kYXRhYFxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogZGF0YVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1VzZXJAZ2V0RGF0YV0gRXJyb3IgZ2V0dGluZyBkYXRhOiBgLCBlcnIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2V0dGluZ3MpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBsZXQgYWN0aXZlUGFnZSA9IChcclxuICAgICAgICAgICAgPENvbnRhY3RJbmZvcm1hdGlvbiBjb250YWN0PXt0aGlzLnN0YXRlLnNldHRpbmdzLmNvbnRhY3R9XHJcbiAgICAgICAgICAgICAgICB1PXt0aGlzLmdldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgIGJhc2VVcmk9e2Jhc2VVcml9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVUYWIgPT0gXCJmb290ZXJcIikge1xyXG4gICAgICAgICAgICBhY3RpdmVQYWdlID0gKFxyXG4gICAgICAgICAgICAgICAgPEZvb3RlclF1aWNrTGlua3Mgc2VjdGlvbnM9e3RoaXMuc3RhdGUuc2V0dGluZ3MucXVpY2tMaW5rc31cclxuICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+U3lzdGVtIFNldHRpbmdzPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8UGFnZVRhYnMgYWN0aXZlVGFiPXt0aGlzLnN0YXRlLmFjdGl2ZVRhYn0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge2FjdGl2ZVBhZ2V9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2VUYWJzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB0YWJzQXJyYXkgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHVybDogXCJjb250YWN0XCIsXHJcbiAgICAgICAgICAgICAgICB0YWJOYW1lOiBcIkNvbnRhY3QgSW5mb3JtYXRpb25cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB1cmw6IFwiZm9vdGVyXCIsXHJcbiAgICAgICAgICAgICAgICB0YWJOYW1lOiBcIkZvb3RlciBRdWljay1MaW5rc1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdXHJcblxyXG4gICAgICAgIGxldCB0YWJzO1xyXG4gICAgICAgIGlmICh0YWJzQXJyYXkpIHtcclxuICAgICAgICAgICAgdGFicyA9IHRhYnNBcnJheS5tYXAoKHRhYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtgbmF2LWxpbmsgJHt0YWIudXJsID09IHRoaXMucHJvcHMuYWN0aXZlVGFiID8gJ2FjdGl2ZScgOiAnJ31gfSBocmVmPXtgP3RhYj0ke3RhYi51cmx9YH0+e3RhYi50YWJOYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXYgbmF2LXRhYnMgbWItM1wiPlxyXG4gICAgICAgICAgICAgICAge3RhYnN9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF93ZWJzaXRlU2V0dGluZ3MnKSlcclxuICAgIHJlbmRlcig8U2V0dGluZ3MgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF93ZWJzaXRlU2V0dGluZ3MnKSk7ICAgICIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgaXNFeHRlcm5hbFVybCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDTVNCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIGFsaWduKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy5saW5rLmFsaWduKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjZW50ZXJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRleHQtY2VudGVyXCI7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRleHQtcmlnaHRcIjtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgdXJsSWNvbjtcclxuICAgICAgICBpZiAoaXNFeHRlcm5hbFVybCh0aGlzLnByb3BzLmxpbmsuaHJlZikpIHtcclxuICAgICAgICAgICAgdXJsSWNvbiA9IDxpIGNsYXNzTmFtZT1cImZhciBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXt0aGlzLmFsaWduKCl9PlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtgYnRuIGJ0bi0ke3RoaXMucHJvcHMubGluay5jb2xvcn0gJHt0aGlzLnByb3BzLmxpbmsuYWxpZ24gPT0gXCJibG9ja1wiID8gXCJidG4tYmxvY2tcIiA6IFwiXCJ9YH1cclxuICAgICAgICAgICAgICAgICAgICBocmVmPXt0aGlzLnByb3BzLmxpbmsuaHJlZn0+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGluay50ZXh0fSAmbmJzcDsge3VybEljb259XHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IGlzRXh0ZXJuYWxVcmwgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzLmpzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ01TTGluayBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG5cclxuICAgIGFsaWduVGV4dCgpIHtcclxuICAgICAgICBsZXQgYWxpZ24gPSB0aGlzLnByb3BzLmxpbmsuYWxpZ247XHJcblxyXG4gICAgICAgIGlmIChhbGlnbiA9PSBcImRlZmF1bHRcIiB8fCBhbGlnbiA9PSBcImJsb2NrXCIgfHwgYWxpZ24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYGQtYmxvY2sgdGV4dC0ke2FsaWdufWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHVybEljb247XHJcbiAgICAgICAgaWYgKGlzRXh0ZXJuYWxVcmwodGhpcy5wcm9wcy5saW5rLmhyZWYpKSB7XHJcbiAgICAgICAgICAgIHVybEljb24gPSA8aSBjbGFzc05hbWU9XCJmYXIgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9e2B0ZXh0LSR7dGhpcy5wcm9wcy5saW5rLmNvbG9yfSAke3RoaXMuYWxpZ25UZXh0KCl9YH1cclxuICAgICAgICAgICAgICAgIGhyZWY9e3RoaXMucHJvcHMubGluay5ocmVmfT5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmxpbmsudGV4dH0gJm5ic3A7IHt1cmxJY29ufVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENNU0J1dHRvbiBmcm9tICcuL1RleHRCbG9ja0FjdGlvbi9DTVNCdXR0b24nO1xyXG5pbXBvcnQgQ01TTGluayBmcm9tICcuL1RleHRCbG9ja0FjdGlvbi9DTVNMaW5rJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRCbG9ja0FjdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIC8vIE5vIHByb3BzIHByb3ZpZGVkLCBkb24ndCByZW5kZXJcclxuICAgICAgICBpZiAoIXRoaXMucHJvcHMubGluayB8fCAhdGhpcy5wcm9wcy5saW5rLnRleHQpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBsZXQgdWk7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubGluay5pc0J1dHRvbikge1xyXG4gICAgICAgICAgICB1aSA9IDxDTVNCdXR0b24gbGluaz17dGhpcy5wcm9wcy5saW5rfSAvPiAgICAgICAgICAgIFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVpID0gPENNU0xpbmsgbGluaz17dGhpcy5wcm9wcy5saW5rfSAvPlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAge3VpfVxyXG4gICAgICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBCdXR0b24sIENvbmZpcm1CdXR0b24gfSBmcm9tICcuLi8uLi9Db21wb25lbnRzL0J1dHRvbic7XHJcblxyXG5jb25zdCBNb2RlID0ge1xyXG4gICAgVmlldzogJ3ZpZXcnLFxyXG4gICAgRWRpdDogJ2VkaXQnLFxyXG4gICAgUHJldmlldzogJ3ByZXZpZXcnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBidG5DZW50ZXI7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PSBNb2RlLlByZXZpZXcpIHtcclxuICAgICAgICAgICAgYnRuQ2VudGVyID0gKFxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4taW5mb1wiIHR5cGU9XCJidXR0b25cIiBjYj17dGhpcy5wcm9wcy5lZGl0TW9kZS5iaW5kKHRoaXMsIE1vZGUuRWRpdCl9PlxyXG4gICAgICAgICAgICAgICAgICAgIEVkaXQgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidG5DZW50ZXIgPSAoXHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1pbmZvXCIgdHlwZT1cImJ1dHRvblwiIGNiPXt0aGlzLnByb3BzLmVkaXRNb2RlLmJpbmQodGhpcywgTW9kZS5QcmV2aWV3KX0+XHJcbiAgICAgICAgICAgICAgICAgICAgUHJldmlldyA8aSBjbGFzc05hbWU9XCJmYSBmYS1iaW5vY3VsYXJzXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiB2aWV3IG1vZGUsIFxyXG4gICAgICAgIC8vIGRvIG5vdCByZW5kZXIgdGhlIGNvbXBvbmVudFxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT0gTW9kZS5WaWV3KVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiByb2xlPVwiZ3JvdXBcIiBjbGFzc05hbWU9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXNtIHBiLTIgZC1ibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgPENvbmZpcm1CdXR0b24gYnRuQ2xhc3M9XCJidG4gYnRuLWRhbmdlclwiIGNiPXt0aGlzLnByb3BzLmNhbmNlbEVkaXRNb2RlLmJpbmQodGhpcyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIENhbmNlbMKgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9Db25maXJtQnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgIHtidG5DZW50ZXJ9XHJcblxyXG4gICAgICAgICAgICAgICAgPENvbmZpcm1CdXR0b24gcGVuZGluZz17dGhpcy5wcm9wcy5yZXF1ZXN0UGVuZGluZ30gY2I9e3RoaXMucHJvcHMuc2F2ZUNoYW5nZXMuYmluZCh0aGlzKX0gYnRuQ2xhc3M9XCJidG4gYnRuLXN1Y2Nlc3NcIj5cclxuICAgICAgICAgICAgICAgICAgICBTYXZlwqA8aSBjbGFzc05hbWU9XCJmYSBmYS1jaGVja1wiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvQ29uZmlybUJ1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IE1vZGUgfSBmcm9tICcuLi9UZXh0JztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvRm9ybUNvbnRyb2wnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGluZyBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgaGVhZGluZztcclxuICAgICAgICBpZiAoISh0aGlzLnByb3BzLm1vZGUgPT0gTW9kZS5FZGl0KSAmJiB0aGlzLnByb3BzLmhlYWRpbmcpIHtcclxuICAgICAgICAgICAgaGVhZGluZyA9IDxoNiBjbGFzc05hbWU9XCJkLWlubGluZSBtci0zXCI+e3RoaXMucHJvcHMuaGVhZGluZ308L2g2PlxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5tb2RlID09IE1vZGUuRWRpdCkge1xyXG4gICAgICAgICAgICBoZWFkaW5nID0gKFxyXG4gICAgICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkXCI+SGVhZGluZyAoT3B0aW9uYWwpPC9zbWFsbD5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdHlwZT1cInRleHRcIiBpbnB1dENsYXNzPVwiZm9ybS1jb250cm9sIGNtc1wiIHZhbHVlPXt0aGlzLnByb3BzLmhlYWRpbmcgfHwgbnVsbH0gY2I9e3RoaXMucHJvcHMuZWRpdFZhbC5iaW5kKHRoaXMpfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGJ0bkVkaXRNb2RlO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFkbWluICYmIHRoaXMucHJvcHMubW9kZSA9PSBNb2RlLlZpZXcpIHtcclxuICAgICAgICAgICAgYnRuRWRpdE1vZGUgPSAoXHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi1zbSBidG4taW5mb1wiIGNiPXt0aGlzLnByb3BzLmVkaXRNb2RlLmJpbmQodGhpcywgTW9kZS5FZGl0KX0+XHJcbiAgICAgICAgICAgICAgICAgICAgeyF0aGlzLnByb3BzLmhlYWRpbmcgJiYgIXRoaXMucHJvcHMuZXhpc3RzID8gXCJBZGQgQ29udGVudFwiIDogXCJFZGl0XCJ9ICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17IXRoaXMucHJvcHMuaGVhZGluZyAmJiAhdGhpcy5wcm9wcy5leGlzdHMgPyAnZmFzIGZhLXBsdXMnIDogJ2ZhcyBmYS1wZW5jaWwnfT48L2k+XHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAge2hlYWRpbmd9XHJcbiAgICAgICAgICAgICAgICB7YnRuRWRpdE1vZGV9XHJcbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IE1vZGUgfSBmcm9tICcuLi9UZXh0JztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRleHRBcmVhIH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9Gb3JtQ29udHJvbCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIGxldCB0ZXh0ID0gPHA+e3RoaXMucHJvcHMudGV4dH08L3A+O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT0gTW9kZS5FZGl0KSB7XHJcbiAgICAgICAgICAgIHRleHQgPSAoXHJcbiAgICAgICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5UZXh0IENvbnRlbnQ8L3NtYWxsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0QXJlYSBpbnB1dENsYXNzPVwiZm9ybS1jb250cm9sIGNtcyBtYi0yXCIgdmFsdWU9e3RoaXMucHJvcHMudGV4dH0gcm93cz17Nn0gY2I9e3RoaXMucHJvcHMuZWRpdFZhbC5iaW5kKHRoaXMsICd0ZXh0Jyl9PjwvVGV4dEFyZWE+XHJcbiAgICAgICAgICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICB7dGV4dH1cclxuICAgICAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICAgICApO1xyXG5cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFRleHRCbG9ja0FjdGlvbiBmcm9tICcuL1RleHQvVGV4dEJsb2NrQWN0aW9uJztcclxuaW1wb3J0IEVkaXRCdXR0b24gZnJvbSAnLi9UZXh0L0VkaXRCdXR0b25zJ1xyXG5pbXBvcnQgSGVhZGluZyBmcm9tICcuL1RleHQvSGVhZGluZyc7XHJcbmltcG9ydCBDb250ZW50IGZyb20gJy4vVGV4dC9Db250ZW50JztcclxuaW1wb3J0ICQgZnJvbSAnalF1ZXJ5JztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgTW9kZSA9IHtcclxuICAgIFZpZXc6ICd2aWV3JyxcclxuICAgIEVkaXQ6ICdlZGl0JyxcclxuICAgIFByZXZpZXc6ICdwcmV2aWV3J1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0QmxvY2sgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRpbmc6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbGluazogbnVsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlZGl0TW9kZTogTW9kZS5WaWV3LFxyXG4gICAgICAgICAgICByZXF1ZXN0UGVuZGluZzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV4dFByb3BzLmNvbnRlbnQgJiYgbmV4dFByb3BzLmNvbnRlbnQgIT0gdGhpcy5zdGF0ZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXy5jbG9uZURlZXAobmV4dFByb3BzLmNvbnRlbnQpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlZGl0VmFsKGZpZWxkLCB2YWx1ZSkge1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jb250ZW50KTtcclxuICAgICAgICBzd2l0Y2ggKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJoZWFkaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmhlYWRpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQudGV4dCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmxpbmsgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsRWRpdE1vZGUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGVkaXRNb2RlOiBNb2RlLlZpZXcsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMucHJvcHMuY29udGVudFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGVkaXRNb2RlKHQpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgZWRpdE1vZGU6IHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlQ2hhbmdlcygpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGVkaXRNb2RlOiBNb2RlLlByZXZpZXdcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6IGAke3RoaXMucHJvcHMuYmFzZVVyaX0vJHt0aGlzLnByb3BzLmNvbnRlbnQucGFnZUlkfS90ZXh0LyR7dGhpcy5wcm9wcy5jb250ZW50LnNsb3ROb31gLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmc6IHRoaXMuc3RhdGUuY29udGVudC5oZWFkaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuc3RhdGUuY29udGVudC50ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IHRoaXMuc3RhdGUuY29udGVudC5saW5rXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KS5kb25lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRNb2RlOiBNb2RlLlZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0TW9kZTogTW9kZS5FZGl0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RQZW5kaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHsgICAgICAgXHJcbiAgICAgICAgbGV0IGVkaXRCdXR0b247XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYWRtaW4pIHtcclxuICAgICAgICAgICAgZWRpdEJ1dHRvbiA9IChcclxuICAgICAgICAgICAgICAgIDxFZGl0QnV0dG9uIG1vZGU9e3RoaXMuc3RhdGUuZWRpdE1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdE1vZGU9e3RoaXMuZWRpdE1vZGUuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICBzYXZlQ2hhbmdlcz17dGhpcy5zYXZlQ2hhbmdlcy5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEVkaXRNb2RlPXt0aGlzLmNhbmNlbEVkaXRNb2RlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBlbmRpbmc9e3RoaXMuc3RhdGUucmVxdWVzdFBlbmRpbmd9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICB7ZWRpdEJ1dHRvbn1cclxuXHJcbiAgICAgICAgICAgICAgICA8SGVhZGluZyBtb2RlPXt0aGlzLnN0YXRlLmVkaXRNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmc9e3RoaXMuc3RhdGUuY29udGVudC5oZWFkaW5nfVxyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0cz17ISF0aGlzLnN0YXRlLmNvbnRlbnQudGV4dH1cclxuICAgICAgICAgICAgICAgICAgICBlZGl0VmFsPXt0aGlzLmVkaXRWYWwuYmluZCh0aGlzLCAnaGVhZGluZycpfVxyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRNb2RlPXt0aGlzLmVkaXRNb2RlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgYWRtaW49e3RoaXMucHJvcHMuYWRtaW59XHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxDb250ZW50IG1vZGU9e3RoaXMuc3RhdGUuZWRpdE1vZGV9XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dD17dGhpcy5zdGF0ZS5jb250ZW50LnRleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdFZhbD17dGhpcy5lZGl0VmFsLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxUZXh0QmxvY2tBY3Rpb24gbW9kZT17dGhpcy5zdGF0ZS5lZGl0TW9kZX1cclxuICAgICAgICAgICAgICAgICAgICBsaW5rPXt0aGlzLnN0YXRlLmNvbnRlbnQubGlua31cclxuICAgICAgICAgICAgICAgICAgICBhZG1pbj17dGhpcy5wcm9wcy5hZG1pbn1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluYWN0aXZlQWNjb3VudCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpbi1jbGVhbiB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGZvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWJhbiBmYS01eCB0ZXh0LWNlbnRlclwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZGlzcGxheS01IG1iLTRcIj5BY2NvdW50IEluYWN0aXZlPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBtYj1cIjJcIj5BbiBhZG1pbmlzdHJhdG9yIG5lZWRzIHRvIGFjdGl2YXRlIHlvdXIgYWNjb3VudC48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+V2UnbGwgc2VuZCB5b3UgYW4gZW1haWwgb25jZSB0aGlzIGhhcyBiZWVuIGRvbmUuPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF9lcnJvckluYWN0aXZlQWNjb3VudCcpKVxyXG4gICAgcmVuZGVyKDxJbmFjdGl2ZUFjY291bnQgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdF9lcnJvckluYWN0aXZlQWNjb3VudCcpKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFzc3dvcmRFeHBpcmVkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luLWNsZWFuIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXIgZmEtZW52ZWxvcGUtb3BlbiBmYS01eCB0ZXh0LWNlbnRlclwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZGlzcGxheS01IG1iLTRcIj5QYXNzd29yZCBFeHBpcmVkPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBtYj1cIjJcIj5XZSBuZWVkIHlvdSB0byBjaGFuZ2UgeW91ciBwYXNzd29yZCwgcGxlYXNlIGNoZWNrIHlvdXIgZW1haWxzLjwvcD5cclxuICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfZXJyb3JQYXNzd29yZEV4cGlyZWQnKSlcclxuICAgIHJlbmRlcig8UGFzc3dvcmRFeHBpcmVkIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfZXJyb3JQYXNzd29yZEV4cGlyZWQnKSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsZXJ0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGdldENsYXNzKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wcy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFsZXJ0LWRhbmdlclwiO1xyXG4gICAgICAgICAgICBjYXNlIFwic3VjY2Vzc1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYWxlcnQtc3VjY2Vzc1wiO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYWxlcnQtcHJpbWFyeVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7ICAgICAgXHJcbiAgICAgICAgbGV0IGRpc21pc3M7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzbWlzcykge1xyXG4gICAgICAgICAgICBkaXNtaXNzID0gKFxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJhbGVydFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPsOXPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCIgY2xhc3NOYW1lPXtgYWxlcnQgJHt0aGlzLmdldENsYXNzKCl9YH0+XHJcbiAgICAgICAgICAgICAgICB7ZGlzbWlzc31cclxuXHJcbiAgICAgICAgICAgICAgICA8c3Bhbj57dGhpcy5wcm9wcy5jaGlsZHJlbn08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ29uZmlybUJ1dHRvbiwgQ29uZmlybU1vZGFsIH0gZnJvbSAnLi4vQ29tcG9uZW50cy9CdXR0b24nO1xyXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi4vQ29tcG9uZW50cy9BbGVydCc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlTWFzdCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICghISF0aGlzLnByb3BzLnBhZ2UpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBwYi00XCI+XHJcblxyXG4gICAgICAgICAgICAgICAgPERlbGV0ZVBhZ2UgYWRtaW49e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZT17dGhpcy5wcm9wcy5wYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e3RoaXMucHJvcHMuYmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLnByb3BzLnV9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxUb2dnbGVWaXNpYmlsaXR5IGFkbWluPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U9e3RoaXMucHJvcHMucGFnZX1cclxuICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXt0aGlzLnByb3BzLmJhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5wcm9wcy51fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8Q29uZmlybUJ1dHRvbiBidG5DbGFzcz1cImJ0biBidG4taW5mbyBmbG9hdC1yaWdodCBkaXNhYmxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFZpZXcgUGFnZSBIaXN0b3J5ICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhciBmYS1oaXN0b3J5XCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9Db25maXJtQnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJtYi0xXCI+e3RoaXMucHJvcHMucGFnZSA/IHRoaXMucHJvcHMucGFnZS5uYW1lIDogXCJcIn08L2gxPlxyXG4gICAgICAgICAgICAgICAgPExhc3RUb3VjaGVkIHBhZ2U9e3RoaXMucHJvcHMucGFnZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICA8VmlzaWJpbGl0eUJhbm5lciBwdWJsaWM9e3RoaXMucHJvcHMucGFnZS5wdWJsaWN9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTGFzdFRvdWNoZWQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCB1cGRhdGUgPSB0aGlzLnByb3BzLnBhZ2UudXBkYXRlZDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnBhZ2UuaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgYWRtaW5pc3RyYXRvcnMgc2hvdWxkIHNlZSB0aGlzIGJ1dHRvblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzbWFsbD5cclxuICAgICAgICAgICAgICAgIFVwZGF0ZWQgYnk6IHt1cGRhdGUuYnl9IG9uIHt1cGRhdGUuYXR9XHJcbiAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGVsZXRlUGFnZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBkZWxldGVQYWdlKCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLnByb3BzLnBhZ2UuaWQsXHJcbiAgICAgICAgICAgIHVybDogYCR7dGhpcy5wcm9wcy5iYXNlVXJpfS8ke3RoaXMucHJvcHMucGFnZS5pZH1gXHJcbiAgICAgICAgfSkuZG9uZSgodXJsKSA9PiB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnBhZ2UuaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICggICAgICAgICAgICBcclxuICAgICAgICAgICAgPENvbmZpcm1Nb2RhbCBidG5DbGFzcz1cImJ0biBidG4tZGFuZ2VyIGZsb2F0LXJpZ2h0XCJcclxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uPVwiZGVsZXRlIHBhZ2VcIlxyXG4gICAgICAgICAgICAgICAgZXhwbGFuYXRpb249XCJUaGlzIGFjdGlvbiBjYW5ub3QgYmUgdW5kb25lLCBhbGwgaW5mb3JtYXRpb24gd2lsbCBiZSBsb3N0XCJcclxuICAgICAgICAgICAgICAgIGFjdGlvblRleHQ9XCJZRVMgRGVsZXRlIFBhZ2UhXCJcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1QaHJhc2U9e3RoaXMucHJvcHMucGFnZS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgY2I9e3RoaXMuZGVsZXRlUGFnZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBEZWxldGUgUGFnZSA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT5cclxuICAgICAgICAgICAgPC9Db25maXJtTW9kYWw+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9nZ2xlVmlzaWJpbGl0eSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICB0b2dnbGVWaXNpYmlsaXR5KCkge1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLnByb3BzLmJhc2VVcml9LyR7dGhpcy5wcm9wcy5wYWdlLmlkfS92aXNpYmlsaXR5YFxyXG4gICAgICAgIH0pLmRvbmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnUoKTtcclxuICAgICAgICB9KS5mYWlsKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnBhZ2UuaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgYWRtaW5pc3RyYXRvcnMgc2hvdWxkIHNlZSB0aGlzIGJ1dHRvblxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0ZXh0O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2UucHVibGljKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSAoXHJcbiAgICAgICAgICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgSGlkZSBQYWdlICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1leWUtc2xhc2hcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGV4dCA9IChcclxuICAgICAgICAgICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICBTaG93IFBhZ2UgJm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWV5ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxDb25maXJtQnV0dG9uIGJ0bkNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nIGZsb2F0LXJpZ2h0XCIgY2I9e3RoaXMudG9nZ2xlVmlzaWJpbGl0eS5iaW5kKHRoaXMpfSA+XHJcbiAgICAgICAgICAgICAgICB7dGV4dH1cclxuICAgICAgICAgICAgPC9Db25maXJtQnV0dG9uPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZpc2liaWxpdHlCYW5uZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnB1YmxpYykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxBbGVydCB0eXBlPVwiZGFuZ2VyXCI+VGhpcyBwYWdlIGlzIGhpZGRlbiEgT25seSBhdXRoZW50aWNhdGVkIHVzZXJzIGNhbiBzZWUgdGhpcyBwYWdlLjwvQWxlcnQ+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgQnV0dG9uLCBDb25maXJtTW9kYWwgfSBmcm9tICcuLi9Db21wb25lbnRzL0J1dHRvbic7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCwgSW5wdXQsIFRleHRBcmVhIH0gZnJvbSAnLi4vQ29tcG9uZW50cy9Gb3JtQ29udHJvbCc7XHJcbmltcG9ydCBUZXh0QmxvY2sgZnJvbSAnLi4vQ01TLUJsb2Nrcy9UZXh0JztcclxuaW1wb3J0IFBhZ2VNYXN0IGZyb20gJy4uL0NNUy1CbG9ja3MvUGFnZU1hc3QnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuY29uc3QgYmFzZVVyaSA9IFwiL2FwaS9wYWdlXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWN0VGVtcGxhdGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgIHBhZ2VJZDogbnVsbCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfdGVtcGxhdGVfMScpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGBGYWlsZWQgdG8gYXR0YWNoIGNvbXBvbmVudC4gQXR0cmlidXRlICdkYXRhLXBhZ2VpZCcgd2FzIG5vdCBmb3VuZGA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgcGFnZUlkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3RfdGVtcGxhdGVfMScpLmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZWlkXCIpXHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkgeyAgICAgICAgICAgXHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogJ2dldCcsXHJcbiAgICAgICAgICAgIHVybDogYCR7YmFzZVVyaX0vJHt0aGlzLnN0YXRlLnBhZ2VJZH1gXHJcbiAgICAgICAgfSkuZG9uZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuZmFpbCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8UGFnZU1hc3QgcGFnZT17dGhpcy5zdGF0ZS5kYXRhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiAgcGItNFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbGctNCBjb2wtbWQtNiBjb2wtc20tMTJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHU9e3RoaXMuZ2V0RGF0YS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJpPXtiYXNlVXJpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG1pbj17dGhpcy5zdGF0ZS5kYXRhICYmICEhdGhpcy5zdGF0ZS5kYXRhLmlzQXV0aGVudGljYXRlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD17dGhpcy5zdGF0ZS5kYXRhID8gdGhpcy5zdGF0ZS5kYXRhLnRleHRbMF0gOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy00IGNvbC1tZC02IGNvbC1zbS0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0QmxvY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdT17dGhpcy5nZXREYXRhLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmk9e2Jhc2VVcml9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluPXt0aGlzLnN0YXRlLmRhdGEgJiYgISF0aGlzLnN0YXRlLmRhdGEuaXNBdXRoZW50aWNhdGVkfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50PXt0aGlzLnN0YXRlLmRhdGEgPyB0aGlzLnN0YXRlLmRhdGEudGV4dFsxXSA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTQgY29sLW1kLTYgY29sLXNtLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRCbG9ja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1PXt0aGlzLmdldERhdGEuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVyaT17YmFzZVVyaX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW49e3RoaXMuc3RhdGUuZGF0YSAmJiAhIXRoaXMuc3RhdGUuZGF0YS5pc0F1dGhlbnRpY2F0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9e3RoaXMuc3RhdGUuZGF0YSA/IHRoaXMuc3RhdGUuZGF0YS50ZXh0WzJdIDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC1tZC0xMlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+RHJvcCB1cyBhbiBFbWFpbDwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBodG1sRm9yPVwibmFtZVwiIGxhYmVsPVwiWW91ciBOYW1lOlwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cIm5hbWVcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgYXV0b2NvbXBsZXRlPVwibmFtZVwiIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGh0bWxGb3I9XCJvcmdcIiBsYWJlbD1cIk9yZ2FuaXphdGlvbjpcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgaWQ9XCJvcmdcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJvcmdcIiBhdXRvY29tcGxldGU9XCJvcmdhbml6YXRpb25cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBodG1sRm9yPVwicGhvbmVcIiBsYWJlbD1cIkNvbnRhY3QgUGhvbmUgTnVtYmVyOlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cInBob25lXCIgdHlwZT1cInRleHRcIiBuYW1lPVwicGhvbmVcIiBhdXRvY29tcGxldGU9XCJwaG9uZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGh0bWxGb3I9XCJlbWFpbFwiIGxhYmVsPVwiRW1haWw6XCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IGlkPVwiZW1haWxcIiB0eXBlPVwiZW1haWxcIiBuYW1lPVwiZW1haWxcIiBhdXRvY29tcGxldGU9XCJlbWFpbFwiIHJlcXVpcmVkIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybUdyb3VwIGh0bWxGb3I9XCJzdWJqZWN0XCIgbGFiZWw9XCJTdWJqZWN0OlwiIHJlcXVpcmVkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCBpZD1cInN1YmplY3RcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJzdWJqZWN0XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXAgaHRtbEZvcj1cIm1lc3NhZ2VcIiBsYWJlbD1cIk1lc3NhZ2U6XCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRBcmVhIGlkPVwibWVzc2FnZVwiIG1heExlbmd0aD1cIjUwMFwiIHJlcXVpcmVkLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIHBlbmRpbmc9e2ZhbHNlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5kIEVtYWlsICZuYnNwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1lbnZlbG9wZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTYgY29sLW1kLTEyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5XaGVyZSB0byBGaW5kIFVzPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlmcmFtZSB3aWR0aD1cIjEwMCVcIiBmcmFtZWJvcmRlcj1cIjBcIiBzdHlsZT17eyBib3JkZXI6IDAsIGhlaWdodDogNTAgKyAndmgnIH19IHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZC92MS9wbGFjZT9rZXk9QUl6YVN5QWZvMUFBVERna1Z1TnFyeTJqdDdvWW5PTmR5cmZjMmNNXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmYW1wO3E9RGVlcCtDb3ZlK1NjaG9vbCtIb3N0ZWwmYW1wO2NlbnRlcj0tNDUuMzIyNjI4LDE2Ny4yMzIzMjgmYW1wO3pvb209OSZhbXA7bWFwdHlwZT1zYXRlbGxpdGVcIiBhbGxvd2Z1bGxzY3JlZW49XCJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9pZnJhbWU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5pZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X3RlbXBsYXRlXzEnKSlcclxuICAgIHJlbmRlcig8UmVhY3RUZW1wbGF0ZSAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0X3RlbXBsYXRlXzEnKSk7ICAgICJdLCJzb3VyY2VSb290IjoiIn0=