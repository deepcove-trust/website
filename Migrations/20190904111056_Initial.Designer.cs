// <auto-generated />
using System;
using Deepcove_Trust_Website.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deepcove_Trust_Website.Migrations
{
    [DbContext(typeof(WebsiteDataContext))]
    [Migration("20190904111056_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Deepcove_Trust_Website.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("ForcePasswordReset");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.BaseMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Filename");

                    b.Property<bool>("IsPublic");

                    b.Property<int>("MediaType");

                    b.Property<string>("Name");

                    b.Property<int>("Size");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Media");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseMedia");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.ChannelMembership", b =>
                {
                    b.Property<int>("AccountId");

                    b.Property<int>("NotificationChannelId");

                    b.HasKey("AccountId", "NotificationChannelId");

                    b.HasIndex("NotificationChannelId");

                    b.ToTable("ChannelMembership");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.CmsButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Align");

                    b.Property<int>("Color");

                    b.Property<string>("Href")
                        .IsRequired();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CmsButtons");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.MediaComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SlotNo");

                    b.HasKey("Id");

                    b.ToTable("MediaComponent");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.NotificationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NotificationChannels");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Public");

                    b.Property<int>("QuickLink");

                    b.Property<int>("Section");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.PageRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int?>("PageId");

                    b.Property<string>("Reason");

                    b.Property<int?>("TemplateId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PageId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PageRevisions");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.PageTemplate", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<int>("MediaAreas");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TextAreas");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PageTemplates");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<DateTime>("ExpiresAt");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.RevisionMediaComponent", b =>
                {
                    b.Property<int>("PageRevisionId");

                    b.Property<int>("MediaComponentId");

                    b.HasKey("PageRevisionId", "MediaComponentId");

                    b.HasIndex("MediaComponentId");

                    b.ToTable("RevisionMediaComponent");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.RevisionTextComponent", b =>
                {
                    b.Property<int>("PageRevisionId");

                    b.Property<int>("TextComponentId");

                    b.HasKey("PageRevisionId", "TextComponentId");

                    b.HasIndex("TextComponentId");

                    b.ToTable("RevisionTextComponent");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.SystemSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailBookings");

                    b.Property<string>("EmailGeneral");

                    b.Property<string>("FooterText");

                    b.Property<string>("LinkTitleA");

                    b.Property<string>("LinkTitleB");

                    b.Property<string>("Phone");

                    b.Property<string>("UrlFacebook");

                    b.Property<string>("UrlGoogleMaps");

                    b.Property<string>("UrlGooglePlay");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.TextComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CmsButtonId");

                    b.Property<string>("Heading");

                    b.Property<int>("SlotNo");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CmsButtonId");

                    b.ToTable("TextComponents");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.AudioMedia", b =>
                {
                    b.HasBaseType("Deepcove_Trust_Website.Models.BaseMedia");

                    b.Property<double>("Duration");

                    b.HasDiscriminator().HasValue("AudioMedia");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.GeneralMedia", b =>
                {
                    b.HasBaseType("Deepcove_Trust_Website.Models.BaseMedia");

                    b.HasDiscriminator().HasValue("GeneralMedia");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.ImageMedia", b =>
                {
                    b.HasBaseType("Deepcove_Trust_Website.Models.BaseMedia");

                    b.Property<string>("Alt");

                    b.Property<string>("Filenames");

                    b.Property<double>("Height");

                    b.Property<string>("Title");

                    b.Property<double>("Width");

                    b.HasDiscriminator().HasValue("ImageMedia");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.ChannelMembership", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.Account", "Account")
                        .WithMany("ChannelMemberships")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Deepcove_Trust_Website.Models.NotificationChannel", "NotificationChannel")
                        .WithMany("ChannelMemberships")
                        .HasForeignKey("NotificationChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.PageRevision", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Deepcove_Trust_Website.Models.Page", "Page")
                        .WithMany("PageRevisions")
                        .HasForeignKey("PageId");

                    b.HasOne("Deepcove_Trust_Website.Models.PageTemplate", "Template")
                        .WithMany("PageRevisions")
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.PasswordReset", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.RevisionMediaComponent", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.MediaComponent", "MediaComponent")
                        .WithMany("RevisionMediaComponents")
                        .HasForeignKey("MediaComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Deepcove_Trust_Website.Models.PageRevision", "PageRevision")
                        .WithMany("RevisionMediaComponents")
                        .HasForeignKey("PageRevisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.RevisionTextComponent", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.PageRevision", "PageRevision")
                        .WithMany("RevisionTextComponents")
                        .HasForeignKey("PageRevisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Deepcove_Trust_Website.Models.TextComponent", "TextComponent")
                        .WithMany()
                        .HasForeignKey("TextComponentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Deepcove_Trust_Website.Models.TextComponent", b =>
                {
                    b.HasOne("Deepcove_Trust_Website.Models.CmsButton", "CmsButton")
                        .WithMany("TextFields")
                        .HasForeignKey("CmsButtonId");
                });
#pragma warning restore 612, 618
        }
    }
}
